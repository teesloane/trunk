{"version":3,"sources":["shadow/remote/runtime/cljs/js_builtins.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAKA,AAAA,AAAA,AAAAA,gBAAAC,kCAAA,SAAA;;AAAA,AAAAD,gBAAAE,8BAAA,SAOE,WAASE;AAAT,AACE,GAAA,GAAQ,CAAY,AAAaA,gBAAGC;AAClCD;;AACA,OAACE,+CAEM,AAACE,+CACC,WAAKC,EAAEC,vFAGT,AAACI;AAHC,AACE,OAACH,oDAAOF,EAAEC,IAAI,AAACE,gBAASR,EAAEM;qFAJrC,2CAAA,AAAA,pEACO,AAACH,oBAAaH,7EAIZ,qBAAA,rBAACS,8NAGA,WAAKE,KAAKC,EAAEC;AAAZ,AACE,OAACL,gBAASR,EAAEY;;;;;AAnB9B,AAAA,AAAAhB,gBAAAC,kCAAA,QAAA;;AAAA,AAAAD,gBAAAE,8BAAA,QAsBE,WAASE;AAAT,AACE,OAACc,cAAId;;;AAvBT,AAAA,CAAA,AAAA,qDAAAD,rDAyBEgB;;AAzBF,CAAA,AAAA,AAyBEA,mEACA,WAASC;AAAT,AAAA,YAAA,RAASA;AAAT,AACE,IAAMC,OAAK,AAACC,kBAAQF;IACdG,OAAK,AAAYH;IACjBI,OAAK,AAAcJ;IACnBK,SAAO,AAAgBL;AAH7B,qHAIgB,AAAWA,mEACd,AAAQA,kEACP,AAASA,1PACjB,IAAAM,WAAA,2CAAA,yEAAA,gEAAA;IAAAA,eAAA,yIAAAA,vIACE,GAAA,SAAA,RAAOL,iBACP,8CAAAK,SAAA,vDAACC,4GAAYN;IAFfK,eAAA,+IAAAA,7HAIEH,MACA,8CAAAG,aAAA,3DAACC,iHAAYJ;IALfG,eAAA,6IAAAA,3HAOEF,MACA,8CAAAE,aAAA,3DAACC,+GAAYH;AARf,AAAA,oBAUEC;AACA,qDAAAC,aAAA,3DAACC,oHAAcF;;AAXjBC","names":["goog.object/set","clojure.core.protocols/Datafiable","clojure.core.protocols/datafy","cljs.core/PROTOCOL_SENTINEL","o","js/Object.prototype","cljs.core/with-meta","goog.object/getKeys","cljs.core.reduce","m","key","cljs.core.assoc_BANG_","goog.object/get","cljs.core/transient","cljs.core/persistent!","coll","k","v","cljs.core/vec","js/Error","e","data","cljs.core/ex-data","file","line","column","G__35661","cljs.core.assoc"],"sourcesContent":["(ns shadow.remote.runtime.cljs.js-builtins\n  (:require\n    [goog.object :as gobj]\n    [clojure.core.protocols :as p]))\n\n(extend-protocol p/Datafiable\n  ;; FIXME: this is kind of a bad idea\n  ;; can't do this for all objects, since none of the CLJS types implement this\n  ;; protocol either. the protocol dispatch will end up using object\n  ;; FIXME: this could detect CLJS types to some extent\n  ;; or should it just implement the protocols for the types?\n  object\n  (datafy [o]\n    (if-not (identical? (.-__proto__ o) js/Object.prototype)\n      o\n      (with-meta\n        (->> (gobj/getKeys o)\n             (reduce\n               (fn [m key]\n                 (assoc! m key (gobj/get o key)))\n               (transient {}))\n             (persistent!))\n\n        {`p/nav (fn [coll k v]\n                  (gobj/get o k))})))\n\n  array\n  (datafy [o]\n    (vec o))\n\n  js/Error\n  (datafy [e]\n    (let [data (ex-data e)\n          file (.-fileName e)\n          line (.-lineNumber e)\n          column (.-columnNumber e)]\n      (-> {:message (.-message e)\n           :name (.-name e)\n           :stack (.-stack e)}\n          (cond->\n            (some? data)\n            (assoc :data data)\n\n            file\n            (assoc :file file)\n\n            line\n            (assoc :line line)\n\n            column\n            (assoc :column column)\n            )))))\n"]}