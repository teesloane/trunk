{"version":3,"sources":["reagent/impl/template.cljs"],"mappings":"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","names":["reagent.impl.template/re-tag","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","tag","id","className","reagent.impl.template/adapt-react-class","c","reagent.impl.template/hiccup-tag?","x","reagent.impl.util/named?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","goog.object/get","reagent.impl.template/cached-prop-name","temp__5755__auto__","k'","cljs.core/name","v","reagent.impl.util/dash-to-prop-name","goog.object/set","reagent.impl.template/kv-conv","G__37579","reagent.impl.template/convert-prop-value","reagent.impl.util/js-val?","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","reagent.impl.template/custom-kv-conv","G__37622","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/set-id-class","props","id-class","class","G__37630","cljs.core.assoc","reagent.impl.util.class_names","or__4212__auto__","reagent.impl.template/convert-props","G__37639","reagent.impl.template/make-element","this","argv","component","jsprops","first-child","G__37645","cljs.core/count","js/shadow.js.shim.module$react.createElement","reagent.impl.protocols/as-element","cljs.core.nth","a","reagent.impl.template/HiccupTag","reagent.impl.template/->HiccupTag","custom","reagent.impl.template/parse-tag","hiccup-tag","vec__37652","cljs.core/re-matches","cljs.core/next","clojure.string/replace","js/Error","reagent.impl.component/comp-name","cljs.core.not_EQ_","reagent.impl.template/reag-element","compiler","reagent.impl.component/as-class","temp__5757__auto__","key","reagent.impl.util/react-key-from-vec","reagent.impl.template/function-element","first-arg","cljs.core.subvec","reagent.impl.component/functional-render-fn","reagent.impl.template/maybe-function-element","reagent.impl.component/react-class?","reagent.impl.template/fragment-element","hasprops","reagent.impl.protocols/make-element","js/shadow.js.shim.module$react.Fragment","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","_","s","reagent.impl.template/native-element","parsed","first","reagent.impl.input/input-component?","react-key","reagent.impl.util/get-react-key","input-class","reagent.impl.component/create-class","reagent.impl.input/input-spec","cljs.core/with-meta","cljs.core.merge","cljs.core/meta","reagent.impl.template/raw-element","comp","reagent.impl.template/expand-seq","cljs.core.into_array","p1__37728#","cljs.core.map","reagent.impl.template/expand-seq-dev","val","cljs.core/vector?","reagent.impl.template/expand-seq-check","vec__37734","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.util.hiccup_err","reagent.impl.template/hiccup-element","n","pos","G__37737","reagent.impl.protocols/parse-tag","cljs.core._EQ_","cljs.core.subs","reagent.impl.template/vec-to-elem","fn-to-element","js/console.error","cljs.core.pr_str","G__37738","cljs.core/Keyword","reagent.impl.template/as-element","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","reagent.impl.template/create-compiler","opts","cljs.core.gensym","parse-fn","cljs.core.get","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.t_reagent$impl$template37751","reagent.impl.template/t_reagent$impl$template37751","_37753","meta37752","reagent.impl.template/->t_reagent$impl$template37751","tag-name","tag-value","reagent.impl.template/default-compiler*","reagent.impl.template/default-compiler","reagent.impl.template/set-default-compiler!"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [reagent.impl.util :as util :refer [named?]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.input :as input]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn]]\n            [goog.object :as gobj]))\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [tag id className])\n\n(defn adapt-react-class\n  [c]\n  (->NativeWrapper c nil nil))\n\n;;; Common utilities\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n;;; Props conversion\n\n;; TODO: Move prop-name caches to the compiler object, if this\n;; conversion can be configured.\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (gobj/get o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set prop-name-cache (name k) v)\n        v))\n    k))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-prop-name k) (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set custom-prop-name-cache (name k) v)\n        v))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-custom-prop-name k) (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id (.-id id-class)\n        class (.-className id-class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      ;; Note: someone might use React-style :className property,\n      ;; this is the only place where that needs special case. Using\n      ;; :class and :className together is not supported.\n      (assoc :class (util/class-names class (or (:class props) (:className props)))))))\n\n(defn convert-props [props ^clj id-class]\n  (let [class (:class props)\n        props (-> props\n                  (cond-> class (assoc :class (util/class-names class)))\n                  (set-id-class id-class))]\n    (if (.-custom id-class)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Conversion from Hiccup forms\n\n(defn make-element [this argv component jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement component jsprops)\n\n    1 (react/createElement component jsprops\n                           (p/as-element this (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                          (.push a (p/as-element this v)))\n                         a)\n                       #js [component jsprops] argv))))\n\n(deftype HiccupTag [tag id className custom])\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id className] (->> hiccup-tag name (re-matches re-tag) next)\n        className (when-not (nil? className)\n                    (string/replace className #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\" (comp/comp-name)))\n    (->HiccupTag tag\n                 id\n                 className\n                 ;; Custom element names must contain hyphen\n                 ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n                 (not= -1 (.indexOf tag \"-\")))))\n\n(defn reag-element [tag v compiler]\n  (let [c (comp/as-class tag compiler)\n        jsprops #js {}]\n    (set! (.-argv jsprops) v)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement c jsprops)))\n\n(defn function-element [tag v first-arg compiler]\n  (let [jsprops #js {}]\n    (set! (.-reagentRender jsprops) tag)\n    (set! (.-argv jsprops) (subvec v first-arg))\n    ; (set! (.-opts jsprops) opts)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement (comp/functional-render-fn compiler tag) jsprops)))\n\n(defn maybe-function-element\n  \"If given tag is a Class, use it as a class,\n  else wrap in Reagent function wrapper.\"\n  [tag v compiler]\n  (if (comp/react-class? tag)\n    (reag-element tag v compiler)\n    (function-element tag v 1 compiler)))\n\n(defn fragment-element [argv compiler]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-prop-value (if hasprops props))\n                    #js {})\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (util/react-key-from-vec argv)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv react/Fragment jsprops first-child)))\n\n(def tag-name-cache #js {})\n\n(defn cached-parse [this x _]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (let [v (parse-tag x)]\n      (gobj/set tag-name-cache x v)\n      v)))\n\n(defn native-element [parsed argv first ^p/Compiler compiler]\n  (let [component (.-tag parsed)\n        props (nth argv first nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-props (if hasprops props) parsed)\n                    #js {})\n        first-child (+ first (if hasprops 1 0))]\n    (if (input/input-component? component)\n      (let [;; Also read :key from props map, because\n            ;; input wrapper will not place the key in useful place.\n            react-key (util/get-react-key props)\n            input-class (or (.-reagentInput compiler)\n                            (let [x (comp/create-class input/input-spec compiler)]\n                              (set! (.-reagentInput compiler) x)\n                              x))]\n        (p/as-element\n          compiler\n          (with-meta [input-class argv component jsprops first-child compiler]\n                     (merge (when react-key\n                              {:key react-key})\n                            (meta argv)))))\n      (do\n        (when-some [key (-> (meta argv) util/get-react-key)]\n          (set! (.-key jsprops) key))\n        (p/make-element compiler argv component jsprops first-child)))))\n\n(defn raw-element [comp argv compiler]\n  (let [props (nth argv 2 nil)\n        jsprops (or props #js {})]\n    (when-some [key (-> (meta argv) util/get-react-key)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv comp jsprops 3)))\n\n(defn expand-seq [s compiler]\n  (into-array (map #(p/as-element compiler %) s)))\n\n(defn expand-seq-dev [s ^clj o compiler]\n  (into-array (map (fn [val]\n                     (when (and (vector? val)\n                                (nil? (util/react-key-from-vec val)))\n                       (set! (.-no-key o) true))\n                     (p/as-element compiler val))\n                   s)))\n\n(defn expand-seq-check [x compiler]\n  (let [ctx #js {}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx compiler))]\n    (when derefed\n      (warn (util/hiccup-err x (comp/comp-name) \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when (.-no-key ctx)\n      (warn (util/hiccup-err x (comp/comp-name) \"Every element in a seq should have a unique :key\")))\n    res))\n\n(defn hiccup-element [v compiler]\n  (let [tag (nth v 0 nil)\n        n (name tag)\n        pos (.indexOf n \">\")]\n    (case pos\n      -1 (native-element (p/parse-tag compiler n tag) v 1 compiler)\n      0 (assert (= \">\" n) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup tag\"))\n      ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n      ;; Apply metadata (e.g. :key) to the outermost element.\n      ;; Metadata is probably used only with sequeneces, and in that case\n      ;; only the key of the outermost element matters.\n      (recur (with-meta [(subs n 0 pos)\n                         (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                        (meta v))\n             compiler))))\n\n(defn vec-to-elem [v compiler fn-to-element]\n  (when (nil? compiler)\n    (js/console.error \"vec-to-elem\" (pr-str v)))\n  (assert (pos? (count v)) (util/hiccup-err v (comp/comp-name) \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup form\"))\n    (case tag\n      :> (native-element (->HiccupTag (nth v 1 nil) nil nil nil) v 2 compiler)\n      :r> (raw-element (nth v 1 nil) v compiler)\n      :f> (function-element (nth v 1 nil) v 2 compiler)\n      :<> (fragment-element v compiler)\n      (cond\n       (hiccup-tag? tag)\n       (hiccup-element v compiler)\n\n       (instance? NativeWrapper tag)\n       (native-element tag v 1 compiler)\n\n       :else (fn-to-element tag v compiler)))))\n\n(defn as-element [this x fn-to-element]\n  (cond (util/js-val? x) x\n        (vector? x) (vec-to-elem x this fn-to-element)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x this)\n                   (expand-seq x this))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(defn create-compiler [opts]\n  (let [id (gensym)\n        fn-to-element (if (:function-components opts)\n                        maybe-function-element\n                        reag-element)\n        parse-fn (get opts :parse-tag cached-parse)]\n\n    (reify p/Compiler\n      ;; This is used to as cache key to cache component fns per compiler\n      (get-id [this] id)\n      (parse-tag [this tag-name tag-value]\n        (parse-fn this tag-name tag-value))\n      (as-element [this x]\n        (as-element this x fn-to-element))\n      (make-element [this argv component jsprops first-child]\n        (make-element this argv component jsprops first-child)))))\n\n(def default-compiler* (create-compiler {}))\n(def ^:dynamic default-compiler default-compiler*)\n\n(defn set-default-compiler! [compiler]\n  (set! default-compiler compiler))\n"]}