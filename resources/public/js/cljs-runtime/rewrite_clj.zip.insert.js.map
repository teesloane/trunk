{"version":3,"sources":["rewrite_clj/zip/insert.cljs"],"mappings":";AAMA,AAAeA,+BACb,+GAAA,yCAAA,vJAACC,wDAAAA,6DAAAA;AAEH;;;;gCAAA,hCAAOC,wEAGJC,QAAQC,UAAUC,OAAOC,KAAKC;AAHjC,AAIE,IAAMC,YAAU,CAACC,wDAAAA,8DAAAA,RAAYF,0CAAAA;IACvBG,YAAU,CAACP,wCAAAA,8CAAAA,RAAQG,0BAAAA;AADzB,qEAEO,kBAAI,iBAAAK,mBAAI,AAACC,cAAIF,zIAGb,OAACK,+CAAOX,UAAUE;AAHd,AAAA,GAAAK;AAAAA;;AAAoB,OAACE,6CAAeH;;MACtC,+CAAA,/CAACI,kIAAQN,kBAAWH,QACpB,+CAAA,/CAACS,kIAAQd,6BAAMQ,kBAAWH;;AAGrC;;;sCAAA,tCAAMW,oFAEHV,KAAKC;AAFR,AAGE,gFAAA,zEAACL,8BACCe,kBACAC,4GACClB,qCACDM,KAAKC;;AAET;;;qCAAA,rCAAMY,kFAEHb,KAAKC;AAFR,AAGE,8EAAA,vEAACL,8BACCkB,iBACAC,2GACCrB,qCACDM,KAAKC;;AAET;;;sCAAA,tCAAMe,oFAEHhB,KAAKC;AAFR,AAGE,+EAAA,xEAACL,8BACCqB,iBACAC,0DAEAlB,KAAKC;;AAET;;;sCAAA,tCAAMkB,oFAEHnB,KAAKC;AAFR,AAGE,qCAAA,WAAAmB,zCAACxB;AAAD,AACG,IAAAyB,WAAAD;IAAAC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAUJ;AAAV,AAAA,GAAA,CAAAI,gBAAA;AAAA;;AAAA,6BAAAA,tBAAiBC;;4BADpB,zBAEEC,0DAEAvB,KAAKC","names":["rewrite-clj.zip.insert/space","rewrite-clj.node/spaces","rewrite-clj.zip.insert/insert","move-fn","insert-fn","prefix","zloc","item","item-node","rewrite-clj.node/coerce","next-node","or__4212__auto__","cljs.core/not","rewrite-clj.zip.whitespace/whitespace?","cljs.core.concat","cljs.core.reduce","rewrite-clj.zip.insert/insert-right","clojure.zip/right","clojure.zip/insert-right","rewrite-clj.zip.insert/insert-left","clojure.zip/left","clojure.zip/insert-left","rewrite-clj.zip.insert/insert-child","clojure.zip/down","clojure.zip/insert-child","rewrite-clj.zip.insert/append-child","p1__29950#","G__29953","clojure.zip/rightmost","clojure.zip/append-child"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.insert\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.whitespace :as ws]\n            [rewrite-clj.node :as node]\n            [clojure.zip :as z]))\n\n(def ^:private space\n  (node/spaces 1))\n\n(defn- insert\n  \"Generic insertion helper. If the node reached by `move-fn`\n   is a whitespace, insert an additional space.\"\n  [move-fn insert-fn prefix zloc item]\n  (let [item-node (node/coerce item)\n        next-node (move-fn zloc)]\n    (->> (if (or (not next-node) (ws/whitespace? next-node))\n           (concat [item-node] prefix)\n           (concat [space item-node] prefix))\n         (reduce insert-fn zloc))))\n\n(defn insert-right\n  \"Insert item to the right of the current location. Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    z/right\n    z/insert-right\n    [space]\n    zloc item))\n\n(defn insert-left\n  \"Insert item to the right of the left location. Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    z/left\n    z/insert-left\n    [space]\n    zloc item))\n\n(defn insert-child\n  \"Insert item as first child of the current node. Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    z/down\n    z/insert-child\n    []\n    zloc item))\n\n(defn append-child\n  \"Insert item as last child of the current node. Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    #(some-> % z/down z/rightmost)\n    z/append-child\n    []\n    zloc item))\n"]}