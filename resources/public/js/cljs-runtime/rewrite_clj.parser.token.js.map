{"version":3,"sources":["rewrite_clj/parser/token.cljs"],"mappings":";AAMA,kCAAA,lCAAOA,4EAAQC,EAAEC;AAAjB,AACE,qCAAID,9BAAwB,AAAA,KAAAE,oCAASD;;AAEvC,kDAAA,lDAAgBE,4GAAkBC;AAAlC,AAAA;;AAGA,iDAAA,jDAAgBC,0GAAiBD;AAAjC,AACE,SAAI,OAAA,NAAYA,gBACZ,OAAA,NAAYA;;AAIlB,4CAAA,5CAAOE,gGACQC,OAAOC;AADtB,AAEE,4CAAA,WAAAC,hDAACC,8BACAH;AADD,AAEE,SAAK,AAACI,cAAI,6FAAAF,6CAAAA,zIAACD,+CAAAA,iEAAAA,kDACN,iDAAAC,jDAACG;;;AAKV,iDAAA,jDAAOC,0GACQN;AADf,AAEE,IAAMH,IAAE,CAACU,6DAAAA,qEAAAA,VAAYP,iDAAAA;AAArB,AACE,OAACR,gCAAOK,EAAE,uHAAA,rHAAI,GAAK,OAAA,NAAYA,eACnB,AAACE,0CAAiBC,OAAOJ;;AAKzC;;;;uCAAA,vCAAOY,sFAGQR,OAAOS,MAAMC;AAH5B,AAIE,IAAMC,SAAO,AAACZ,0CACCC,OACAF;AAFf,AAGE,GAAI,AAACc,uBAAOD;AACV,QAACE,4DAAAA,gFAAAA,tBAAgBJ,4DAAAA,tDAAMC,4DAAAA;;AACvB,IAAMI,IAAE,AAACtB,gCAAOkB,aAAaC;AAA7B,AACE,IAAAI,WACE,CAACE,+DAAAA,kEAAAA,LAAcH,8CAAAA;IADjBE,WAEEF;AAFF,AAAA,8HAAAC,SAAAC,kDAAAD,SAAAC,1LAACH,4DAAAA,+EAAAA;;;AAOT;;;uCAAA,vCAAMK,sFAESlB;AAFf,AAGE,IAAMmB,aAAW,CAACZ,6DAAAA,qEAAAA,VAAYP,iDAAAA;IACxBc,IAAE,AAACtB,gCAAO2B,WAAW,EAAI,gBAAA,fAAYA,sBACpB,AAACb,+CAAsBN,QACvB,AAACD,0CAAiBC,OAAOJ;IAC1CwB,IAAE,CAACH,+DAAAA,kEAAAA,LAAcH,8CAAAA;AAJvB,AAKE,GAAI,cAAAO,bAASD;AACX,OAACZ,qCAAYR,OAAOoB,EAAEN;;AACtB,QAACD,4DAAAA,iEAAAA,PAAgBO,6CAAAA,3CAAEN,6CAAAA","names":["rewrite-clj.parser.token/join-2","a","b","goog.string/StringBuffer","rewrite-clj.parser.token/allowed-default?","c","rewrite-clj.parser.token/allowed-suffix?","rewrite-clj.parser.token/read-to-boundary","reader","allowed?","p1__29782#","rewrite-clj.reader/read-until","cljs.core/not","rewrite-clj.reader/whitespace-or-boundary?","rewrite-clj.parser.token/read-to-char-boundary","rewrite-clj.reader/read-char","rewrite-clj.parser.token/symbol-node","value","value-string","suffix","cljs.core/empty?","rewrite-clj.node/token-node","s","G__29783","G__29784","rewrite-clj.reader/read-string","rewrite-clj.parser.token/parse-token","first-char","v","cljs.core/Symbol"],"sourcesContent":["(ns rewrite-clj.parser.token\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as r]\n            [goog.string :as gstring]))\n\n\n(defn- join-2 [a b]\n  (-> a gstring/StringBuffer. (.append b) .toString))\n\n(defn- ^boolean allowed-default? [c]\n  false)\n\n(defn- ^boolean allowed-suffix? [c]\n  (or (identical? c \\')\n      (identical? c \\:)))\n\n\n\n(defn- read-to-boundary\n  [^not-native reader allowed?]\n  (r/read-until\n   reader\n   #(and (not (allowed? %))\n         (r/whitespace-or-boundary? %))))\n\n\n\n\n(defn- read-to-char-boundary\n  [^not-native reader]\n  (let [c (r/read-char reader)]\n    (join-2 c (if (not (identical? c \\\\))\n                (read-to-boundary reader allowed-default?)\n                \"\"))))\n\n\n\n(defn- symbol-node\n  \"Symbols allow for certain boundary characters that have\n   to be handled explicitly.\"\n  [^not-native reader value value-string]\n  (let [suffix (read-to-boundary\n                 reader\n                 allowed-suffix?)]\n    (if (empty? suffix)\n      (node/token-node value value-string)\n      (let [s (join-2 value-string suffix)]\n        (node/token-node\n          (r/read-string s)\n          s)))))\n\n\n\n\n(defn parse-token\n  \"Parse a single token.\"\n  [^not-native reader]\n  (let [first-char (r/read-char reader)\n        s (join-2 first-char (if (identical? first-char \\\\)\n                         (read-to-char-boundary reader)\n                         (read-to-boundary reader allowed-default?)))\n        v (r/read-string s)]\n    (if (symbol? v)\n      (symbol-node reader v s)\n      (node/token-node v s))))\n"]}