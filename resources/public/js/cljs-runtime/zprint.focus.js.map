{"version":3,"sources":["zprint/focus.cljc"],"mappings":";AAQA;;;wBAAA,xBAAMA,wDAEHC;AAFH,AAGE,+DAAA,IAAA,5DAACC,4CAAID;;AAEP;;;;mCAAA,nCAAME,8EAGHC,IAAIC;AAHP,AAKE,IAAOC,QAAMD;;AAAb,AAEE,GAAI,CAAIC,SAAM,AAACC,gBAAMH;AACnB,gBAAA,RAAKE;;AACL,GAAI,GAAK,EAAI,2HAAA,3HAACE,6CAAE,AAACR,sBAAS,AAACE,4CAAIE,IAAIE,gFACtB,2HAAA,3HAACE,6CAAE,AAACR,sBAAS,AAACE,4CAAIE,IAAIE;AACjCA;;AACA,eAAO,SAAA,RAAKA;;;;;;;;AAEpB;;;wBAAA,xBAAMG,wDAEHL,IAAIC;AAFP,AAGE,IAAMK,WAAS,AAACP,iCAAoBC,IAAIC;AAAxC,AACE,GAAM,8HAAA,9HAACG,6CAAE,AAACR,sBAAS,AAACE,4CAAIE,IAAIM;AAA5B,AAA8C,mBAAA,XAAKA;;AAAnD;;;AAEJ;;;;;wBAAA,xBAAMC,wDAIHP,IAAIC;AAJP,AAME,IAAOC,QAAMD;2BAAb,vBACOO;wBADP,pBAEOC;;AAFP,AAIE,GAAI,CAAIP,SAAM,AAACC,gBAAMH;AAArB;;AAEE,IAAMU,aAAW,AAACd,sBAAS,AAACE,4CAAIE,IAAIE;IAC9BS,wBAAgB,oKAAA,wHAAA,1RAAK,EAAI,AAACC,cAAIJ,2BAAgB,wDAAA,xDAACJ,6CAAEM,4EAC5B,2DAAA,3DAACG,gDAAKH,wEACN,2DAAA,3DAACG,gDAAKH,mFACN,2DAAA,3DAACG,gDAAKH;AAJjC,AAUE,oBAAID;AACFP;;AACA,eAAO,kBAAI,iBAAAY,oBAAK,wDAAA,xDAACV,6CAAEM;AAAR,AAAA,GAAAI;AAA0BN;;AAA1BM;;MACF,CAACP,sDAAAA,iEAAAA,bAASP,6CAAAA,zCAAIE,6CAAAA,QACd,SAAA,RAAKA;eACP,iBAAAY,oBAAK,iBAAAC,mBAAI,wDAAA,xDAACX,6CAAEM;AAAP,AAAA,GAAAK;AAAAA;;AAAyBP;;;AAA9B,AAAA,oBAAAM;AACK,kEAAA,3DAACD,gDAAKH;;AADXI;;;eAEAH;;;;;;;;;;AAEjB;;;yBAAA,zBAAMK,0DAEHC,GAAGjB,IAAIC;AAFV,AAIE,IAAOC,QAAMD;IACNiB,QAAMD;;AADb,AAGE,oBAAMf;AAAN,AACE,GAAI,WAAA,VAAOgB;AACT,oBAAMhB;AAAN,AAAY,OAACH,iCAAoBC,IAAIE;;AAArC;;;AACA,eAAO,AAACK,sBAASP,IAAIE;eAAO,SAAA,RAAKgB;;;;;;AAHrC;;;;;AAKJ;;;;wBAAA,xBAAMC,wDAGHC,OAAOpB;AAHV,AAIE,UAAA,NAAOqB;IACAC,MAAIF;;AADX,AAEE,oBAAMC;AAAN,AACE,GAAI,AAACE,uBAAOD;AACVD;;AACA,eAAO,AAACL,uBAAU,AAACQ,gBAAMF,KAAKtB,IAAI,AAACK,sBAASL,IAAIqB;eAAM,AAACI,eAAKH;;;;;;AAHhE;;;;;AAKJ;;;;;;yBAAA,zBAAMI,0DAKH1B,IAAIoB;AALP,AAQE,IAAMO,QAAM,AAACR,sBAASC,OAAOpB;IAEvB2B,YAAM,AAAC5B,iCAAoBC,IAAI2B;IAC/BC,WAAS,AAACrB,sBAASP,IAAI2B;IACvBE,MAAI,kBAAI,iBAAAf,oBAAKc;AAAL,AAAA,oBAAAd;AAAc,iEAAA,1DAACD,gDAAKc;;AAApBb;;MACF,AAAC,2DAAA,3DAACgB,6CAAKC,mBAAOH,UACd,wBAAA,vBAAK,AAACzB,gBAAMH;AANxB,AAAA,0FAQG2B,UAAME","names":["zprint.focus/type-ssv","ssv-element","cljs.core.nth","zprint.focus/skip-whitespace-ssv","ssv","n","index","cljs.core/count","cljs.core._EQ_","zprint.focus/down-ssv","non-ws-n","zprint.focus/next-ssv","skip-to-right?","next-nonws?","index-type","new-next-nonws?","cljs.core/not","cljs.core.not_EQ_","and__4210__auto__","or__4212__auto__","zprint.focus/right-ssv","nr","moves","zprint.focus/path-ssv","nwpath","idx","nwp","cljs.core/empty?","cljs.core/first","cljs.core/next","zprint.focus/range-ssv","start","ssv-next","end","cljs.core.fnil","cljs.core/dec"],"sourcesContent":["(ns ^:no-doc zprint.focus\n  (:require [clojure.string :as s]\n            [zprint.ansi :refer [color-str]]))\n\n;;\n;; # Find focus in a style-vec\n;;\n\n(defn type-ssv\n  \"What is this element in a str-style-vec?\"\n  [ssv-element]\n  (nth ssv-element 2 :whitespace))\n\n(defn skip-whitespace-ssv\n  \"Skip any whitespace in this ssv starting at n. Whitespace is :whitespace\n  and :indent\"\n  [ssv n]\n  #_(println \"skip-whitespace: n:\" n)\n  (loop [index n]\n    #_(println \"skip-whitespace: loop index:\" index)\n    (if (>= index (count ssv))\n      (dec index)\n      (if (not (or (= (type-ssv (nth ssv index)) :whitespace)\n                   (= (type-ssv (nth ssv index)) :indent)))\n        index\n        (recur (inc index))))))\n\n(defn down-ssv\n  \"Given a str-style-vec, move into a collection at element n.\"\n  [ssv n]\n  (let [non-ws-n (skip-whitespace-ssv ssv n)]\n    (when (= (type-ssv (nth ssv non-ws-n)) :left) (inc non-ws-n))))\n\n(defn next-ssv\n  \"Given a str-style-vec, move to the next element beyond this\n  one.  This will skip over entire collections, if there are any.\n  It will also ignore :whitespace elements.\"\n  [ssv n]\n  #_(println \"next-ssv: n:\" n \"count ssv:\" (count ssv))\n  (loop [index n\n         skip-to-right? nil\n         next-nonws? nil]\n    #_(println \"next-ssv: loop index:\" index)\n    (if (>= index (count ssv))\n      nil\n      (let [index-type (type-ssv (nth ssv index))\n            new-next-nonws? (and (or (not skip-to-right?) (= index-type :right))\n                                 (not= index-type :left)\n                                 (not= index-type :whitespace)\n                                 (not= index-type :indent))]\n        #_(println \"next-ssv: index:\" index\n                   \"skip-to-right?\" skip-to-right?\n                   \"next-nonws?\" next-nonws?\n                   \"index-type:\" index-type\n                   \"new-next-nonws?\" new-next-nonws?)\n        (if next-nonws?\n          index\n          (recur (if (and (= index-type :left) skip-to-right?)\n                   (next-ssv ssv index)\n                   (inc index))\n                 (and (or (= index-type :left) skip-to-right?)\n                      (not= index-type :right))\n                 new-next-nonws?))))))\n\n(defn right-ssv\n  \"Given a str-style-vec, move right nr elements.\"\n  [nr ssv n]\n  #_(println \"right-ssv: nr:\" nr \"n:\" n)\n  (loop [index n\n         moves nr]\n    #_(println \"right-ssv: loop index:\" index \"moves:\" moves)\n    (when index\n      (if (zero? moves)\n        (when index (skip-whitespace-ssv ssv index))\n        (recur (next-ssv ssv index) (dec moves))))))\n\n(defn path-ssv\n  \"Given a non-whitespace path from a zipper, find that same\n  collection or element in a str-style-vec.\"\n  [nwpath ssv]\n  (loop [idx 0\n         nwp nwpath]\n    (when idx\n      (if (empty? nwp)\n        idx\n        (recur (right-ssv (first nwp) ssv (down-ssv ssv idx)) (next nwp))))))\n\n(defn range-ssv\n  \"Use a non-whitespace path from a zipper, and find that\n  same collection or element in a str-style-vec, and return\n  a vector of the start and end of that collection or element.\n  Depends on next-ssv returning one past the end of its input.\"\n  [ssv nwpath]\n  #_(def rssv ssv)\n  #_(prn \"range-ssv: nwpath:\" nwpath \"ssv:\\n\" ssv)\n  (let [start (path-ssv nwpath ssv)\n        #_(println \"range-ssv: start:\" start \"nwpath:\" nwpath)\n        start (skip-whitespace-ssv ssv start)\n        ssv-next (next-ssv ssv start)\n        end (if (and ssv-next (not= start 0))\n              ((fnil dec 1) ssv-next)\n              (dec (count ssv)))]\n    #_(println \"range-ssv:\" [start end])\n    [start end]))"]}