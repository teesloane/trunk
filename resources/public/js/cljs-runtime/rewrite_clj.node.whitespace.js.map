{"version":3,"sources":["rewrite_clj/node/whitespace.cljs"],"mappings":"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","names":["rewrite-clj.node.whitespace/*newline-fn*","cljs.core/identity","rewrite-clj.node.whitespace/*count-fn*","cljs.core/count","this__4461__auto__","k__4462__auto__","this__4463__auto__","k29358","else__4464__auto__","G__29364","cljs.core/Keyword","whitespace","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__29365","vec__29366","k__4485__auto__","cljs.core.nth","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__29357","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this29359","other29360","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__29502","this__4469__auto__","k__4470__auto__","pred__29503","cljs.core/keyword-identical?","expr__29504","cljs.core.assoc","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.whitespace/WhitespaceNode","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__29361","extmap__4501__auto__","G__29528","cljs.core/record?","rewrite-clj.node.whitespace/->WhitespaceNode","rewrite-clj.node.whitespace/map->WhitespaceNode","_","js/Error","this","k29530","G__29534","newlines","p__29545","vec__29547","G__29529","this29531","other29532","G__29598","pred__29603","expr__29604","rewrite-clj.node.whitespace/NewlineNode","G__29533","G__29613","rewrite-clj.node.whitespace/->NewlineNode","rewrite-clj.node.whitespace/map->NewlineNode","rewrite-clj.node.whitespace/whitespace-node","s","rewrite-clj.node.whitespace/newline-node","rewrite-clj.node.whitespace/newline?","c","rewrite-clj.node.whitespace/whitespace-nodes","cljs.core.partition_by","cljs.core.map","char-seq","cljs.core.apply","cljs.core/str","cljs.core/first","rewrite-clj.node.whitespace/spaces","n","cljs.core.repeat","rewrite-clj.node.whitespace/newlines","comma","rewrite-clj.node.whitespace/comma-separated","nodes","cljs.core/butlast","cljs.core.interleave","nl","rewrite-clj.node.whitespace/line-separated","space","rewrite-clj.node.whitespace/space-separated","rewrite-clj.node.whitespace/whitespace?","node","rewrite-clj.node.protocols/tag","rewrite-clj.node.whitespace/linebreak?"],"sourcesContent":["(ns rewrite-clj.node.whitespace\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Newline Modifiers\n\n(def ^:dynamic *newline-fn*\n  \"This function is applied to every newline string.\"\n  identity)\n\n(def ^:dynamic *count-fn*\n  \"This function is applied to every newline string and should produce\n   the eventual character count.\"\n  count)\n\n\n;; TODO\n;; (defmacro with-newline-fn\n;;   [f & body]\n;;   `(binding [*newline-fn* (comp *newline-fn* ~f)]\n;;      ~@body))\n\n;; (defmacro with-count-fn\n;;   [f & body]\n;;   `(binding [*count-fn* (comp *count-fn* ~f)]\n;;      ~@body))\n\n;; ## Nodes\n\n(defrecord WhitespaceNode [whitespace]\n  node/Node\n  (tag [_] :whitespace)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (count whitespace))\n  (string [_] whitespace)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord NewlineNode [newlines]\n  node/Node\n  (tag [_] :newline)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (*count-fn* newlines))\n  (string [_] (*newline-fn* newlines))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n;; TODO\n;; (node/make-printable! WhitespaceNode)\n;; (node/make-printable! NewlineNode)\n\n;; ## Constructors\n\n(defn whitespace-node\n  \"Create whitespace node.\"\n  [s]\n  (->WhitespaceNode s))\n\n(defn newline-node\n  \"Create newline node.\"\n  [s]\n  (->NewlineNode s))\n\n(defn- newline?\n  \"Check whether a character represents a linebreak.\"\n  [c]\n  (contains? #{\\return \\newline} c))\n\n(defn whitespace-nodes\n  \"Convert a string of whitespace to whitespace/newline nodes.\"\n  [s]\n  (->> (partition-by newline? s)\n       (map\n         (fn [char-seq]\n           (let [s (apply str char-seq)]\n             (if (newline? (first char-seq))\n               (newline-node s)\n               (whitespace-node s)))))))\n\n;; ## Utilities\n\n(defn spaces\n  \"Create node representing the given number of spaces.\"\n  [n]\n  (whitespace-node (apply str (repeat n \\space))))\n\n(defn newlines\n  \"Create node representing the given number of newline characters.\"\n  [n]\n  (newline-node (apply str (repeat n \\newline))))\n\n\n\n(let [comma (whitespace-node \", \")]\n  (defn comma-separated\n    \"Interleave the given seq of nodes with `\\\", \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat comma)))))\n\n(let [nl (newline-node \"\\n\")]\n  (defn line-separated\n    \"Interleave the given seq of nodes with newline nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat nl)))))\n\n(let [space (whitespace-node \" \")]\n  (defn space-separated\n    \"Interleave the given seq of nodes with `\\\" \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat space)))))\n\n;; ## Predicates\n\n(defn whitespace?\n  \"Check whether a node represents whitespace.\"\n  [node]\n  (contains?\n    #{:whitespace\n      :newline}\n    (node/tag node)))\n\n(defn linebreak?\n  \"Check whether a ndoe represents linebreaks.\"\n  [node]\n  (= (node/tag node) :newline))\n"]}