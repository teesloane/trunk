{"version":3,"sources":["sci/impl/records.cljc"],"mappings":"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","names":["var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","sci.impl.records/defrecord","seq31202","G__31203","cljs.core/first","cljs.core/next","G__31204","G__31205","G__31209","G__31210","self__4805__auto__","_","ctx","record-name","fields","protocol-impls","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core.apply","cljs.core/array-map","factory-fn-str","factory-fn-sym","cljs.core.symbol","map-factory-sym","keys","cljs.core.mapv","cljs.core/keyword","sci.impl.utils/split-when","cljs.core/symbol?","cljs.core.mapcat","p__31229","vec__31231","seq__31232","first__31233","protocol-name","impls","p1__31191#","cljs.core/group-by","protocol","fexpr__31248","cljs.core/deref","sci.impl.utils/eval-resolve-state","sci.impl.vars/var?","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","cljs.core.map","p__31250","vec__31252","cljs.core.nth","method-name","bodies","cljs.core/rest","impl","args","this","bindings","field","cljs.core.keyword","sci.impl.records/sci-record?","x","or__4212__auto__","cljs.core/map?","G__31622","cljs.core/meta","cljs.core/record?","G__31654","sci.impl.records/resolve-record-or-protocol-class","js/Error","sym","sym-str","last-dot","clojure.string.last_index_of","class-name","cljs.core.subs","namespace","sci.impl.vars/current-ns-name","sci.impl.records.resolve_record_or_protocol_class","package","class","clojure.string/replace","temp__5753__auto__","sci-var","cljs.core.get_in","sci.impl.records/resolve-record-class","class-sym","cljs.core/Symbol"],"sourcesContent":["(ns sci.impl.records\n  {:no-doc true}\n  (:refer-clojure :exclude [defrecord record?])\n  (:require [clojure.string :as str]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defrecord [_ _ ctx record-name fields & protocol-impls]\n  (let [factory-fn-str (str \"->\" record-name)\n        factory-fn-sym (symbol factory-fn-str)\n        map-factory-sym (symbol (str \"map\" factory-fn-str))\n        keys (mapv keyword fields)\n        protocol-impls (utils/split-when symbol? protocol-impls)\n        protocol-impls\n        (mapcat (fn [[protocol-name & impls]]\n                  (let [impls (group-by first impls)\n                        protocol (@utils/eval-resolve-state ctx protocol-name)\n                        protocol (if (vars/var? protocol) @protocol protocol)\n                        protocol-ns (:ns protocol)\n                        pns (str (vars/getName protocol-ns))\n                        fq-meth-name #(symbol pns %)]\n                    (map (fn [[method-name bodies]]\n                           (let [bodies (map rest bodies)\n                                 bodies (mapv (fn [impl]\n                                                (let [args (first impl)\n                                                      this (first args)\n                                                      bindings (vec (mapcat (fn [field]\n                                                                              [field (list (keyword field) this)])\n                                                                            fields))]\n                                                  `(~args\n                                                    (let ~bindings\n                                                      ~@(next impl))))) bodies)]\n                             `(defmethod ~(fq-meth-name (str method-name)) '~record-name ~@bodies)))\n                         impls)))\n                protocol-impls)]\n    `(do\n       (defn ~factory-fn-sym [& args#]\n         (vary-meta (zipmap ~keys args#)\n                    assoc\n                    :sci.impl/record true\n                    :sci.impl/type '~record-name))\n       (defn ~map-factory-sym [m#]\n         (vary-meta m#\n                    assoc\n                    :sci.impl/record true\n                    :sci.impl/type '~record-name))\n       (defn ~factory-fn-sym [& args#]\n         (vary-meta (zipmap ~keys args#)\n                    assoc\n                    :sci.impl/record true\n                    :sci.impl/type '~record-name))\n       (def ~record-name (with-meta '~record-name\n                           {:sci.impl/record true\n                            :sci.impl.record/constructor ~factory-fn-sym}))\n       ~@protocol-impls)))\n\n(defn sci-record? [x]\n  (or\n   (when (map? x)\n     (some-> x meta :sci.impl/record))\n   (clojure.core/record? x)))\n\n(defn resolve-record-or-protocol-class\n  \"A record class is represented by a symbol with metadata (currently). This is only an implementation detail.\n   A protocol is represented by a map with :ns, :methods and optionally :class. This is also an implementation detail.\"\n  ;; TODO: we should probably use munging here for namespaces with hyphens in them.\n  ([ctx sym]\n   (let [sym-str (str sym)\n         last-dot (str/last-index-of sym-str \".\")\n         class-name (if last-dot\n                      (subs sym-str (inc last-dot) (count sym-str))\n                      sym-str)\n         namespace (if last-dot\n                     (symbol (subs sym-str 0 last-dot))\n                     (vars/current-ns-name))]\n     (resolve-record-or-protocol-class ctx namespace (symbol class-name))))\n  ([ctx package class]\n   (let [namespace (-> package str (str/replace \"_\" \"-\") symbol)]\n     (when-let [sci-var (get-in @(:env ctx) [:namespaces namespace class])]\n       (if (vars/var? sci-var)\n         @sci-var\n         sci-var)))))\n\n(defn resolve-record-class\n  [ctx class-sym]\n  (when-let [x (resolve-record-or-protocol-class ctx class-sym)]\n    (when (symbol? x) x)))\n"]}