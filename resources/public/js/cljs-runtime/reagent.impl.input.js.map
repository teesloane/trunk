{"version":3,"sources":["reagent/impl/input.cljs"],"mappings":"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","names":["reagent.impl.input/these-inputs-have-selection-api","reagent.impl.input/has-selection-api?","input-type","cljs.core/contains?","p__26721","map__26722","cljs.core/--destructure-map","cljs.core.get","reagent.impl.input/input-node-set-value","node","rendered-value","dom-value","component","on-write","js/document","cljs.core/fn?","node-value","cljs.core.not_EQ_","reagent.impl.batching/do-after-render","reagent.impl.input/input-component-set-value","existing-offset-from-end","cljs.core/count","new-cursor-offset","this","reagent.impl.input/input-handle-change","on-change","e","reagent.impl.input/input-render-setup","jsprops","and__4210__auto__","v","value","original-ref-fn","el","p1__26730#","reagent.impl.input/input-unmount","reagent.impl.input/input-component?","x","G__26734","reagent.impl.input/input-spec","argv","first-child","compiler","reagent.impl.component/*current-component*","reagent.impl.protocols/make-element"],"sourcesContent":["(ns reagent.impl.input\n  (:require [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.protocols :as p]))\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value ^clj component {:keys [on-write]}]\n  (if-not (and (identical? node (.-activeElement js/document))\n            (has-selection-api? (.-type node))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      (set! (.-cljsDOMValue component) rendered-value)\n      (set! (.-value node) rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n\n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value (.-value node)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         (.-selectionStart node))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          (set! (.-cljsDOMValue component) rendered-value)\n          (set! (.-value node) rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          (set! (.-selectionStart node) new-cursor-offset)\n          (set! (.-selectionEnd node) new-cursor-offset))))))\n\n(defn input-component-set-value [^clj this]\n  (when (.-cljsInputLive this)\n    (set! (.-cljsInputDirty this) false)\n    (let [rendered-value (.-cljsRenderedValue this)\n          dom-value (.-cljsDOMValue this)\n          ;; Default to the root node within this component\n          node (.-inputEl this)]\n      (when (not= rendered-value dom-value)\n        (input-node-set-value node rendered-value dom-value this {})))))\n\n(defn input-handle-change [^clj this on-change e]\n  (set! (.-cljsDOMValue this) (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not (.-cljsInputDirty this)\n    (set! (.-cljsInputDirty this) true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  [^clj this ^js jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (let [v (.-value jsprops)\n          value (if (nil? v) \"\" v)\n          on-change (.-onChange jsprops)\n          original-ref-fn (.-ref jsprops)]\n      (when-not (.-cljsInputLive this)\n        ;; set initial value\n        (set! (.-cljsInputLive this) true)\n        (set! (.-cljsDOMValue this) value))\n      (when-not (.-reagentRefFn this)\n        (set! (.-reagentRefFn this)\n              (cond\n                ;; ref fn\n                (fn? original-ref-fn)\n                (fn [el]\n                  (set! (.-inputEl this) el)\n                  (original-ref-fn el))\n\n                ;; react/createRef object\n                (and original-ref-fn (.hasOwnProperty original-ref-fn \"current\"))\n                (fn [el]\n                  (set! (.-inputEl this) el)\n                  (set! (.-current original-ref-fn) el))\n\n                :else\n                (fn [el]\n                  (set! (.-inputEl this) el)))))\n      (set! (.-cljsRenderedValue this) value)\n      (js-delete jsprops \"value\")\n      (set! (.-defaultValue jsprops) value)\n      (set! (.-onChange jsprops) #(input-handle-change this on-change %))\n      (set! (.-ref jsprops) (.-reagentRefFn this)))))\n\n(defn input-unmount [^clj this]\n  (set! (.-cljsInputLive this) nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv component jsprops first-child compiler]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (p/make-element compiler argv component jsprops first-child)))})\n"]}