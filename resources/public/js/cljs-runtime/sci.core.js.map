{"version":3,"sources":["sci/core.cljc"],"mappings":"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","names":["var_args","G__42091","sci.core/new-var","js/Error","name","G__42096","sci.core.new_var","sci.impl.vars/unbind","init-val","cljs.core/meta","meta","sci.impl.vars/SciVar","G__42104","sci.core/new-dynamic-var","G__42106","sci.core.new_dynamic_var","cljs.core.assoc","sci.core/set!","dynamic-var","v","sci.impl.types/setVal","G__42117","sci.core/new-macro-var","sci.core.new_macro_var","cljs.core.vary_meta","cljs.core/assoc","sci.core/in","sci.impl.io/in","sci.core/out","sci.impl.io/out","sci.core/err","sci.impl.io/err","sci.core/ns","sci.impl.vars/current-ns","sci.core/file","sci.impl.vars/current-file","sci.core/print-length","sci.impl.io/print-length","sci.core/print-level","sci.impl.io/print-level","sci.core/print-meta","sci.impl.io/print-meta","sci.core/*1","sci.impl.namespaces/*1","sci.core/*2","sci.impl.namespaces/*2","sci.core/*3","sci.impl.namespaces/*3","sci.core/*e","sci.impl.namespaces/*e","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","sci.core/alter-var-root","seq42147","G__42148","cljs.core/first","cljs.core/next","G__42149","self__4805__auto__","f","args","cljs.core.apply","sci.impl.vars/alter-var-root","G__42161","sci.core/eval-string","s","sci.core.eval_string","opts","sci.impl.interpreter.eval_string","sci.core/init","sci.impl.opts/init","sci.core/fork","ctx","cljs.core.update","env","cljs.core/deref","cljs.core.atom","sci.core/eval-string*","sci.impl.interpreter/eval-string*","G__42174","sci.core/create-ns","sym","sci.core.create_ns","sci.impl.vars/->SciNamespace","sci.core/parse-string","sci.impl.parser/parse-string","sci.core/reader","x","sci.impl.parser/reader","sci.core/get-line-number","reader","sci.impl.parser/get-line-number","sci.core/get-column-number","sci.impl.parser/get-column-number","G__42202","sci.core/parse-next","sci.core.parse_next","sci.impl.parser.parse_next","sci.impl.utils/kw-identical?","sci.impl.parser/eof","or__4212__auto__","cljs.core.get","sci.core/eval-form","form","cljs.core.gensym","sci.impl.interpreter/eval-form"],"sourcesContent":["(ns sci.core\n  (:refer-clojure :exclude [with-bindings with-in-str with-out-str\n                            with-redefs binding future pmap alter-var-root\n                            ns create-ns set! *1 *2 *3 *e])\n  (:require\n   [sci.impl.interpreter :as i]\n   [sci.impl.io :as sio]\n   [sci.impl.macros :as macros]\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.opts :as opts]\n   [sci.impl.parser :as parser]\n   [sci.impl.types :as t]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars])\n  #?(:cljs (:require-macros\n            [sci.core :refer [with-bindings with-out-str copy-var]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn new-var\n  \"Returns a new sci var.\"\n  ([name] (doto (new-var name nil nil)\n            (vars/unbind)))\n  ([name init-val] (new-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar. init-val name meta false)))\n\n(defn new-dynamic-var\n  \"Same as new-var but adds :dynamic true to meta.\"\n  ([name] (doto (new-dynamic-var name nil nil)\n            (vars/unbind)))\n  ([name init-val] (new-dynamic-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar. init-val name (assoc meta :dynamic true) false)))\n\n(defn set!\n  \"Establish thread local binding of dynamic var\"\n  [dynamic-var v]\n  (t/setVal dynamic-var v))\n\n(defn new-macro-var\n  \"Same as new-var but adds :macro true to meta as well\n  as :sci/macro true to meta of the fn itself.\"\n  ([name init-val] (new-macro-var name init-val (meta name)))\n  ([name init-val meta] (sci.impl.vars.SciVar.\n                         (vary-meta init-val\n                                    assoc :sci/macro true)\n                         name (assoc meta :macro true) false)))\n\n(defmacro copy-var\n  \"Copies contents from var `sym` to a new sci var. The value `ns` is an\n  object created with `sci.core/create-ns`.\"\n  ([sym ns]\n   `(let [ns# ~ns\n          var# (var ~sym)\n          val# (deref var#)\n          m# (-> var# meta)\n          ns-name# (vars/getName ns#)\n          name# (:name m#)\n          name-sym# (symbol (str ns-name#) (str name#))\n          new-m# {:doc (:doc m#)\n                  :name name#\n                  :arglists (:arglists m#)\n                  :ns ns#}]\n      (cond (:dynamic m#)\n            (new-dynamic-var name# val# new-m#)\n            (:macro m#)\n            (new-macro-var name# val# new-m#)\n            :else (new-var name# val# new-m#)))))\n\n(macros/deftime\n  (defmacro with-bindings\n    \"Macro for binding sci vars. Must be called with map of sci dynamic\n  vars to values. Used in babashka.\"\n    [bindings-map & body]\n    `(let [bm# ~bindings-map]\n       (assert (map? bm#))\n       (vars/push-thread-bindings bm#) ;; important: outside try\n       (try\n         (do ~@body)\n         (finally (vars/pop-thread-bindings)))))\n\n  (defmacro binding\n    \"Macro for binding sci vars. Must be called with a vector of sci\n  dynamic vars to values.\"\n    [bindings & body]\n    (assert (vector? bindings))\n    (assert (even? (count bindings)))\n    `(with-bindings ~(apply hash-map bindings)\n       (do ~@body))))\n\n(def in \"Sci var that represents sci's `clojure.core/*in*`\" sio/in)\n(def out \"Sci var that represents sci's `clojure.core/*out*`\" sio/out)\n(def err \"Sci var that represents sci's `clojure.core/*err*`\" sio/err)\n(def ns \"Sci var that represents sci's `clojure.core/*ns*`\" vars/current-ns)\n(def file \"Sci var that represents sci's `clojure.core/*file*`\" vars/current-file)\n(def print-length \"Sci var that represents sci's `clojure.core/*print-length*`\" sio/print-length)\n(def print-level \"Sci var that represents sci's `clojure.core/*print-level*`\" sio/print-level)\n(def print-meta \"Sci var that represents sci's `clojure.core/*print-meta*`\" sio/print-meta)\n(def *1 namespaces/*1)\n(def *2 namespaces/*2)\n(def *3 namespaces/*3)\n(def *e namespaces/*e)\n\n;; REPL variables\n\n\n(macros/deftime\n  (defmacro with-in-str\n    \"Evaluates body in a context in which sci's *in* is bound to a fresh\n  StringReader initialized with the string s.\"\n    [s & body]\n    `(let [in# (-> (java.io.StringReader. ~s)\n                   (clojure.lang.LineNumberingPushbackReader.))]\n       (with-bindings {in in#}\n         (do ~@body)))))\n\n(macros/deftime\n  (defmacro with-out-str\n    \"Evaluates exprs in a context in which sci's *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.\"\n    [& body]\n    `(let [out# (macros/? :clj (java.io.StringWriter.)\n                          :cljs (goog.string/StringBuffer.))]\n       (with-bindings {out out#}\n         (do ~@body)\n         (str out#)))))\n\n(macros/deftime\n  (defmacro future\n    \"Like clojure.core/future but also conveys sci bindings to the thread.\"\n    [& body]\n    `(let [f# (-> (fn [] ~@body)\n                  (vars/binding-conveyor-fn))]\n       (future-call f#))))\n\n#?(:clj (defn pmap\n          \"Like clojure.core/pmap but also conveys sci bindings to the threads.\"\n          ([f coll]\n           (let [n (+ 2 (.. Runtime getRuntime availableProcessors))\n                 rets (map #(future (f %)) coll)\n                 step (fn step [[x & xs :as vs] fs]\n                        (lazy-seq\n                         (if-let [s (seq fs)]\n                           (cons (deref x) (step xs (rest s)))\n                           (map deref vs))))]\n             (step rets (drop n rets))))\n          ([f coll & colls]\n           (let [step (fn step [cs]\n                        (lazy-seq\n                         (let [ss (map seq cs)]\n                           (when (every? identity ss)\n                             (cons (map first ss) (step (map rest ss)))))))]\n             (pmap #(apply f %) (step (cons coll colls)))))))\n\n(defn alter-var-root\n  \"Atomically alters the root binding of sci var v by applying f to its\n  current value plus any args.\"\n  [v f & args]\n  (apply vars/alter-var-root v f args))\n\n(defn eval-string\n  \"Evaluates string `s` as one or multiple Clojure expressions using the Small Clojure Interpreter.\n\n  The map `opts` may contain the following:\n\n  - `:namespaces`: a map of symbols to namespaces, where a namespace\n  is a map with symbols to values, e.g.: `{'foo.bar {'x 1}}`. These\n  namespaces can be used with `require`.\n\n  - `:bindings`: `:bindings x` is the same as `:namespaces {'user x}`.\n\n  - `:allow`: a seqable of allowed symbols. All symbols, even those\n  brought in via `:bindings` or `:namespaces` have to be explicitly\n  enumerated.\n\n  - `:deny`: a seqable of disallowed symbols, e.g.: `[loop quote\n  recur]`.\n\n  - `:features`: when provided a non-empty set of keywords, sci will process reader conditionals using these features (e.g. #{:bb}).\n\n  - `:env`: an atom with a map in which state from the\n  evaluation (defined namespaced and vars) will be persisted for\n  re-use over multiple calls.\n\n  - `:disable-arity-checks`: disables arity checks for single-arity\n  functions.\"\n  ([s] (eval-string s nil))\n  ([s opts]\n   (i/eval-string s opts)))\n\n(defn init\n  \"Creates an initial sci context from given options `opts`. The context\n  can be used with `eval-string*`. See `eval-string` for available\n  options. The internal organization of the context is implementation\n  detail and may change in the future.\"\n  [opts]\n  (opts/init opts))\n\n(defn fork\n  \"Forks a context (as produced with `init`) into a new context. Any new\n  vars created in the new context won't be visible in the original\n  context.\"\n  [ctx]\n  (update ctx :env (fn [env] (atom @env))))\n\n(defn eval-string*\n  \"Evaluates string `s` in the context of `ctx` (as produced with\n  `init`).\"\n  [ctx s]\n  (sci.impl.interpreter/eval-string* ctx s))\n\n(defn create-ns\n  \"Creates namespace object. Can be used in var metadata.\"\n  ([sym] (create-ns sym nil))\n  ([sym meta]\n   (vars/->SciNamespace sym meta)))\n\n(defn parse-string\n  \"Parses string `s` in the context of `ctx` (as produced with\n  `init`).\"\n  ([ctx s]\n   (parser/parse-string ctx s)))\n\n(defn reader\n  \"Coerces x into indexing pushback-reader to be used with\n  parse-next. Accepts: string or java.io.Reader.\"\n  [x]\n  (parser/reader x))\n\n(defn get-line-number [reader]\n  (parser/get-line-number reader))\n\n(defn get-column-number [reader]\n  (parser/get-column-number reader))\n\n(defn parse-next\n  \"Parses next form from reader\"\n  ([ctx reader] (parse-next ctx reader {}))\n  ([ctx reader opts]\n   (let [v (parser/parse-next ctx reader opts)]\n     (if (utils/kw-identical? parser/eof v)\n       (or (get opts :eof)\n           ::eof)\n       v))))\n\n(defn eval-form\n  \"Evaluates form (as produced by `parse-string` or `parse-next`) in the\n  context of `ctx` (as produced with `init`). To allow namespace\n  switches, establish root binding of `sci/ns` with `sci/binding` or\n  `sci/with-bindings.`\"\n  [ctx form]\n  (let [ctx (assoc ctx :id (or (:id ctx) (gensym)))]\n    (i/eval-form ctx form)))\n\n;;;; Scratch\n\n(comment\n  (eval-string \"(inc x)\" {:bindings {'x 2}})\n  )\n"]}