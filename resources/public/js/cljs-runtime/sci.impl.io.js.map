{"version":3,"sources":["sci/impl/io.cljc"],"mappings":"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","names":["sci.impl.io/in","*unrestricted*-orig-val__32032","*unrestricted*-temp-val__32033","sci.impl.unrestrict/*unrestricted*","G__32035","sci.impl.vars.dynamic_var","sci.impl.vars/unbind","sci.impl.io/out","*unrestricted*-orig-val__32046","*unrestricted*-temp-val__32047","G__32048","sci.impl.io/err","*unrestricted*-orig-val__32050","*unrestricted*-temp-val__32052","G__32053","sci.impl.io/print-meta","sci.impl.io/print-length","sci.impl.io/print-level","sci.impl.io/print-namespace-maps","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","sci.impl.io/pr","seq32120","self__4806__auto__","cljs.core/seq","objs","*print-length*-orig-val__32137","*print-level*-orig-val__32138","*print-meta*-orig-val__32139","*print-namespace-maps*-orig-val__32140","*print-length*-temp-val__32141","cljs.core/deref","*print-level*-temp-val__32142","*print-meta*-temp-val__32143","*print-namespace-maps*-temp-val__32144","cljs.core/*print-length*","cljs.core/*print-level*","cljs.core/*print-meta*","cljs.core/*print-namespace-maps*","cljs.core.apply","cljs.core/pr-str","sci.impl.io/flush","sci.impl.io/newline","sci.impl.io/println","sci.impl.io/pr-str","seq32161","*print-length*-orig-val__32165","*print-level*-orig-val__32166","*print-meta*-orig-val__32167","*print-namespace-maps*-orig-val__32168","*print-length*-temp-val__32169","*print-level*-temp-val__32170","*print-meta*-temp-val__32171","*print-namespace-maps*-temp-val__32172","sci.impl.io/prn","seq32191","*print-length*-orig-val__32192","*print-level*-orig-val__32194","*print-meta*-orig-val__32195","*print-namespace-maps*-orig-val__32196","*print-length*-temp-val__32197","*print-level*-temp-val__32198","*print-meta*-temp-val__32199","*print-namespace-maps*-temp-val__32200","cljs.core/prn-str","sci.impl.io/prn-str","seq32228","*print-length*-orig-val__32229","*print-level*-orig-val__32230","*print-meta*-orig-val__32231","*print-namespace-maps*-orig-val__32232","*print-length*-temp-val__32233","*print-level*-temp-val__32234","*print-meta*-temp-val__32235","*print-namespace-maps*-temp-val__32236","sci.impl.io/print","seq32258","*print-length*-orig-val__32264","*print-level*-orig-val__32265","*print-namespace-maps*-orig-val__32266","*print-length*-temp-val__32267","*print-level*-temp-val__32268","*print-namespace-maps*-temp-val__32269","cljs.core/print-str","sci.impl.io/print-str","seq32293","*print-length*-orig-val__32297","*print-level*-orig-val__32298","*print-meta*-orig-val__32299","*print-namespace-maps*-orig-val__32300","*print-length*-temp-val__32301","*print-level*-temp-val__32302","*print-meta*-temp-val__32303","*print-namespace-maps*-temp-val__32304","seq32309","*print-length*-orig-val__32310","*print-level*-orig-val__32311","*print-meta*-orig-val__32312","*print-namespace-maps*-orig-val__32313","*print-length*-temp-val__32314","*print-level*-temp-val__32315","*print-meta*-temp-val__32316","*print-namespace-maps*-temp-val__32317","cljs.core/println-str","sci.impl.io/with-out-str","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","seq32319","G__32320","cljs.core/first","cljs.core/next","G__32321","self__4805__auto__","_","body"],"sourcesContent":["(ns sci.impl.io\n  {:no-doc true}\n  (:refer-clojure :exclude [pr prn pr-str prn-str print print-str println\n                            newline flush with-out-str with-in-str read-line\n                            printf #?@(:cljs [string-print])])\n  (:require #?(:cljs [goog.string])\n            [sci.impl.unrestrict :refer [*unrestricted*]]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def in (binding [*unrestricted* true]\n          (doto (vars/dynamic-var '*in*)\n                                        (vars/unbind))))\n\n(def out (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*out*)\n             (vars/unbind))))\n\n(def err (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*err*)\n             (vars/unbind))))\n\n(def print-meta\n  (vars/dynamic-var '*print-meta* false))\n\n(def print-length (vars/dynamic-var '*print-length* nil))\n\n(def print-level (vars/dynamic-var '*print-level* nil))\n\n(def print-namespace-maps (vars/dynamic-var '*print-namespace-maps* true))\n\n#?(:clj (defn pr-on\n          {:private true\n           :static true}\n          [x w]\n          (if *print-dup*\n            (print-dup x w)\n            (print-method x w))\n          nil))\n\n#?(:clj (defn pr\n          ([] nil)\n          ([x]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps]\n             (pr-on x @out)))\n          ([x & more]\n           (pr x)\n           (. ^java.io.Writer @out (append \\space))\n           (if-let [nmore (next more)]\n             (recur (first more) nmore)\n             (apply pr more))))\n   :cljs (defn pr\n           [& objs]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps]\n             (.append @out (apply cljs.core/pr-str objs))\n             nil)))\n\n#?(:clj\n   (defn flush\n     []\n     (. ^java.io.Writer @out (flush))\n     nil)\n   :cljs (defn flush [] ;stub\n           nil))\n\n#?(:cljs (declare println))\n\n#?(:clj (defn newline\n          []\n          (. ^java.io.Writer @out (append ^String @#'clojure.core/system-newline))\n          nil)\n   :cljs (defn newline\n           []\n           (println)))\n\n#?(:clj\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply pr xs))\n       (str sw)))\n   :cljs\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (apply cljs.core/pr-str objs))))\n\n#?(:clj\n   (defn prn\n     [& more]\n     (apply pr more)\n     (newline)\n     (when *flush-on-newline*\n       (flush)))\n   :cljs\n   (defn prn\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (.append @out (apply cljs.core/prn-str objs))\n       nil)))\n\n#?(:clj\n   (defn prn-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply prn xs))\n       (str sw)))\n   :cljs\n   (defn prn-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (apply cljs.core/prn-str objs))))\n\n#?(:clj\n   (defn print\n     [& more]\n     (binding [*print-readably* nil]\n       (apply pr more)))\n   :cljs\n   (defn print\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-namespace-maps* @print-namespace-maps]\n       (.append @out (apply cljs.core/print-str objs))\n       nil)))\n\n#?(:clj\n   (defn print-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply print xs))\n       (str sw)))\n   :cljs\n   (defn print-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (apply cljs.core/print-str objs))))\n\n#?(:clj\n   (defn println\n     [& more]\n     (binding [*print-readably* nil]\n       (apply prn more)))\n   :cljs\n   (defn println\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (.append @out (apply println-str objs))\n       nil)))\n\n#?(:clj\n   (defn printf\n     [fmt & args]\n     (print (apply format fmt args))))\n\n(defn with-out-str\n  [_ _ & body]\n  `(let [s# (new #?(:clj java.io.StringWriter\n                    :cljs goog.string.StringBuffer))]\n     (binding [*out* s#]\n       ~@body\n       (str s#))))\n\n#?(:clj\n   (defn with-in-str\n     [_ _ s & body]\n     `(with-open [s# (-> (java.io.StringReader. ~s) clojure.lang.LineNumberingPushbackReader.)]\n        (binding [*in* s#]\n          ~@body))))\n\n#?(:clj\n   (defn read-line\n     []\n     (if (instance? clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^java.io.BufferedReader @in))))\n"]}