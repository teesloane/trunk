{"version":3,"sources":["sci/impl/interpreter.cljc"],"mappings":"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","names":["sci.impl.interpreter/stats","cljs.core.atom","sci.impl.interpreter/update-stats","_ctx","k","t","cljs.core.swap_BANG_","stats","cljs.core.update","cljs.core/+","sci.impl.interpreter/print-stats","cljs.core.prn","cljs.core/zipmap","cljs.core/deref","cljs.core/keys","p1__41264#","cljs.core.map","cljs.core/vals","sci.impl.interpreter/eval-form-stats","ctx","form","cljs.core/seq?","cljs.core._EQ_","cljs.core/first","exprs","cljs.core/rest","ret","cljs.core/seq","G__41267","G__41268","cljs.core/not","analyzed","sci.impl.analyzer.analyze","sci.impl.types/EvalForm","G__41269","G__41270","sci.impl.evaluator/eval","sci.impl.interpreter/eval-form","G__41283","G__41284","G__41289","G__41290","cljs.core/vreset!","sci.impl.utils/eval-form-state","sci.impl.interpreter/eval-string-stats","s","cljs.core.assoc","or__4212__auto__","cljs.core.gensym","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.vars/current-ns","reader","cljs.tools.reader.reader_types.indexing_push_back_reader","cljs.tools.reader.reader_types.string_push_back_reader","expr","sci.impl.parser.parse_next","sci.impl.utils/kw-identical?","sci.impl.parser/eof","sci.impl.interpreter/eval-string*","sci.impl.utils/eval-string*","var_args","G__41310","sci.impl.interpreter/eval-string","js/Error","sci.impl.interpreter.eval_string","opts","init-ctx","sci.impl.opts/init"],"sourcesContent":["(ns sci.impl.interpreter\n  {:no-doc true}\n  (:refer-clojure :exclude [destructure macroexpand macroexpand-1])\n  (:require\n   [clojure.tools.reader.reader-types :as r]\n   [sci.impl.analyzer :as ana]\n   [sci.impl.evaluator :as eval]\n   [sci.impl.opts :as opts]\n   [sci.impl.parser :as p]\n   [sci.impl.types :as t]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def stats (atom {:parse 0 :analysis 0 :eval 0 :total 0}))\n(defn update-stats [_ctx k t]\n  (swap! stats (fn [stats]\n                 (-> stats\n                     (update k + t)\n                     (update :total + t)))))\n\n(defn print-stats []\n  (prn (zipmap (keys @stats)\n               (map #(/ (double %) 1000000.0) (vals @stats)))))\n\n(defn eval-form-stats [ctx form]\n  (if (seq? form)\n    (if (= 'do (first form))\n      (loop [exprs (rest form)\n             ret nil]\n        (if (seq exprs)\n          (recur\n           (rest exprs)\n           (eval-form-stats ctx (first exprs)))\n          ret))\n      (when (or (not (:uberscript ctx))\n                (= 'ns (first form))\n                (= 'require (first form)))\n        (let [#?@(:clj [a0 (System/nanoTime)])\n              analyzed (ana/analyze ctx form true)\n              #?@(:clj [a1 (System/nanoTime)\n                        _ (update-stats ctx :analysis (- a1 a0))])\n              ret (if (instance? sci.impl.types.EvalForm analyzed)\n                    (eval-form-stats ctx (t/getVal analyzed))\n                    (let [#?@(:clj [e0 (System/nanoTime)])\n                          ret (eval/eval ctx analyzed)\n                          #?@(:clj [e1 (System/nanoTime)\n                                    _ (update-stats ctx :eval (- e1 e0))])]\n                      ret))]\n          ret)))\n    (let [#?@(:clj [t0 (System/nanoTime)])\n          analyzed (ana/analyze ctx form)\n          #?@(:clj [t1 (System/nanoTime)\n                    _ (update-stats ctx :analysis (- t1 t0))])\n          #?@(:clj [t0 (System/nanoTime)])\n          ret (eval/eval ctx analyzed)\n          #?@(:clj [t1 (System/nanoTime)\n                    _ (update-stats ctx :eval (- t1 t0))])]\n      ret)))\n\n(defn eval-form [ctx form]\n  (if (seq? form)\n    (if (= 'do (first form))\n      (loop [exprs (rest form)\n             ret nil]\n        (if (seq exprs)\n          (recur\n           (rest exprs)\n           (eval-form ctx (first exprs)))\n          ret))\n      (when (or (not (:uberscript ctx))\n                (= 'ns (first form))\n                (= 'require (first form)))\n        (let [analyzed (ana/analyze ctx form true)\n              ret (if (instance? sci.impl.types.EvalForm analyzed)\n                    (eval-form ctx (t/getVal analyzed))\n                    (eval/eval ctx analyzed))]\n          ret)))\n    (let [analyzed (ana/analyze ctx form)\n          ret (eval/eval ctx analyzed)]\n      ret)))\n\n#?(:clj\n   (when (System/getenv \"SCI_STATS\")\n     (alter-var-root #'eval-form (constantly eval-form-stats))))\n\n(vreset! utils/eval-form-state eval-form)\n\n;; with stats\n(defn eval-string-stats [ctx s]\n  (let [ctx (assoc ctx :id (or (:id ctx) (gensym)))]\n    (vars/with-bindings {vars/current-ns @vars/current-ns}\n      (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n        (loop [ret nil]\n          (let [#?@(:clj [t0 (System/nanoTime)])\n                expr (p/parse-next ctx reader)\n                #?@(:clj [t1 (System/nanoTime)\n                          _ (update-stats ctx :parse (- t1 t0))])]\n            (if (utils/kw-identical? p/eof expr)\n              (do\n                (print-stats)\n                ret)\n              (let [ret (eval-form ctx expr)]\n                (recur ret)))))))))\n\n(defn eval-string* [ctx s]\n  (let [ctx (assoc ctx :id (or (:id ctx) (gensym)))]\n    (vars/with-bindings {vars/current-ns @vars/current-ns}\n      (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n        (loop [ret nil]\n          (let [expr (p/parse-next ctx reader)]\n            (if (utils/kw-identical? p/eof expr)\n              ret\n              (let [ret (eval-form ctx expr)]\n                (recur ret)))))))))\n\n#?(:clj\n   (when (System/getenv \"SCI_STATS\")\n     (alter-var-root #'eval-string* (constantly eval-string-stats))))\n\n(vreset! utils/eval-string* eval-string*)\n\n;;;; Called from public API\n\n(defn eval-string\n  ([s] (eval-string s nil))\n  ([s opts]\n   (let [init-ctx (opts/init opts)\n         ret (eval-string* init-ctx s)]\n     ret)))\n\n;;;; Scratch\n\n(comment\n  (eval-string \"((fn f [x] (if (< x 3) (recur (inc x)) x)) 0)\")\n  )\n"]}