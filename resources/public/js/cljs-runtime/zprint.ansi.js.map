{"version":3,"sources":["zprint/ansi.cljc"],"mappings":";AAMA,yBAAA,wCAAA,0EAAA,kEAAA,qDAAA,mEAAA,qEAAA,oEAAA,gEAAA,uDAAA,qEAAA,wEAAA,iEAAA,2EAAA,uDAAA,uDAAA,+DAAA,iEAAA,yDAAA,6EAAA,uEAAA,kEAAA,kFAAA,uDAAA,oEAAA,gEAAA,qDAAA,sEAAA,2EAAA,iEAAA,wEAAA,gFAAA,0DAAA,8EAAA,+DAAA,mDAAA,gEAAA,gEAAA,0DAAA,iEAAA,8DAAA,yDAAA,iFAAA,mDAAA,qDAAA,kDAAA,kEAAA,2DAAA,yDAAA,uDAAA,sDAAA,qDAAA,8EAAA,2DAAA,sEAAA,iFAAA,yDAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,MAAA,KAAA,IAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,MAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,5xHAAKA;AAyDL,AAAA;;;wBAAA,gCAAAC,xDAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,2DAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,6DAAA,7DAAME,wEAEHM,EAAIC;AAFP,AAGE,IAAMC,WAAS,AAACC,8CAAMC,cAAI,kDAAA,lDAACC,sDAAa,AAACC,4CAAInB,uBAAWc;AAAxD,AACE,QAAA,SAAA,0DAAA,mDAAA,SAAA,IAAA,IAAA,9EAAeC,0DAAYF;;;AAJ/B,CAAA,gDAAA,hDAAMN;;AAAN;AAAA,CAAA,0CAAA,WAAAC,rDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA","names":["zprint.ansi/ansi-codes","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","zprint.ansi/color-str","seq29141","G__29142","cljs.core/first","cljs.core/next","self__4805__auto__","s","ansi","ansi-str","cljs.core.apply","cljs.core/str","cljs.core.interpose","cljs.core.map"],"sourcesContent":["(ns ^:no-doc zprint.ansi)\n\n;;\n;; # Do ANSI Escape code processing\n;;\n\n(def ansi-codes\n  {:off 0,\n   :reset 0,\n   :bold 1,\n   :faint 2,\n   :italic 3,\n   :underline 4,\n   :blink 5,\n   :reverse 7,\n   :hidden 8,\n   :strike 9,\n   :normal 22,\n   :italic-off 23,\n   :underline-off 24,\n   :blink-off 25,\n   :reverse-off 27,\n   :hidden-off 28,\n   :strike-off 29,\n   :black 30,\n   :none 30,\n   :red 31,\n   :green 32,\n   :yellow 33,\n   :blue 34,\n   :magenta 35,\n   :purple 35,\n   :cyan 36,\n   :white 37,\n   :xsf 38,\n   :back-black 40,\n   :back-red 41,\n   :back-green 42,\n   :back-yellow 43,\n   :back-blue 44,\n   :back-magenta 45,\n   :back-purple 45,\n   :back-cyan 46,\n   :back-white 47,\n   :bright-black 90,\n   :bright-red 91,\n   :bright-green 92,\n   :bright-yellow 93,\n   :bright-blue 94,\n   :bright-magenta 95,\n   :bright-purple 95,\n   :bright-cyan 96,\n   :bright-white 97,\n   :back-bright-black 100,\n   :back-bright-red 101,\n   :back-bright-green 102,\n   :back-bright-yellow 103,\n   :back-bright-blue 104,\n   :back-bright-magenta 105,\n   :back-bright-purple 105,\n   :back-bright-cyan 106,\n   :back-bright-white 107})\n\n(defn color-str\n  \"Wraps a string with ANSI escape codes.\"\n  [s & ansi]\n  (let [ansi-str (apply str (interpose \\; (map ansi-codes ansi)))]\n    (str \\u001b \\[ ansi-str \\m s \\u001b \\[ \\0 \\m)))"]}