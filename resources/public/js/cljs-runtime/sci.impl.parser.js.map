{"version":3,"sources":["sci/impl/parser.cljc"],"mappings":"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","names":["sci.impl.parser/eof","sci.impl.parser/default-opts","sci.impl.parser/fully-qualify","ctx","sym","cljs.core/deref","env","sym-ns","temp__5753__auto__","n","cljs.core/namespace","cljs.core.symbol","sym-name-str","cljs.core/name","current-ns","sci.impl.vars/current-ns-name","current-ns-str","namespaces","cljs.core.get","the-current-ns","aliases","ret","cljs.core/not","or__4212__auto__","cljs.core/contains?","G__34276","sci.impl.utils/ana-macros","sci.impl.interop/fully-qualify-class","v","m","cljs.core/meta","var-name","ns","sci.impl.vars/getName","cljs.core.get_in","temp__5751__auto__","var_args","G__34285","sci.impl.parser/parse-next","js/Error","r","sci.impl.parser.edamame.parse_next","sci.impl.parser.parse_next","opts","features","readers","sci.impl.vars/var?","env-val","auto-resolve","cljs.core.assoc","parse-opts","G__34293","p1__34281#","cljs.core.merge","e34294","cljs.core/ExceptionInfo","e","cljs.core.ex_info","cljs.core/ex-data","sci.impl.vars/current-file","sci.impl.parser/reader","x","string-reader","cljs.tools.reader.reader-types/string-reader","buf-len","pushback-reader","cljs.tools.reader.reader-types/PushbackReader","cljs.core.object_array","cljs.tools.reader.reader_types.indexing_push_back_reader","sci.impl.parser/get-line-number","reader","cljs.tools.reader.reader-types/get-line-number","sci.impl.parser/get-column-number","cljs.tools.reader.reader-types/get-column-number","sci.impl.parser/parse-string","s","sci.impl.utils/kw-identical?"],"sourcesContent":["(ns sci.impl.parser\n  {:no-doc true}\n  (:refer-clojure :exclude [read-string])\n  (:require\n   [clojure.tools.reader.reader-types :as r]\n   [sci.impl.interop :as interop]\n   [sci.impl.parser.edamame :as parser]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def ^:const eof :sci.impl.parser.edamame/eof)\n\n(def default-opts\n  {:read-eval false\n   :read-cond :allow})\n\n(defn fully-qualify [ctx sym]\n  (let [env @(:env ctx)\n        sym-ns (when-let [n (namespace sym)]\n                 (symbol n))\n        sym-name-str (name sym)\n        current-ns (vars/current-ns-name)\n        current-ns-str (str current-ns)\n        namespaces (get env :namespaces)\n        the-current-ns (get namespaces current-ns)\n        aliases (:aliases the-current-ns)\n        ret (if-not sym-ns\n              (or (when (or (and (contains? (get namespaces 'clojure.core) sym)\n                                 ;; only valid when the symbol isn't excluded\n                                 (not (some-> the-current-ns\n                                              :refer\n                                              (get 'clojure.core)\n                                              :exclude\n                                              (contains? sym ))))\n                            (contains? utils/ana-macros sym))\n                    (symbol \"clojure.core\" sym-name-str))\n                  (interop/fully-qualify-class ctx sym)\n                  (when-let [v (get the-current-ns sym)]\n                    (when-let [m (meta v)]\n                      (when-let [var-name (:name m)]\n                        (when-let [ns (:ns m)]\n                          (symbol (str (vars/getName ns))\n                                  (str var-name))))))\n                  ;; all unresolvable symbols all resolved in the current namespace\n                  (symbol current-ns-str sym-name-str))\n              (if (get-in env [:namespaces sym-ns])\n                sym\n                (if-let [ns (get aliases sym-ns)]\n                  (symbol (str ns) sym-name-str)\n                  sym)))]\n    ret))\n\n(defn parse-next\n  ([r]\n   (parser/parse-next default-opts r))\n  ([ctx r]\n   (parse-next ctx r nil))\n  ([ctx r opts]\n   (let [features (:features ctx)\n         readers (:readers ctx)\n         readers (if (vars/var? readers) @readers readers)\n         env (:env ctx)\n         env-val @env\n         current-ns (vars/current-ns-name)\n         the-current-ns (get-in env-val [:namespaces current-ns])\n         aliases (:aliases the-current-ns)\n         auto-resolve (assoc aliases :current current-ns)\n         parse-opts (cond-> (assoc default-opts\n                                   :features features\n                                   :auto-resolve auto-resolve\n                                   :syntax-quote {:resolve-symbol #(fully-qualify ctx %)}\n                                   :readers readers)\n                      opts (merge opts))\n         ret (try (parser/parse-next parse-opts\n                                     r)\n                  (catch #?(:clj clojure.lang.ExceptionInfo\n                            :cljs cljs.core/ExceptionInfo) e\n                    (throw (ex-info #?(:clj (.getMessage e)\n                                       :cljs (.-message e))\n                                    (assoc (ex-data e)\n                                           :type :sci.error/parse\n                                           :phase \"parse\"\n                                           :file @vars/current-file)\n                                    e))))]\n     ret)))\n\n(defn reader [x]\n  #?(:clj (r/indexing-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/indexing-push-back-reader pushback-reader))))\n\n(defn get-line-number [reader]\n  (r/get-line-number reader))\n\n(defn get-column-number [reader]\n  (r/get-column-number reader))\n\n(defn parse-string\n  ([ctx s]\n   (let [r (reader s)\n         v (parse-next ctx r)]\n     (if (utils/kw-identical? eof v) nil v))))\n\n;;;; Scratch\n\n(comment\n  )\n"]}