{"version":3,"sources":["sci/impl/parser/edamame/syntax_quote.cljc"],"mappings":"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","names":["sci.impl.parser.edamame.syntax-quote/unquote?","form","cljs.core/seq?","cljs.core._EQ_","cljs.core/first","sci.impl.parser.edamame.syntax-quote/unquote-splicing?","sci.impl.parser.edamame.syntax-quote/expand-list","ctx","reader","s","cljs.core/seq","r","cljs.core/transient","item","ret","cljs.core.conj_BANG_","cljs.core/List","cljs.core/second","sci.impl.parser.edamame.syntax-quote/syntax-quote","cljs.core/next","cljs.core/persistent!","sci.impl.parser.edamame.syntax-quote/syntax-quote-coll","type","coll","res","cljs.core/cons","sci.impl.parser.edamame.syntax-quote/map-func","cljs.core/count","sci.impl.parser.edamame.syntax-quote/flatten-map","key-vals","e","cljs.core/key","cljs.core/val","p__32471","map__32472","cljs.core/--destructure-map","gensyms","cljs.core.get","sci.impl.parser.edamame.syntax-quote/syntax-quote*","cljs.core/special-symbol?","cljs.core/Symbol","sym-name","cljs.core/name","clojure.string/ends-with?","temp__5751__auto__","generated","cljs.core/deref","n","cljs.core.subs","cljs.core.gensym","cljs.core.symbol","cljs.core.swap_BANG_","cljs.core/assoc","f","fexpr__32504","or__4212__auto__","cljs.core/identity","js/Error","cljs.core/coll?","cljs.core/IRecord","cljs.core/map?","cljs.core/vector?","cljs.core/set?","cljs.core/list?","seq","cljs.core/Keyword","cljs.core/char?","cljs.core/boolean?","cljs.core/regexp?","sci.impl.parser.edamame.syntax-quote/add-meta","and__4210__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core.dissoc","cljs.core/meta"],"sourcesContent":["(ns sci.impl.parser.edamame.syntax-quote\n  \"Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj\"\n  {:no-doc true}\n  (:require [clojure.string :as str]))\n\n(defn unquote? [form]\n  (and (seq? form)\n       (= (first form) 'clojure.core/unquote)))\n\n(defn- unquote-splicing? [form]\n  (and (seq? form)\n       (= (first form) 'clojure.core/unquote-splicing)))\n\n(declare syntax-quote)\n\n(defn- expand-list\n  \"Expand a list by resolving its syntax quotes and unquotes\"\n  [ctx #?(:cljs ^not-native reader :default reader) s]\n  (loop [s (seq s) r (transient [])]\n    (if s\n      (let [item (first s)\n            ret (conj! r\n                       (cond\n                         (unquote? item)          (list 'clojure.core/list (second item))\n                         (unquote-splicing? item) (second item)\n                         :else                    (list 'clojure.core/list (syntax-quote ctx reader item))))]\n        (recur (next s) ret))\n      (seq (persistent! r)))))\n\n(defn- syntax-quote-coll [ctx #?(:cljs ^not-native reader :default reader) type coll]\n  ;; We use sequence rather than seq here to fix http://dev.clojure.org/jira/browse/CLJ-1444\n  ;; But because of http://dev.clojure.org/jira/browse/CLJ-1586 we still need to call seq on the form\n  (let [res (list 'clojure.core/sequence\n                  (list 'clojure.core/seq\n                        (cons 'clojure.core/concat\n                              (expand-list ctx reader coll))))]\n    (if type\n      (list 'clojure.core/apply type res)\n      res)))\n\n(defn map-func\n  \"Decide which map type to use, array-map if less than 16 elements\"\n  [coll]\n  (if (>= (count coll) 16)\n    'clojure.core/hash-map\n    'clojure.core/array-map))\n\n(defn- flatten-map\n  \"Flatten a map into a seq of alternate keys and values\"\n  [form]\n  (loop [s (seq form) key-vals (transient [])]\n    (if s\n      (let [e (first s)]\n        (recur (next s) (-> key-vals\n                            (conj! (key e))\n                            (conj! (val e)))))\n      (seq (persistent! key-vals)))))\n\n(defn- syntax-quote* [{:keys [:gensyms] :as ctx}\n                     #?(:cljs ^not-native reader :default reader) form]\n  (cond\n    (special-symbol? form) (list 'quote form)\n    (symbol? form)\n    (list 'quote\n          (let [sym-name (name form)]\n            (cond (special-symbol? form) form\n                  (str/ends-with? sym-name \"#\")\n                  (if-let [generated (get @gensyms form)]\n                    generated\n                    (let [n (subs sym-name 0 (dec (count sym-name)))\n                          generated (gensym (str n \"__\"))\n                          generated (symbol (str (name generated) \"__auto__\"))]\n                      (swap! gensyms assoc form generated)\n                      generated))\n                  :else\n                  (let [f (-> ctx :syntax-quote :resolve-symbol)]\n                    ((or f identity) form)))))\n    (unquote? form) (second form)\n    (unquote-splicing? form) (throw (new #?(:cljs js/Error :clj IllegalStateException)\n                                         \"unquote-splice not in list\"))\n\n    (coll? form)\n    (cond\n      (instance? #?(:clj clojure.lang.IRecord :cljs IRecord) form) form\n      (map? form) (syntax-quote-coll ctx reader (map-func form) (flatten-map form))\n      (vector? form) (list 'clojure.core/vec (syntax-quote-coll ctx reader nil form))\n      (set? form) (syntax-quote-coll ctx reader 'clojure.core/hash-set form)\n      (or (seq? form) (list? form))\n      (let [seq (seq form)]\n        (if seq\n          (syntax-quote-coll ctx reader nil seq)\n          '(clojure.core/list)))\n\n      :else (throw (new #?(:clj UnsupportedOperationException\n                           :cljs js/Error) \"Unknown Collection type\")))\n\n    (or (keyword? form)\n        (number? form)\n        (char? form)\n        (string? form)\n        (nil? form)\n        (boolean? form)\n        #?(:clj (instance? java.util.regex.Pattern form)\n           :cljs (regexp? form)))\n    form\n    :else (list 'quote form)))\n\n(defn- add-meta [ctx reader form ret]\n  (if (and #?(:clj (instance? clojure.lang.IObj form)\n              :cljs (implements? IWithMeta form))\n           (seq (dissoc (meta form) :line :column :end-line :end-column)))\n    (list #?(:clj 'clojure.core/with-meta\n             :cljs 'cljs.core/with-meta) ret (syntax-quote* ctx reader (meta form)))\n    ret))\n\n(defn syntax-quote [ctx reader form]\n  (let [ret (syntax-quote* ctx reader form)]\n    (add-meta ctx reader form ret)))\n"]}