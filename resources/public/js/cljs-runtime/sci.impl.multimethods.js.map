{"version":3,"sources":["sci/impl/multimethods.cljc"],"mappings":"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","names":["var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","sci.impl.multimethods/check-valid-options","seq32163","G__32164","cljs.core/first","cljs.core/next","self__4805__auto__","options","valid-keys","cljs.core/seq","cljs.core.apply","cljs.core/disj","cljs.core/hash-set","cljs.core/keys","message","cljs.core/str","p1__32162#","cljs.core.map","cljs.core/rest","js/Error","sci.impl.multimethods/defmulti","seq32223","G__32224","G__32225","G__32226","G__32227","_","ctx","mm-name","docstring","m","cljs.core/map?","dispatch-fn","cljs.core.assoc","cljs.core/meta","cljs.core.conj","cljs.core/with-meta","cljs.core._EQ_","cljs.core/count","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core/array-map","cljs.core/hash-map","default","cljs.core.get","hierarchy","sci.impl.hierarchies/global-hierarchy","sci.impl.multimethods.check_valid_options","cljs.core.symbol","cljs.core/name","sci.impl.multimethods/multi-fn?-impl","x","cljs.core/MultiFn","sci.impl.multimethods/multi-fn-impl","name","method-table","prefer-table","method-cache","cached-hierarchy","sci.impl.multimethods/multi-fn-add-method-impl","multifn","dispatch-val","f","cljs.core/-add-method","sci.impl.multimethods/defmethod","seq32781","G__32782","G__32783","G__32784","G__32785","fn-tail"],"sourcesContent":["(ns sci.impl.multimethods\n  {:no-doc true}\n  (:refer-clojure :exclude [defmulti defmethod])\n  (:require [sci.impl.hierarchies :refer [global-hierarchy]]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn ^:private check-valid-options\n  \"Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.\"\n  [options & valid-keys]\n  (when (seq (apply disj (apply hash-set (keys options)) valid-keys))\n    (let [message (apply str \"Only these options are valid: \"\n                         (first valid-keys)\n                         (map #(str \", \" %) (rest valid-keys)))]\n      (throw\n       #?(:clj (IllegalArgumentException. ^String message)\n          :cljs (js/Error. ^string message))))))\n\n(defn defmulti\n  \"Creates a new multimethod with the associated dispatch function.\n  The docstring and attr-map are optional.\n\n  Options are key-value pairs and may be one of:\n\n  :default\n\n  The default dispatch value, defaults to :default\n\n  :hierarchy\n\n  The value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\n  Hierarchies are type-like relationships that do not depend upon type\n  inheritance. By default Clojure's multimethods dispatch off of a\n  global hierarchy map.  However, a hierarchy relationship can be\n  created with the derive function used to augment the root ancestor\n  created with make-hierarchy.\n\n  Multimethods expect the value of the hierarchy option to be supplied as\n  a reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\n  or the var special form).\"\n  {:arglists '([name docstring? attr-map? dispatch-fn & options])}\n  [_ _ ctx mm-name & options]\n  (let [docstring   (if (string? (first options))\n                      (first options)\n                      nil)\n        options     (if (string? (first options))\n                      (next options)\n                      options)\n        m           (if (map? (first options))\n                      (first options)\n                      {})\n        options     (if (map? (first options))\n                      (next options)\n                      options)\n        dispatch-fn (first options)\n        options     (next options)\n        m           (if docstring\n                      (assoc m :doc docstring)\n                      m)\n        m           (if (meta mm-name)\n                      (conj (meta mm-name) m)\n                      m)\n        mm-name (with-meta mm-name m)]\n    (when (= (count options) 1)\n      (throw (new #?(:clj Exception :cljs js/Error)\n                  \"The syntax for defmulti has changed. Example: (defmulti name dispatch-fn :default dispatch-value)\")))\n\n    (let [options   (apply hash-map options)\n          default   (get options :default :default)\n          hierarchy (get options :hierarchy (global-hierarchy ctx))]\n      (check-valid-options options :default :hierarchy)\n      #?(:clj `(let [v# (def ~mm-name)]\n                 (when-not (and (clojure.core/has-root-impl v#) (clojure.core/multi-fn?-impl (deref v#)))\n                   (def ~mm-name\n                     (clojure.core/multi-fn-impl ~(name mm-name) ~dispatch-fn ~default ~hierarchy))))\n         :cljs `(defonce ~(with-meta mm-name m)\n                  (let [method-table# (atom {})\n                        prefer-table# (atom {})\n                        method-cache# (atom {})\n                        cached-hierarchy# (atom {})]\n                    (clojure.core/multi-fn-impl ~(symbol (name mm-name)) ~dispatch-fn ~default ~hierarchy\n                                                method-table# prefer-table# method-cache# cached-hierarchy#)))))))\n\n(defn multi-fn?-impl [x]\n  (instance? #?(:clj clojure.lang.MultiFn\n                :cljs cljs.core/MultiFn) x))\n\n(defn multi-fn-impl #?(:clj [name dispatch-fn default hierarchy]\n                       :cljs [name dispatch-fn default hierarchy\n                              method-table prefer-table method-cache cached-hierarchy])\n  (new #?(:clj clojure.lang.MultiFn\n          :cljs cljs.core/MultiFn) name dispatch-fn default hierarchy\n       #?@(:cljs [method-table prefer-table method-cache cached-hierarchy])))\n\n(defn multi-fn-add-method-impl\n  [multifn dispatch-val f]\n  #?(:clj (.addMethod ^clojure.lang.MultiFn multifn dispatch-val f)\n     :cljs (-add-method multifn dispatch-val f)))\n\n(defn defmethod\n  \"Creates and installs a new method of multimethod associated with dispatch-value. \"\n  [_ _ multifn dispatch-val & fn-tail]\n  `(clojure.core/multi-fn-add-method-impl ~multifn ~dispatch-val (fn ~@fn-tail)))\n"]}