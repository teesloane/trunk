{"version":3,"sources":["sci/impl/read.cljc"],"mappings":";AASA,AAAA;;;qBAAA,6BAAAA,lDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mDAAA,nDAAMD,8DAEFE;AAFJ,AAGG,gEAAA,AAAAC,zDAACC,iDAAKF,wBAASG;;;AAHlB,CAAA,mDAAA,nDAAML,8DAIFE,QAAQI;AAJZ,AAKG,uEAAA,KAAA,rEAACF,iDAAKF,QAAQI;;;AALjB,CAAA,mDAAA,nDAAMN,8DAMFE,QAAQI,OAAOC,iBAAWC;AAN9B,AAOG,kGAAA,3FAACJ,iDAAKF,QAAQI,OAAOC,iBAAWC;;;AAPnC,CAAA,mDAAA,nDAAMR,8DAQFE,QAAQI,OAAOG,kBAAYD,UAAUE;AARzC,AASG,IAAMC,IAAE,wEAAA,2CAAA,nHAACC,yDAAkBV,QAAQI,qGAAaE;AAAhD,AACE,oBAAI,CAACK,mEAAAA,sKAAAA,rGAAoBC,AAAA,kJAAAA,AAAA,lDAAWH,kJAAAA;AAClCH;;AACAG;;;;AAZP,CAAA,mDAAA,nDAAMX,8DAaFE,QAAQa,MAAMT;AAblB,AAcG,OAACM,yDAAkBV,QAAQI;;;AAd9B,CAAA,6CAAA,7CAAMN;;AAAN,AAgBA,4BAAA,5BAAMgB,gEACFd,QAAQe;AADZ,AAEG,IAAMC,SAAO,AAACC,uFAA4B,AAACC,qFAA0BH;AAArE,AACE,OAACL,yDAAkBV,QAAQgB;;AAEhC,qBAAA,rBAAMG,kDAAMnB,QAAQoB;AAApB,AACE,IAAAC,eAAA,AAAApB,gBAAEqB;AAAF,AAAA,QAAAD,6CAAAA,2DAAAA,hBAAwBrB,uCAAAA,/BAAQoB,uCAAAA;;AAElC,4BAAA,5BAAMG,gEAAavB,QAAQe;AAA3B,AACE,AAAA,AAAAS,mCAAA,yEAAA,AAAAvB,zBAAqByB,yCAAiBA;;AAAtC,IAAA,AAAA,AACE,IAAMV,SAAO,AAACC,uFAA4B,AAACC,qFAA0BH;AAArE,AACE,UAAA,NAAOY;;AAAP,AACE,IAAMC,IAAE,AAAClB,yDAAkBV,QAAQgB;AAAnC,AACE,oBAAI,CAACL,mEAAAA,sKAAAA,rGAAoBC,AAAA,kJAAAA,AAAA,lDAAWgB,kJAAAA;AAClCD;;AACA,eAAO,AAACR,mBAAKnB,QAAQ4B;;;;;;UAN/B,AAAA,AAAAH;;AASF,sCAAA,tCAAMI,oFACHD;AADH,AAGW,IAAME,gBAAc,AAACC,6CAAgBH;cAArC,VACMI;IACAC,kBAAgB,KAAAC,8CAAmBJ,cACA,AAACK,qDAAaH,SACdA,QAAQA;AAJjD,AAKE,OAACI,6FAAkCH","names":["var_args","G__34297","sci.impl.read/read","js/Error","sci-ctx","cljs.core/deref","sci.impl.read.read","sci.impl.io/in","stream","eof-error?","eof-value","_eof-error?","_recursive?","v","sci.impl.parser.parse_next","sci.impl.utils/kw-identical?","sci.impl.parser/eof","_opts","sci.impl.read/read-string","s","reader","cljs.tools.reader.reader_types.indexing_push_back_reader","cljs.tools.reader.reader_types.string_push_back_reader","sci.impl.read/eval","form","fexpr__34308","sci.impl.utils/eval-form-state","sci.impl.read/load-string","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.vars/current-ns","ret","x","sci.impl.read/source-logging-reader","string-reader","cljs.tools.reader.reader-types/string-reader","buf-len","pushback-reader","cljs.tools.reader.reader-types/PushbackReader","cljs.core.object_array","cljs.tools.reader.reader_types.source_logging_push_back_reader"],"sourcesContent":["(ns sci.impl.read\n  {:no-doc true}\n  (:refer-clojure :exclude [eval load-string read read-string read+string])\n  (:require [clojure.tools.reader.reader-types :as r]\n            [sci.impl.io :as io]\n            [sci.impl.parser :as parser]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn read\n  \"Added for compatibility. Does not support all of the options from the original yet.\"\n  ([sci-ctx]\n   (read sci-ctx @io/in))\n  ([sci-ctx stream]\n   (read sci-ctx stream true nil))\n  ([sci-ctx stream eof-error? eof-value]\n   (read sci-ctx stream eof-error? eof-value false))\n  ([sci-ctx stream _eof-error? eof-value _recursive?]\n   (let [v (parser/parse-next sci-ctx stream {:eof eof-value})]\n     (if (utils/kw-identical? parser/eof v)\n       eof-value\n       v)))\n  ([sci-ctx _opts stream]\n   (parser/parse-next sci-ctx stream)))\n\n(defn read-string\n  ([sci-ctx s]\n   (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n     (parser/parse-next sci-ctx reader))))\n\n(defn eval [sci-ctx form]\n  (@utils/eval-form-state sci-ctx form))\n\n(defn load-string [sci-ctx s]\n  (vars/with-bindings {vars/current-ns @vars/current-ns}\n    (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n      (loop [ret nil]\n        (let [x (parser/parse-next sci-ctx reader)]\n          (if (utils/kw-identical? parser/eof x)\n            ret\n            (recur (eval sci-ctx x))))))))\n\n;; used by source-fn\n(defn source-logging-reader\n  [x]\n  #?(:clj (r/source-logging-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/source-logging-push-back-reader pushback-reader))))\n"]}