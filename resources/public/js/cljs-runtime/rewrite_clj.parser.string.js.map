{"version":3,"sources":["rewrite_clj/parser/string.cljs"],"mappings":";AAMA;;;uCAAA,vCAAOA,sFAEJC,MAAMC;AAFT,AAGE,IAAMC,IAAE,AAAWD;AAAnB,AACE,QAAA,RAAMA;;AACN,OAACE,6CAAKH,MAAME;;AAEhB,6CAAA,7CAAOE,kGACQC;AADf,AAEE,AAACC,0BAASD;;AACV,IAAMJ,MAAI,KAAAM;AAAV,AACE,oBAAA,hBAAOC;YAAP,RACOR;;AADP,AAEE,IAAAS,qBAAW,CAACE,6DAAAA,qEAAAA,VAAYN,iDAAAA;AAAxB,AAAA,oBAAAI;AAAA,QAAAA,JAASC;AAAT,AACE,GAAM,EAAK,AAACE,cAAIJ,oBAAS,OAAA,NAAYE;AAC/B,OAACX,qCAAWC,MAAMC;;AADxB,GAGM,OAAA,NAAYS;AACZ,eAAOF;eAAQ,AAACT,qCAAWC,MAAMC;;;;;AAJvC,AAOM,AACE,AAASA,WAAIS;;AACb,eAAO,EAAK,AAACE,cAAIJ,oBAAS,OAAA,NAAYE;eAAOV;;;;;;;;AACrD,8CAAA,vCAACa,gCAAeR;;;;;AAExB,yCAAA,zCAAMS,0FACST;AADf,AAEE,IAAAU,WAAkB,AAACX,2CAAiBC;AAApC,AAAA,gIAAAU,mDAAAA,3KAACC,6DAAAA,uEAAAA;;AAEH,wCAAA,xCAAMC,wFACSZ;AADf,AAEE,IAAML,QAAM,AAACI,2CAAiBC;IACxBa,QAAM,kDAAA,lDAACC,uDAAiBnB;AAD9B,AAEE,IAAAoB,WAAiB,AAACG,qBAAWL;IAA7BG,WAAoC,CAAA,YAAA,NAAWH;AAA/C,AAAA,8HAAAE,SAAAC,kDAAAD,SAAAC,1LAACC,4DAAAA,+EAAAA","names":["rewrite-clj.parser.string/flush-into","lines","buf","s","cljs.core.conj","rewrite-clj.parser.string/read-string-data","reader","rewrite-clj.reader/ignore","goog.string/StringBuffer","escape?","temp__5751__auto__","c","rewrite-clj.reader/read-char","cljs.core/not","rewrite-clj.reader/throw-reader","rewrite-clj.parser.string/parse-string","G__29785","rewrite-clj.node/string-node","rewrite-clj.parser.string/parse-regex","regex","clojure.string.join","G__29786","G__29787","rewrite-clj.node/token-node","cljs.core/re-pattern"],"sourcesContent":["(ns rewrite-clj.parser.string\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as r]\n            [goog.string :as gstring]\n            [clojure.string :as string]))\n\n(defn- flush-into\n  \"Flush buffer and add string to the given vector.\"\n  [lines buf]\n  (let [s (.toString buf)]\n    (.set buf \"\")\n    (conj lines s)))\n\n(defn- read-string-data\n  [^not-native reader]\n  (r/ignore reader)\n  (let [buf (gstring/StringBuffer.)]\n    (loop [escape? false\n           lines []]\n      (if-let [c (r/read-char reader)]\n        (cond (and (not escape?) (identical? c \\\"))\n              (flush-into lines buf)\n\n              (identical? c \\newline)\n              (recur escape? (flush-into lines buf))\n\n              :else\n              (do\n                (.append buf c)\n                (recur (and (not escape?) (identical? c \\\\)) lines)))\n        (r/throw-reader reader \"Unexpected EOF while reading string.\")))))\n\n(defn parse-string\n  [^not-native reader]\n  (node/string-node (read-string-data reader)))\n\n(defn parse-regex\n  [^not-native reader]\n  (let [lines (read-string-data reader)\n        regex (string/join \"\\n\" lines)]\n    (node/token-node (re-pattern regex) (str \"#\\\"\" regex \"\\\"\"))))\n"]}