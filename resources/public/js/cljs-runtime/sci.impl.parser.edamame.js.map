{"version":3,"sources":["sci/impl/parser/edamame.cljc"],"mappings":"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","names":["sci.impl.parser.edamame/edn-read","ctx","reader","tools-reader-opts","cljs.tools.reader.edn.read","sci.impl.parser.edamame/dispatch-macro?","ch","cljs.core/contains?","cljs.tools.reader.edn/read-token","sci.impl.parser.edamame/read-token","cljs.tools.reader.impl.commons/parse-symbol","sci.impl.parser.edamame/parse-symbol","this__4461__auto__","k__4462__auto__","this__4463__auto__","k32691","else__4464__auto__","G__32695","cljs.core/Keyword","line","column","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__32696","vec__32699","k__4485__auto__","cljs.core.nth","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__32690","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this32692","other32693","cljs.core._EQ_","this__4471__auto__","k__4472__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__32743","this__4469__auto__","k__4470__auto__","pred__32778","cljs.core/keyword-identical?","expr__32779","cljs.core.assoc","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","sci.impl.parser.edamame/Loc","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__32694","extmap__4501__auto__","G__32829","cljs.core/record?","sci.impl.parser.edamame/->Loc","sci.impl.parser.edamame/map->Loc","sci.impl.parser.edamame/location","sci.impl.parser.edamame/kw-identical?","kw","v","sci.impl.parser.edamame/parse-comment","cljs.tools.reader.reader-types/read-line","sci.impl.parser.edamame/whitespace?","c","and__4210__auto__","sci.impl.parser.edamame/skip-whitespace","_ctx","temp__5753__auto__","var_args","G__32873","sci.impl.parser.edamame/throw-reader","js/Error","msg","sci.impl.parser.edamame.throw_reader","data","loc","cljs.tools.reader.reader-types/get-column-number","l","cljs.tools.reader.reader-types/get-line-number","cljs.core.ex_info","cljs.core.merge","sci.impl.parser.edamame/non-match","cljs.core.symbol","sci.impl.parser.edamame/non-match?","sci.impl.parser.edamame/throw-eof-while-reading","G__32878","sci.impl.parser.edamame/parse-to-delimiter","delimiter","sci.impl.parser.edamame.parse_to_delimiter","into","opened","vals","cljs.core/transient","next-val","sci.impl.parser.edamame/parse-next","cond-splice?","G__32960","cljs.core/meta","cljs.core/persistent!","seq__32961","chunk__32962","count__32963","i__32964","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","cljs.core.conj_BANG_","sci.impl.parser.edamame/parse-list","cljs.core.apply","cljs.core/list","sci.impl.parser.edamame/read-regex-pattern","sb","js/goog.string.StringBuffer","sci.impl.parser.edamame/duplicate-keys-error","coll","seq","iter__4611__auto__","s__32994","cljs.core/LazySeq","c__4609__auto__","size__4610__auto__","b__32996","cljs.core/chunk-buffer","i__32995","vec__33001","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32993","vec__33007","cljs.core/cons","cljs.core/rest","id","freq","cljs.core/frequencies","dups","duplicates","cljs.core/str","cljs.core.interpose","sci.impl.parser.edamame/throw-dup-keys","kind","ks","clojure.string/capitalize","cljs.core/name","sci.impl.parser.edamame/parse-set","start-loc","the-set","cljs.core/set","sci.impl.parser.edamame/parse-first-matching-condition","features","match","k","next-is-match?","map__33032","cljs.core/--destructure-map","char","G__33033","G__33034","sci.impl.parser.edamame/parse-reader-conditional","opt","splice?","cljs.tools.reader.impl.utils/reader-conditional","cljs.core/fn?","G__33036","cljs.core.vary_meta","cljs.core/assoc","p1__33035#","G__33047","sci.impl.parser.edamame/get-auto-resolve","sci.impl.parser.edamame.get_auto_resolve","temp__5751__auto__","or__4212__auto__","G__33071","sci.impl.parser.edamame/auto-resolve","m","kns","sci.impl.parser.edamame.auto_resolve","sci.impl.parser.edamame/parse-namespaced-map","auto-resolved?","current-ns?","prefix","the-map","ns","f","resolved-ns","cljs.core/zipmap","cljs.tools.reader.impl.utils/namespace-keys","cljs.core/keys","cljs.core/vals","sci.impl.parser.edamame/parse-sharp","G__33116","pat","cljs.core/re-pattern","fn-expr","edamame.impl.read-fn/read-fn","suppress?","sym","readers","fexpr__33144","cljs.core/deref","cljs.reader/*tag-table*","sci.impl.parser.edamame/throw-odd-map","elements","cljs.tools.reader.impl.inspect.inspect","sci.impl.parser.edamame/parse-map","cljs.core/odd?","cljs.core.take_nth","cljs.core/distinct?","cljs.core/hash-map","sci.impl.parser.edamame/parse-keyword","init-c","token","auto-resolve?","vec__33188","cljs.core.subs","token-ns","token-name","cljs.core.keyword","sci.impl.parser.edamame/dispatch","sharp?","G__33209","gensyms","cljs.core.atom","ret","sci.impl.parser.edamame.syntax-quote/syntax-quote","nc","expected","cljs.core.not_EQ_","map__33334","map__33394","map__33437","meta-val","val-val","cljs.core/merge","sci.impl.parser.edamame/desugar-meta","cljs.core/Symbol","sci.impl.parser.edamame/iobj?","obj","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta","G__33513","sci.impl.parser.edamame.parse_next","desugar","cljs.tools.reader.reader-types/peek-char","log?","buf","offset","cljs.tools.reader.reader-types/log-source*","iobj??","src","loc?","cljs.core/seq?","p1__33504#","G__33579","sci.impl.parser.edamame/string-reader","s","cljs.tools.reader.reader_types.indexing_push_back_reader","cljs.tools.reader.reader_types.string_push_back_reader","sci.impl.parser.edamame/parse-string","opts","src?","r","cljs.tools.reader.reader_types.source_logging_push_back_reader","sci.impl.parser.edamame/parse-string-all","sci.impl.parser.edamame/reader","x","string-reader","cljs.tools.reader.reader-types/string-reader","buf-len","pushback-reader","cljs.tools.reader.reader-types/PushbackReader","cljs.core.object_array","sci.impl.parser.edamame/get-line-number","sci.impl.parser.edamame/get-column-number","sci.impl.parser.edamame/source-logging-reader"],"sourcesContent":["(ns sci.impl.parser.edamame\n  \"This code is largely inspired by rewrite-clj(sc), so thanks to all\n  who contribured to those projects.\"\n  {:no-doc true}\n  (:require\n   #?(:clj  [clojure.tools.reader.edn :as edn]\n      :cljs [cljs.tools.reader.edn :as edn])\n   #?(:clj  [clojure.tools.reader.reader-types :as r]\n      :cljs [cljs.tools.reader.reader-types :as r])\n   #?(:clj  [clojure.tools.reader.impl.inspect :as i]\n      :cljs [cljs.tools.reader.impl.inspect :as i])\n   #?(:clj [clojure.tools.reader.impl.utils :refer [namespace-keys]]\n      :cljs [cljs.tools.reader.impl.utils :refer [reader-conditional namespace-keys]])\n   #?(:clj [clojure.tools.reader.impl.commons :as commons]\n      :cljs [cljs.tools.reader.impl.commons :as commons])\n   #?(:cljs [cljs.reader :refer [*tag-table*]])\n   [clojure.string :as str]\n   [edamame.impl.read-fn :refer [read-fn]]\n   [sci.impl.parser.edamame.syntax-quote :refer [syntax-quote]])\n  #?(:clj (:import [java.io Closeable]\n                   [clojure.tools.reader.reader_types SourceLoggingPushbackReader]))\n  #?(:cljs (:import [goog.string StringBuffer])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;;;; tools.reader\n\n;; This is used for reading tokens (numbers, strings, symbols, chars,\n;; ##Inf). We're falling back on the EDN reader to handle this. Tried inlining\n;; it, but saw no significant performance gain.\n(defn edn-read [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [tools-reader-opts (:tools.reader/opts ctx)]\n    (edn/read tools-reader-opts reader)))\n\n(defn dispatch-macro? [ch]\n  (contains? #{\\^  ;; deprecated\n               \\'\n               \\(\n               \\{\n               \\\"\n               \\!\n               \\_\n               \\?\n               \\:\n               \\#} ch))\n\n(def read-token #'edn/read-token)\n(def parse-symbol #'commons/parse-symbol)\n\n;;;; end tools.reader\n\n(defrecord Loc [line column])\n\n(defn location [#?(:cljs ^not-native reader :default reader)]\n  (->Loc\n   (r/get-line-number reader)\n   (r/get-column-number reader)))\n\n(defn kw-identical? [kw v]\n  (#?(:clj identical? :cljs keyword-identical?) kw v))\n\n(declare parse-next)\n\n(defn parse-comment\n  [#?(:cljs ^not-native reader :default reader)]\n  (r/read-line reader)\n  reader)\n\n#?(:cljs\n   (defn whitespace?\n     [c]\n     (and c (< -1 (.indexOf #js [\\return \\newline \\tab \\space \",\"] c)))))\n\n#?(:clj\n   (defmacro whitespace? [c]\n     `(and ~c (or (identical? ~c \\,)\n                  (Character/isWhitespace ~(with-meta c\n                                             {:tag 'java.lang.Character}))))))\n\n\n(defn skip-whitespace\n  \"Skips whitespace. Returns reader. If end of stream is reached, returns nil.\"\n  [_ctx #?(:cljs ^not-native reader :default reader)]\n  (loop []\n    (when-let [c (r/read-char reader)]\n      (if (whitespace? c)\n        (recur)\n        (do (r/unread reader c)\n            reader)))))\n\n(defn throw-reader\n  \"Throw reader exception, including line line/column. line/column is\n  read from the reader but it can be overriden by passing loc\n  optional parameter.\"\n  ([ctx #?(:cljs ^:not-native reader :default reader) msg]\n   (throw-reader ctx reader msg nil))\n  ([ctx #?(:cljs ^:not-native reader :default reader) msg data]\n   (throw-reader ctx reader msg data nil))\n  ([_ctx #?(:cljs ^:not-native reader :default reader) msg data loc]\n   (let [c (:column loc (r/get-column-number reader))\n         l (:line loc (r/get-line-number reader))]\n     (throw\n      (ex-info msg\n               (merge {:type :edamame/error\n                       :line l\n                       :column c} data))))))\n\n(def non-match (symbol \"non-match\"))\n\n(defn non-match? [v]\n  (identical? v non-match))\n\n(defn throw-eof-while-reading [ctx reader]\n  (throw-reader ctx reader \"EOF while reading\"))\n\n(defn parse-to-delimiter\n  ([ctx #?(:cljs ^not-native reader :default reader) delimiter]\n   (parse-to-delimiter ctx reader delimiter []))\n  ([ctx #?(:cljs ^not-native reader :default reader) delimiter into]\n   (let [line (r/get-line-number reader)\n         column (r/get-column-number reader)\n         opened (r/read-char reader)\n         ctx (-> ctx\n                 (assoc ::expected-delimiter delimiter)\n                 (assoc ::opened-delimiter {:char opened :line line :column column}))]\n     (loop [vals (transient into)]\n       (let [;; if next-val is uneval, we get back the expected delimiter...\n             next-val (parse-next ctx reader)\n             cond-splice? (some-> next-val meta ::cond-splice)]\n         (cond\n           (kw-identical? ::eof next-val)\n           (throw-reader ctx\n                         reader\n                         (str \"EOF while reading, expected \" delimiter \" to match \" opened \" at [\" line \",\" column \"]\")\n                         {:edamame/expected-delimiter (str delimiter)\n                          :edamame/opened-delimiter (str opened)})\n           (kw-identical? ::expected-delimiter next-val)\n           (persistent! vals)\n           cond-splice? (do (doseq [v next-val]\n                              (conj! vals v))\n                            (recur vals))\n           (non-match? next-val) (recur vals)\n           :else\n           (recur (conj! vals next-val))))))))\n\n(defn parse-list [ctx #?(:cljs ^not-native reader :default reader)]\n  (apply list (parse-to-delimiter ctx reader \\))))\n\n(defn read-regex-pattern\n  \"Modeled after tools.reader/read-regex.\"\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (r/read-char reader) ;; ignore leading double-quote\n  (let [sb #?(:clj (StringBuilder.)\n              :cljs (StringBuffer.))]\n    (loop [ch (r/read-char reader)]\n      (if (identical? \\\" ch)\n        #?(:clj (str sb)\n           :cljs (str sb))\n        (if (nil? ch)\n          (throw-reader ctx reader \"Error while parsing regex\")\n          (do\n            (.append sb ch )\n            (when (identical? \\\\ ch)\n              (let [ch (r/read-char reader)]\n                (when (nil? ch)\n                  (throw-reader ctx reader \"Error while parsing regex\"))\n                (.append sb ch)))\n            (recur (r/read-char reader))))))))\n\n(defn- duplicate-keys-error [msg coll]\n  ;; https://github.com/clojure/tools.reader/blob/97d5dac9f5e7c04d8fe6c4a52cd77d6ced560d76/src/main/cljs/cljs/tools/reader/impl/errors.cljs#L233\n  (letfn [(duplicates [seq]\n            (for [[id freq] (frequencies seq)\n                  :when (> freq 1)]\n              id))]\n    (let [dups (duplicates coll)]\n      (apply str msg\n             (when (> (count dups) 1) \"s\")\n             \": \" (interpose \", \" dups)))))\n\n(defn throw-dup-keys\n  [ctx #?(:cljs ^not-native reader :default reader) loc kind ks]\n  (throw-reader\n   ctx reader\n   (duplicate-keys-error\n    (str (str/capitalize (name kind)) \" literal contains duplicate key\")\n    ks)\n   nil\n   loc))\n\n(defn parse-set\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [start-loc (location reader)\n        coll (parse-to-delimiter ctx reader \\})\n        the-set (set coll)]\n    (when-not (= (count coll) (count the-set))\n      (throw-dup-keys ctx reader start-loc :set coll))\n    the-set))\n\n(defn parse-first-matching-condition [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [features (:features ctx)]\n    (loop [match non-match]\n      (let [k (parse-next ctx reader)]\n        (if (kw-identical? k ::expected-delimiter)\n          match\n          (let [next-is-match? (and (non-match? match)\n                                    (or (contains? features k)\n                                        (kw-identical? k :default)))]\n            (if next-is-match?\n              (let [match (parse-next ctx reader)\n                    ctx (assoc ctx ::suppress true)]\n                (loop []\n                  (let [next-val (parse-next ctx reader)]\n                    (when-not (kw-identical? ::expected-delimiter\n                                             next-val)\n                      (if (kw-identical? ::eof next-val)\n                        (let [delimiter (::expected-delimiter ctx)\n                              {:keys [:line :column :char]} (::opened-delimiter ctx)]\n                          (throw-reader ctx\n                                        reader\n                                        (str \"EOF while reading, expected \" delimiter \" to match \" char \" at [\" line \",\" column \"]\")\n                                        {:edamame/expected-delimiter (str delimiter)\n                                         :edamame/opened-delimiter (str char)}))\n                        (recur)))))\n                match)\n              (do\n                ;; skip over next val and try next key\n                (parse-next (assoc ctx ::suppress true)\n                            reader)\n                (recur match)))))))))\n\n(defn parse-reader-conditional [ctx #?(:cljs ^not-native reader :default reader)]\n  (skip-whitespace ctx reader)\n  (let [opt (:read-cond ctx)\n        splice? (= \\@ (r/peek-char reader))]\n    (when splice? (r/read-char reader))\n    (skip-whitespace ctx reader)\n    (cond (kw-identical? :preserve opt)\n          (reader-conditional (parse-next ctx reader) splice?)\n          (fn? opt)\n          (opt (vary-meta\n                (parse-next ctx reader)\n                assoc :edamame/read-cond-splicing splice?))\n          :else\n          (let [line (r/get-line-number reader)\n                column (r/get-column-number reader)\n                opened (r/read-char reader)\n                ctx (-> ctx\n                        (assoc ::expected-delimiter \\))\n                        (assoc ::opened-delimiter {:char opened :line line :column column}))\n                match (parse-first-matching-condition ctx reader)]\n            (cond (non-match? match) reader\n                  splice? (vary-meta match\n                                     #(assoc % ::cond-splice true))\n                  :else match)))))\n\n(defn get-auto-resolve\n  ([ctx reader next-val]\n   (get-auto-resolve ctx reader next-val nil))\n  ([ctx reader next-val msg]\n   (if-let [v (:auto-resolve ctx)]\n     v\n     (throw-reader ctx reader\n                   (or msg \"Use `:auto-resolve` to resolve aliases.\")\n                   {:expr (str \":\" next-val)}))))\n\n(defn auto-resolve\n  \"Returns namespace for given alias.\"\n  ([ctx m kns reader next-val] (auto-resolve ctx m kns reader next-val nil))\n  ([ctx m kns reader next-val msg]\n   (if-let [kns (m kns)]\n     kns\n     (throw-reader ctx reader\n                   (or msg (str \"Alias `\" (symbol kns) \"` not found in `:auto-resolve`\"))\n                   {:expr (str \":\" next-val)}))))\n\n(defn parse-namespaced-map [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [auto-resolved? (when (identical? \\: (r/peek-char reader))\n                         (r/read-char reader)\n                         true)\n        current-ns? (when auto-resolved?\n                      (identical? \\{ (r/peek-char reader)))\n        prefix (if auto-resolved?\n                 (when-not current-ns?\n                   (edn-read ctx reader))\n                 (edn-read ctx reader))\n        the-map (parse-next ctx reader)]\n    (if auto-resolved?\n      (let [ns (if current-ns? :current (symbol (name prefix)))\n            f (get-auto-resolve ctx reader ns)\n            resolved-ns (auto-resolve ctx f ns reader prefix)]\n        (zipmap (namespace-keys (str resolved-ns) (keys the-map))\n                (vals the-map)))\n      (let [resolved-ns (name prefix)]\n        (zipmap (namespace-keys resolved-ns (keys the-map))\n                (vals the-map))))))\n\n(defn parse-sharp\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [c (r/peek-char reader)]\n    (case c\n      nil (throw-reader ctx reader (str \"Unexpected EOF.\"))\n      \\\" (let [pat (read-regex-pattern ctx reader)]\n           (re-pattern pat))\n      \\( (let [fn-expr (parse-next ctx reader)]\n           (read-fn fn-expr))\n      \\' (do\n           (r/read-char reader) ;; ignore quote\n           (let [next-val (parse-next ctx reader)]\n             (when (kw-identical? ::eof next-val)\n               (throw-eof-while-reading ctx reader))\n             (list 'var next-val)))\n      \\= (do\n           (r/read-char reader) ;; ignore =\n           (let [next-val (parse-next ctx reader)]\n             (list 'read-eval next-val)))\n      \\{ (parse-set ctx reader)\n      \\_ (do\n           (r/read-char reader) ;; read _\n           (parse-next ctx reader) ;; ignore next form\n           reader)\n      \\? (do\n           (when-not (:read-cond ctx)\n             (throw-reader\n              ctx reader\n              (str \"Conditional read not allowed.\")))\n           (r/read-char reader) ;; ignore ?\n           (parse-reader-conditional ctx reader))\n      \\: (do\n           (r/read-char reader) ;; ignore :\n           (parse-namespaced-map ctx reader))\n      \\! (do\n           (parse-comment reader)\n           reader)\n      ;; catch-all\n      (if (dispatch-macro? c)\n        (do (r/unread reader \\#)\n            (edn-read ctx reader))\n        ;; reader tag\n        (let [suppress? (::suppress ctx)]\n          (if suppress?\n            (do\n              ;; read symbol\n              (parse-next ctx reader)\n              ;; read form\n              (parse-next ctx reader))\n            (let [sym (parse-next ctx reader)\n                  data (parse-next ctx reader)\n                  f (or (when-let [readers (:readers ctx)]\n                          (readers sym))\n                        #?(:clj (default-data-readers sym)\n                           :cljs (@*tag-table* sym)))]\n              (if f (f data)\n                  (throw (new #?(:clj Exception :cljs js/Error)\n                              (str \"No reader function for tag \" sym)))))))))))\n\n(defn throw-odd-map\n  [ctx #?(:cljs ^not-native reader :default reader) loc elements]\n  (throw-reader ctx reader\n                (str\n                 \"The map literal starting with \"\n                 (i/inspect (first elements))\n                 \" contains \"\n                 (count elements)\n                 \" form(s). Map literals must contain an even number of forms.\")\n                nil\n                loc))\n\n(defn parse-map\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [start-loc (location reader)\n        elements (parse-to-delimiter ctx reader \\})\n        c (count elements)]\n    (when (pos? c)\n      (when (odd? c)\n        (throw-odd-map ctx reader start-loc elements))\n      (let [ks (take-nth 2 elements)]\n        (when-not (apply distinct? ks)\n          (throw-dup-keys ctx reader start-loc :map ks))))\n    (apply hash-map elements)))\n\n(defn parse-keyword [ctx #?(:cljs ^not-native reader :default reader)]\n  (r/read-char reader) ;; ignore :\n  (let [init-c (r/read-char reader)]\n    (when (whitespace? init-c)\n      (throw-reader ctx reader (str \"Invalid token: :\")))\n    (let [^String token (read-token reader :keyword init-c)\n          auto-resolve? (identical? \\: (.charAt token 0))]\n      (if auto-resolve?\n        (let [token (if auto-resolve? (subs token 1) token)\n              [token-ns token-name] (parse-symbol token)]\n          (if token-ns\n            (let [f (get-auto-resolve ctx reader token)\n                  kns (auto-resolve ctx f (symbol token-ns) reader token-ns)]\n              (keyword (str kns) token-name))\n            ;; resolve current ns\n            (let [f (get-auto-resolve ctx reader token \"Use `:auto-resolve` + `:current` to resolve current namespace.\")\n                  kns (auto-resolve ctx f :current reader token \"Use `:auto-resolve` + `:current` to resolve current namespace.\")]\n              (keyword (str kns) token-name))))\n        (keyword token)))))\n\n(defn dispatch\n  [ctx #?(:cljs ^not-native reader :default reader) c]\n  (let [sharp? (= \\# c)]\n    (if sharp? (do\n                 (r/read-char reader) ;; ignore sharp\n                 (parse-sharp ctx reader))\n        (case c\n          nil ::eof\n          \\@ (do (r/read-char reader) ;; skip @\n                 (let [next-val (parse-next ctx reader)]\n                   (list 'clojure.core/deref next-val)))\n          \\' (do\n               (r/read-char reader) ;; skip '\n               (let [next-val (parse-next ctx reader)]\n                 (when (kw-identical? ::eof next-val)\n                   (throw-eof-while-reading ctx reader))\n                 (list 'quote next-val)))\n          \\` (do\n               (r/read-char reader) ;; skip `\n               (let [next-val (parse-next ctx reader)\n                     gensyms (atom {})\n                     ctx (assoc ctx :gensyms gensyms)\n                     ret (syntax-quote ctx reader next-val)]\n                 ret))\n          \\~ (do\n               (r/read-char reader) ;; skip `\n               (let [nc (r/peek-char reader)]\n                 (if (identical? nc \\@)\n                   (do\n                     (r/read-char reader) ;; ignore @\n                     (let [next-val (parse-next ctx reader)]\n                       (list 'clojure.core/unquote-splicing next-val)))\n                   (let [next-val (parse-next ctx reader)]\n                     (list 'clojure.core/unquote next-val)))))\n          \\( (parse-list ctx reader)\n          \\[ (parse-to-delimiter ctx reader \\])\n          \\{ (parse-map ctx reader)\n          (\\} \\] \\)) (let [expected (::expected-delimiter ctx)]\n                       (if (not= expected c)\n                         (let [loc (location reader)]\n                           (r/read-char reader) ;; ignore unexpected\n                           ;; delimiter to be able to\n                           ;; continue reading, fix for\n                           ;; babashka socket REPL\n                           (throw-reader ctx reader\n                                         (str \"Unmatched delimiter: \" c\n                                              (when expected\n                                                (str \", expected: \" expected\n                                                     (when-let [{:keys [:line :column :char]} (::opened-delimiter ctx)]\n                                                       (str \" to match \" char \" at \" [line column])))))\n                                         ctx\n                                         loc))\n                         (do\n                           ;; read delimiter\n                           (r/read-char reader)\n                           ::expected-delimiter)))\n          \\; (parse-comment reader)\n          \\^ (do\n               (r/read-char reader) ;; ignore ^\n               (let [meta-val (parse-next ctx reader true)\n                     val-val (vary-meta (parse-next ctx reader)\n                                        merge meta-val)]\n                 val-val))\n          \\: (parse-keyword ctx reader)\n          (edn-read ctx reader)))))\n\n(defn desugar-meta\n  \"Resolves syntactical sugar in metadata\" ;; could be combined with some other desugar?\n  ([f]\n   (cond\n     (keyword? f) {f true}\n     (symbol? f)  {:tag f}\n     (string? f)  {:tag f}\n     :else        f)))\n\n(defn iobj? [obj]\n  #?(:clj\n     (instance? clojure.lang.IObj obj)\n     :cljs (satisfies? IWithMeta obj)))\n\n(defn parse-next\n  ([ctx reader] (parse-next ctx reader nil))\n  ([ctx reader desugar]\n   (if-let [c (and (skip-whitespace ctx reader)\n                   (r/peek-char reader))]\n     (let [loc (location reader)\n           log? (:source ctx)\n           buf (fn [] (str (:buffer @#?(:clj (.source-log-frames ^SourceLoggingPushbackReader reader)\n                                        :cljs (.-frames reader)))))\n           offset (when log? (count (buf)))\n           obj (if log?\n                 #?(:clj (r/log-source reader (dispatch ctx reader c))\n                    :cljs (r/log-source* reader #(dispatch ctx reader c)))\n                 (dispatch ctx reader c))]\n       (if (identical? reader obj)\n         (recur ctx reader desugar)\n         (if (kw-identical? ::expected-delimiter obj)\n           obj\n           (let [iobj?? (iobj? obj)\n                 src (when log?\n                       (.trim (subs (buf) offset)))\n                 loc? (or (and iobj??\n                               (or (symbol? obj)\n                                   (seq? obj))))\n                 line (when loc? (:line loc))\n                 column (when loc? (:column loc))\n                 obj (if desugar (desugar-meta obj) obj)\n                 obj (cond loc? (vary-meta obj\n                                           #(cond-> %\n                                              ;; Note: using 3-arity of assoc, because faster\n                                              loc? (-> (assoc :line line)\n                                                       (assoc :column column))\n                                              src (assoc :source src)))\n                           :else obj)]\n             obj))))\n     ::eof)))\n\n(defn string-reader\n  \"Create reader for strings.\"\n  [s]\n  (r/indexing-push-back-reader\n   (r/string-push-back-reader s)))\n\n(defn parse-string [s opts]\n  (let [src? (:source opts)\n        r (if src? (r/source-logging-push-back-reader s)\n              (string-reader s))\n        ctx (assoc opts ::expected-delimiter nil)\n        v (parse-next ctx r)]\n    (if (kw-identical? ::eof v) nil v)))\n\n(defn parse-string-all [s opts]\n  (let [^Closeable r (string-reader s)\n        ctx (assoc opts ::expected-delimiter nil)]\n    (loop [ret (transient [])]\n      (let [next-val (parse-next ctx r)]\n        (if (kw-identical? ::eof next-val)\n          (persistent! ret)\n          (recur (conj! ret next-val)))))))\n\n(defn reader\n  [x]\n  #?(:clj (r/indexing-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/indexing-push-back-reader pushback-reader))))\n\n(defn get-line-number [reader]\n  (r/get-line-number reader))\n\n(defn get-column-number [reader]\n  (r/get-column-number reader))\n\n(defn source-logging-reader\n  [x]\n  #?(:clj (r/source-logging-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/source-logging-push-back-reader pushback-reader))))\n\n;;;; Scratch\n\n(comment\n  )\n"]}