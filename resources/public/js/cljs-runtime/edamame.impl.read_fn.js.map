{"version":3,"sources":["edamame/impl/read_fn.cljc"],"mappings":"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","names":["edamame.impl.read-fn/walk*","inner","outer","form","cljs.core/list?","cljs.core/with-meta","G__32260","cljs.core.apply","cljs.core/list","cljs.core.map","cljs.core/meta","cljs.core/map-entry?","G__32261","cljs.core/MapEntry","G__32262","cljs.core/key","G__32263","cljs.core/val","cljs.core/seq?","G__32270","cljs.core.doall","cljs.core/record?","G__32271","cljs.core.reduce","r","x","cljs.core.conj","cljs.core/coll?","G__32272","cljs.core.into","cljs.core/empty","edamame.impl.read-fn/postwalk*","f","cljs.core.partial","edamame.impl.read-fn/read-fn","expr","map__32296","cljs.core/deref","cljs.core/--destructure-map","max-fixed","cljs.core.get","var-args?","state","cljs.core/volatile!","elt","cljs.core/Symbol","temp__5751__auto__","vec__32306","cljs.core.nth","_","m","cljs.core/re-matches","cljs.core/name","cljs.core/empty?","cljs.core.update","cljs.core/max","cljs.core._EQ_","cljs.core.assoc","n","js/parseInt","fixed-names","p1__32295#","cljs.core.symbol","cljs.core.range","var-args-sym","arg-list","cljs.core/vec","cljs.core.concat","cljs.core/List"],"sourcesContent":["(ns edamame.impl.read-fn\n  {:no-doc true})\n\n(defn walk*\n  \"Preserves metadata, unlike clojure.walk/walk.\"\n  [inner outer form]\n  (cond\n    (list? form) (with-meta (outer (apply list (map inner form)))\n                   (meta form))\n    #?(:clj (instance? clojure.lang.IMapEntry form) :cljs (map-entry? form))\n    (outer #?(:clj (clojure.lang.MapEntry/create (inner (key form)) (inner (val form)))\n              :cljs (MapEntry. (inner (key form)) (inner (val form)) nil)))\n    (seq? form) (with-meta (outer (doall (map inner form)))\n                  (meta form))\n    #?(:clj (instance? clojure.lang.IRecord form)\n       :cljs (record? form))\n    (outer (reduce (fn [r x] (conj r (inner x))) form form))\n    (coll? form) (outer (into (empty form) (map inner form)))\n    :else (outer form)))\n\n(defn postwalk*\n  \"Preserves metadata, unlike clojure.walk/postwalk.\"\n  [f form]\n  (walk* (partial postwalk* f) f form))\n\n(defn read-fn [expr]\n  (let [state (volatile! {:max-fixed 0 :var-args? false})\n        expr (postwalk* (fn [elt]\n                          (if (symbol? elt)\n                            (if-let [[_ m] (re-matches #\"^%(.*)\" (name elt))]\n                              (cond (empty? m)\n                                    (do (vswap! state update :max-fixed max 1)\n                                        '%1)\n                                    (= \"&\" m)\n                                    (do (vswap! state assoc :var-args? true)\n                                        elt)\n                                    :else (do (let [n #?(:clj (Integer/parseInt m)\n                                                         :cljs (js/parseInt m))]\n                                                (vswap! state update :max-fixed max n))\n                                              elt))\n                              elt)\n                            elt))\n                        expr)\n        {:keys [:max-fixed :var-args?]} @state\n        fixed-names (map #(symbol (str \"%\" %)) (range 1 (inc max-fixed)))\n        var-args-sym '%&\n        arg-list (vec (concat fixed-names (when var-args?\n                                            ['& var-args-sym])))\n        form (list 'fn* arg-list expr)]\n    form))\n"]}