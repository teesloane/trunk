{"version":3,"sources":["rewrite_clj/parser/core.cljs"],"mappings":"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","names":["rewrite-clj.parser.core/*delimiter*","rewrite-clj.parser.core/parse-delim","reader","delimiter","rewrite-clj.reader/ignore","*delimiter*-orig-val__29793","*delimiter*-temp-val__29794","p1__29792#","rewrite-clj.parser.core/parse-next","rewrite-clj.reader/read-repeatedly","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","rewrite-clj.parser.core/parse-printables","p__29799","vec__29800","cljs.core.nth","seq29795","G__29796","cljs.core/first","cljs.core/next","G__29797","G__29798","self__4805__auto__","node-tag","n","ignore?","rewrite-clj.reader/read-n","cljs.core/complement","rewrite-clj.node/printable-only?","rewrite-clj.parser.core/parse-meta","G__29803","rewrite-clj.node/meta-node","rewrite-clj.parser.core/parse-eof","rewrite-clj.reader/throw-reader","rewrite-clj.parser.core/parse-list","G__29804","rewrite-clj.node/list-node","rewrite-clj.parser.core/parse-vector","G__29805","rewrite-clj.node/vector-node","rewrite-clj.parser.core/parse-map","G__29806","rewrite-clj.node/map-node","rewrite-clj.parser.core/parse-conditional","rewrite-clj.reader/next","G__29807","rewrite-clj.node/reader-macro-node","read1","cljs.core/cons","G__29808","rewrite-clj.reader/peek","G__29809","rewrite-clj.node/token-node","cljs.core.symbol","G__29810","G__29811","G__29812","rewrite-clj.reader/unread","rewrite-clj.parser.core/parse-sharp","G__29813","cljs.core._EQ_","G__29816","rewrite-clj.node/set-node","G__29815","rewrite-clj.node/fn-node","rewrite-clj.parser.string/parse-regex","G__29818","rewrite_clj.parser.core.parse_printables","G__29814","rewrite-clj.node/var-node","G__29817","rewrite-clj.node/eval-node","G__29819","rewrite-clj.node/uneval-node","G__29820","rewrite-clj.parser.core/parse-unmatched","rewrite_clj.reader.throw_reader","rewrite-clj.parser.core/parse-deref","G__29825","rewrite-clj.node/deref-node","rewrite-clj.parser.core/parse-quote","G__29827","rewrite-clj.node/quote-node","rewrite-clj.parser.core/parse-syntax-quote","G__29828","rewrite-clj.node/syntax-quote-node","rewrite-clj.parser.core/parse-unquote","c","G__29829","rewrite-clj.node/unquote-splicing-node","G__29830","rewrite-clj.node/unquote-node","rewrite-clj.parser.core/parse-comment","G__29837","rewrite-clj.node/comment-node","rewrite-clj.reader/read-include-linebreak","rewrite-clj.parser.core/dispatch","rewrite-clj.reader/whitespace?","rewrite-clj.parser.whitespace/parse-whitespace","rewrite-clj.parser.string/parse-string","rewrite-clj.parser.keyword/parse-keyword","rewrite-clj.parser.token/parse-token","rdr","rewrite-clj.reader/read-with-meta"],"sourcesContent":["(ns rewrite-clj.parser.core\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as reader]\n            [rewrite-clj.parser.keyword :refer [parse-keyword]]\n            [rewrite-clj.parser.string :refer [parse-string parse-regex]]\n            [rewrite-clj.parser.token :refer [parse-token]]\n            [rewrite-clj.parser.whitespace :refer [parse-whitespace]]\n            [cljs.tools.reader.reader-types :refer [peek-char]]))\n\n;; ## Base Parser\n\n(def ^:dynamic ^:private *delimiter*\n  nil)\n\n\n(declare parse-next)\n\n\n(defn- parse-delim\n  [^not-native reader delimiter]\n  (reader/ignore reader)\n  (->> #(binding [*delimiter* delimiter]\n          (parse-next %))\n       (reader/read-repeatedly reader)))\n\n(defn- parse-printables\n  [^not-native reader node-tag n & [ignore?]]\n  (when ignore?\n    (reader/ignore reader))\n  (reader/read-n\n    reader\n    node-tag\n    parse-next\n    (complement node/printable-only?)\n    n))\n\n\n(defn- parse-meta\n  [^not-native reader]\n  (reader/ignore reader)\n  (node/meta-node (parse-printables reader :meta 2)))\n\n\n(defn- parse-eof\n  [^not-native reader]\n  (when *delimiter*\n    (reader/throw-reader reader \"Unexpected EOF.\")))\n\n;; ### Seqs\n\n(defn- parse-list\n  [^not-native reader]\n  (node/list-node (parse-delim reader \\))))\n\n(defn- parse-vector\n  [^not-native reader]\n  (node/vector-node (parse-delim reader \\])))\n\n(defn- parse-map\n  [^not-native reader]\n  (node/map-node (parse-delim reader \\})))\n\n\n;; ### Reader Specialities\n\n\n(defn- parse-conditional [reader]\n  ;; we need to examine the next character, so consume one (known \\?)\n  (reader/next reader)\n  ;; we will always have a reader-macro-node as the result\n  (node/reader-macro-node\n    (let [read1 (fn [] (parse-printables reader :reader-macro 1))]\n      (cons (case (reader/peek reader)\n              ;; the easy case, just emit a token\n              \\( (node/token-node (symbol \"?\"))\n\n              ;; the harder case, match \\@, consume it and emit the token\n              \\@ (do (reader/next reader)\n                   (node/token-node (symbol \"?@\")))\n\n              ;; otherwise no idea what we're reading but its \\? prefixed\n              (do (reader/unread reader \\?)\n                (first (read1))))\n            (read1)))))\n\n\n\n(defn- parse-sharp\n  [^not-native reader]\n  (reader/ignore reader)\n  (case (peek-char reader)\n    nil (reader/throw-reader reader \"Unexpected EOF.\")\n    \\{ (node/set-node (parse-delim reader \\}))\n    \\( (node/fn-node (parse-delim reader \\)))\n    \\\" (parse-regex reader)\n    \\^ (node/meta-node (parse-printables reader :meta 2 true))\n    \\' (node/var-node (parse-printables reader :var 1 true))\n    \\= (node/eval-node (parse-printables reader :eval 1 true))\n    \\_ (node/uneval-node (parse-printables reader :uneval 1 true))\n    \\? (parse-conditional reader)\n    (node/reader-macro-node (parse-printables reader :reader-macro 2))))\n\n\n\n\n(defn- parse-unmatched\n  [^not-native reader]\n  (reader/throw-reader\n    reader\n    \"Unmatched delimiter: %s\"\n    (peek-char reader)))\n\n\n(defn- parse-deref\n  [^not-native reader]\n  (node/deref-node (parse-printables reader :deref 1 true)))\n\n;; ## Quotes\n\n(defn- parse-quote\n  [^not-native reader]\n  (node/quote-node (parse-printables reader :quote 1 true)))\n\n(defn- parse-syntax-quote\n  [^not-native reader]\n  (node/syntax-quote-node (parse-printables reader :syntax-quote 1 true)))\n\n(defn- parse-unquote\n  [^not-native reader]\n  (reader/ignore reader)\n  (let [c (peek-char reader)]\n    (if (= c \\@)\n      (node/unquote-splicing-node\n        (parse-printables reader :unquote 1 true))\n      (node/unquote-node\n        (parse-printables reader :unquote 1)))))\n\n(defn- parse-comment\n  [^not-native reader]\n  (reader/ignore reader)\n  (node/comment-node (reader/read-include-linebreak reader)))\n\n\n\n(defn- dispatch\n  [c]\n  (cond (nil? c)                        parse-eof\n        (identical? c *delimiter*)      reader/ignore\n        (reader/whitespace? c)          parse-whitespace\n        (identical? c \\^)               parse-meta\n        (identical? c \\#)               parse-sharp\n        (identical? c \\()               parse-list\n        (identical? c \\[)               parse-vector\n        (identical? c \\{)               parse-map\n        (identical? c \\})               parse-unmatched\n        (identical? c \\])               parse-unmatched\n        (identical? c \\))               parse-unmatched\n        (identical? c \\~)               parse-unquote\n        (identical? c \\')               parse-quote\n        (identical? c \\`)               parse-syntax-quote\n        (identical? c \\;)               parse-comment\n        (identical? c \\@)               parse-deref\n        (identical? c \\\")               parse-string\n        (identical? c \\:)               parse-keyword\n        :else                           parse-token))\n\n\n(defn parse-next\n  [^not-native rdr]\n  (reader/read-with-meta rdr (dispatch (peek-char rdr))))\n"]}