{"version":3,"sources":["sci/impl/doseq_macro.cljc"],"mappings":"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","names":["sci.impl.doseq-macro/assert-args","seq-exprs","_body-exprs","cljs.core/vector?","js/Error","cljs.core/even?","cljs.core/count","p__31219","vec__31221","seq__31222","cljs.core/seq","first__31223","cljs.core/first","cljs.core/next","sci.impl.doseq-macro/expand-doseq","_","body","step","recform","exprs","cljs.core/not","cljs.core.sequence","cljs.core.concat","cljs.core/List","k","v","cljs.core/second","cljs.core/Keyword","steppair","cljs.core/nnext","needrec","subform","cljs.core._EQ_","cljs.core/vec","seq-","cljs.core.gensym","chunk-","cljs.core/with-meta","count-","i-","sci.impl.utils/allowed-recur","recform-chunk","steppair-chunk","subform-chunk","sci.impl.utils/allowed-loop","cljs.core.nth"],"sourcesContent":["(ns sci.impl.doseq-macro\n  {:no-doc true}\n  (:require [sci.impl.utils :refer [allowed-loop allowed-recur]]))\n\n;; based on the source of clojure.core/doseq\n\n(defn assert-args [seq-exprs _body-exprs]\n  (when-not (vector? seq-exprs)\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"doseq requires a vector for its binding\")))\n  (when-not (even? (count seq-exprs))\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"doseq requires an even number of forms in binding vector\"))))\n\n(defn expand-doseq\n  [_ [_ seq-exprs & body]]\n  (assert-args seq-exprs body)\n  (let [step (fn step [recform exprs]\n               (if-not exprs\n                 [true `(~'do ~@body)]\n                 (let [k (first exprs)\n                       v (second exprs)]\n                   (if (keyword? k)\n                     (let [steppair (step recform (nnext exprs))\n                           needrec (steppair 0)\n                           subform (steppair 1)]\n                       (cond\n                         (= k :let) [needrec `(let ~v ~subform)]\n                         (= k :while) [false `(~'when ~v\n                                               ~subform\n                                               ~@(when needrec [recform]))]\n                         (= k :when) [false `(if ~v\n                                               (do\n                                                 ~subform\n                                                 ~@(when needrec [recform]))\n                                               ~recform)]))\n                     (let [seq- (gensym \"seq_\")\n                           chunk- (with-meta (gensym \"chunk_\")\n                                    {:tag 'clojure.lang.IChunk})\n                           count- (gensym \"count_\")\n                           i- (gensym \"i_\")\n                           recform `(~allowed-recur (next ~seq-) nil 0 0)\n                           steppair (step recform (nnext exprs))\n                           needrec (steppair 0)\n                           subform (steppair 1)\n                           recform-chunk\n                           `(~allowed-recur ~seq- ~chunk- ~count- (unchecked-inc ~i-))\n                           steppair-chunk (step recform-chunk (nnext exprs))\n                           subform-chunk (steppair-chunk 1)]\n                       [true\n                        `(~allowed-loop [~seq- (seq ~v), ~chunk- nil,\n                                         ~count- 0, ~i- 0]\n                          (if (< ~i- ~count-)\n                            (let [~k (nth ~chunk- ~i-)]\n                              ~subform-chunk\n                              ~@(when needrec [recform-chunk]))\n                            (let [~seq- (seq ~seq-)]\n                              (~'when ~seq-\n                               (if (chunked-seq? ~seq-)\n                                 (let [c# (chunk-first ~seq-)]\n                                   (~allowed-recur (chunk-rest ~seq-) c#\n                                          (int (count c#)) (int 0)))\n                                 (let [~k (first ~seq-)]\n                                   ~subform\n                                   ~@(when needrec [recform])))))))])))))]\n    (nth (step nil (seq seq-exprs)) 1)))\n"]}