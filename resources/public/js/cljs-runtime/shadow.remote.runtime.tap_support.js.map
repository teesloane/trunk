{"version":3,"sources":["shadow/remote/runtime/tap_support.cljc"],"mappings":"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","names":["p__51719","p__51720","map__51721","cljs.core/--destructure-map","cljs.core.get","map__51722","shadow.remote.runtime.tap-support/tap-subscribe","subs-ref","obj-support","runtime","svc","from","summary","history","num","msg","cljs.core.swap_BANG_","cljs.core/assoc","shadow.remote.runtime.shared/reply","shadow.remote.runtime.obj-support/get-tap-history","cljs.core.map","oid","shadow.remote.runtime.obj-support/obj-describe*","cljs.core.into","p__51727","p__51728","map__51729","map__51730","shadow.remote.runtime.tap-support/tap-unsubscribe","cljs.core/dissoc","p__51733","p__51734","map__51735","map__51736","shadow.remote.runtime.tap-support/request-tap-history","tap-ids","p__51738","map__51739","shadow.remote.runtime.tap-support/tool-disconnect","tid","shadow.remote.runtime.tap-support/start","cljs.core.atom","tap-fn","obj","shadow.remote.runtime.obj-support/register","seq__51749","cljs.core/seq","cljs.core/deref","chunk__51750","count__51751","i__51752","vec__51763","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__51767","cljs.core/first","cljs.core/next","tap-config","shadow.remote.runtime.api/relay-msg","p1__51742#","p1__51743#","p1__51746#","p1__51747#","shadow.remote.runtime.api/add-extension","cljs.core/add-tap","p__51770","map__51774","shadow.remote.runtime.tap-support/stop","cljs.core/remove-tap","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.tap-support\n  (:require\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.obj-support :as obj]))\n\n(defn tap-subscribe\n  [{:keys [subs-ref obj-support runtime] :as svc}\n   {:keys [from summary history num] :or {num 10} :as msg}]\n  (swap! subs-ref assoc from msg)\n  ;; FIXME: should this always confirm?\n  ;; tool may want to do stuff even if it didn't request a history?\n  ;; but it can do so optimistically and just receive taps?\n\n  ;; we need an option to send out the history because of concurrency issues\n  ;; otherwise it may do a :request-tap-history before :tap-subscribe\n  ;; which may cause it to miss taps inbetween\n  ;; or after which means it may have received taps before receiving the history\n  (when history\n    (shared/reply runtime msg\n      {:op :tap-subscribed\n       :history (->> (obj/get-tap-history obj-support num)\n                     ;; FIXME: only send summary if requested\n                     (map (fn [oid] {:oid oid :summary (obj/obj-describe* obj-support oid)}))\n                     (into []))})))\n\n(defn tap-unsubscribe\n  [{:keys [subs-ref]} {:keys [from]}]\n  (swap! subs-ref dissoc from))\n\n(defn request-tap-history\n  [{:keys [obj-support runtime]}\n   {:keys [num] :or {num 10} :as msg}]\n  (let [tap-ids (obj/get-tap-history obj-support num)]\n    (shared/reply runtime msg {:op :tap-history\n                               :oids tap-ids})))\n\n(defn tool-disconnect\n  [{:keys [subs-ref] :as svc} tid]\n  (swap! subs-ref dissoc tid))\n\n(defn start [runtime obj-support]\n  (let [subs-ref\n        (atom {})\n\n        tap-fn\n        (fn runtime-tap [obj]\n          (when (some? obj)\n            (let [oid (obj/register obj-support obj {:from :tap})]\n              (doseq [[tid tap-config] @subs-ref]\n                (p/relay-msg runtime {:op :tap :to tid :oid oid})))))\n\n        svc\n        {:runtime runtime\n         :obj-support obj-support\n         :tap-fn tap-fn\n         :subs-ref subs-ref}]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops\n       ;; would be nicer to just pass tap-subscribe and have the runtime\n       ;; automatically pass extra args. but this makes everything REPL unfriendly\n       ;; and will require a runtime restart for every op change\n       ;; this way only adding ops requires a restart\n       {:tap-subscribe #(tap-subscribe svc %)\n        :tap-unsubscribe #(tap-unsubscribe svc %)\n        :request-tap-history #(request-tap-history svc %)}\n       :on-tool-disconnect #(tool-disconnect svc %)})\n\n    (add-tap tap-fn)\n    svc))\n\n(defn stop [{:keys [tap-fn runtime] :as svc}]\n  (remove-tap tap-fn)\n  (p/del-extension runtime ::ext))\n"]}