{"version":3,"sources":["sci/impl/utils.cljc"],"mappings":"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","names":["cljs.core.derive","sci.impl.utils/constant?","x","cljs.core/Keyword","cljs.core/boolean?","sci.impl.utils/eval?","G__31137","cljs.core/meta","sci.impl.utils/kw-identical?","cljs.core/keyword-identical?","var_args","G__31143","sci.impl.utils/mark-eval-call","js/Error","expr","cljs.core.vary_meta","m","cljs.core.assoc","cljs.core/deref","sci.impl.vars/current-ns","sci.impl.vars/current-file","extra-key","extra-val","sci.impl.utils/mark-eval","G__31150","sci.impl.utils/throw-error-with-location","msg","iobj","sci.impl.utils.throw_error_with_location","data","map__31156","cljs.core/--destructure-map","line","cljs.core.get","column","file","cljs.core.ex_info","cljs.core.merge","sci.impl.utils/*in-try*","sci.impl.utils/macro?","f","temp__5753__auto__","or__4212__auto__","sci.impl.utils/needs-ctx","cljs.core.symbol","sci.impl.utils/evaluate","sci.impl.utils/rethrow-with-location-of-node","ctx","e","node","cljs.core/seqable?","cljs.core/first","fm","G__31165","op","special?","cljs.core/Symbol","cljs.core/not","cljs.core.swap_BANG_","cljs.core/update-in","vt","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj","cljs.core/volatile!","cljs.core/List","d","cljs.core/ex-data","cljs.core.isa_QMARK_","map__31167","ex-msg","and__4210__auto__","clojure.string/replace","new-exception","base","cljs.core/Delay","v","cljs.core.get_in","phase","sci.impl.utils/iobj?","obj","cljs.core/PROTOCOL_SENTINEL","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","sci.impl.utils/vary-meta*","seq31170","G__31171","cljs.core/next","G__31172","self__4805__auto__","args","cljs.core.apply","cljs.core/vary-meta","sci.impl.utils/merge-meta","temp__5751__auto__","cljs.core/with-meta","sci.impl.utils/strip-core-ns","sym","G__31176","cljs.core/namespace","cljs.core/name","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/walk*","inner","form","cljs.core/list?","cljs.core/list","cljs.core.map","cljs.core/map-entry?","cljs.core/MapEntry","G__31177","cljs.core/key","G__31178","cljs.core/val","cljs.core/seq?","cljs.core.doall","cljs.core/record?","cljs.core.reduce","r","cljs.core/coll?","cljs.core.into","cljs.core/empty","sci.impl.utils/prewalk","cljs.core.partial","sci.impl.utils/namespace-object","env","ns-sym","create?","attr-map","env*","ns-map","ns-obj","sci.impl.vars/->SciNamespace","cljs.core/assoc-in","sci.impl.utils/set-namespace!","sci.impl.types/setVal","sci.impl.utils/eval-form-state","sci.impl.utils/eval-require-state","sci.impl.utils/eval-use-state","sci.impl.utils/eval-resolve-state","sci.impl.utils/eval-refer-state","sci.impl.utils/macroexpand*","sci.impl.utils/macroexpand-1*","sci.impl.utils/eval*","sci.impl.utils/eval-do*","sci.impl.utils/eval-fn","sci.impl.utils/eval-string*","sci.impl.utils/lookup","sci.impl.utils/split-when","pred","coll","cljs.core/LazySeq","s","cljs.core/seq","fst","cljs.core/complement","run","cljs.core/cons","p1__31181#","cljs.core.take_while","G__31182","G__31183","cljs.core.drop","cljs.core/count","sci.impl.utils/ana-macros"],"sourcesContent":["(ns sci.impl.utils\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            [sci.impl.types :as t]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(derive :sci.error/realized-beyond-max :sci/error)\n(derive :sci.error/parse :sci/error)\n\n(defn constant? [x]\n  (or (number? x) (string? x) (keyword? x) (boolean? x)))\n\n(defn eval? [x]\n  (some-> x meta :sci.impl/op))\n\n(def kw-identical? #?(:clj identical? :cljs keyword-identical?))\n\n(defn mark-eval-call\n  ([expr]\n   (vary-meta\n    expr\n    (fn [m]\n      (-> m\n          (assoc :sci.impl/op :call)\n          (assoc :ns @vars/current-ns)\n          (assoc :file @vars/current-file)))))\n  ([expr extra-key extra-val]\n   (vary-meta\n    expr\n    (fn [m]\n      (-> m\n          (assoc :sci.impl/op :call)\n          (assoc :ns @vars/current-ns)\n          (assoc :file @vars/current-file)\n          (assoc extra-key extra-val))))))\n\n(defn mark-eval\n  [expr]\n  (vary-meta\n   expr\n   (fn [m]\n     (assoc m :sci.impl/op :eval))))\n\n(defn throw-error-with-location\n  ([msg iobj] (throw-error-with-location msg iobj {}))\n  ([msg iobj data]\n   (let [{:keys [:line :column :file]\n          :or {file @vars/current-file}} (meta iobj)]\n     (throw (ex-info msg (merge {:type :sci/error\n                                 :line line\n                                 :column column\n                                 :file file} data))))))\n\n(def ^:dynamic *in-try* false)\n\n(defn macro? [f]\n  (when-let [m (meta f)]\n    (or (:sci/macro m)\n        (:macro m))))\n\n(def needs-ctx (symbol \"needs-ctx\"))\n(def evaluate (symbol \"eval\"))\n\n(defn rethrow-with-location-of-node [ctx ^Throwable e node]\n  (let [m (meta node)\n        f (when (seqable? node) (first node))\n        fm (or (:sci.impl/f-meta node) (some-> f meta))\n        op (when fm (.get ^java.util.Map m :sci.impl/op))\n        special? (or\n                  ;; special call like def\n                  (and (symbol? f) (not op))\n                  ;; anonymous function\n                  (kw-identical? :fn op)\n                  ;; special thing like require\n                  (identical? needs-ctx op))]\n    (when (not special?)\n      (swap! (:env ctx) update-in [:sci.impl/callstack (:id ctx)]\n             (fn [vt]\n               (if vt\n                 (do (vswap! vt conj node)\n                     vt)\n                 (volatile! (list node))))))\n    (if-not *in-try*\n      (let [d (ex-data e)]\n        (if (isa? (:type d) :sci/error)\n          (throw e)\n          (let [ex-msg #?(:clj (or (.getMessage e))\n                          :cljs (.-message e))\n                {:keys [:line :column :file]\n                 :or {line (:line ctx)\n                      column (:column ctx)}} (meta node)\n                ex-msg (if (and ex-msg (:name fm))\n                         (str/replace ex-msg #\"(sci\\.impl\\.)?fns/fun/[a-zA-Z0-9-]+--\\d+\"\n                                      (str (:name fm)))\n                         ex-msg)]\n            (if (and line column)\n              (let [m ex-msg\n                    new-exception\n                    (let [d (ex-data e)\n                          base {:type :sci/error\n                                :line line\n                                :column column\n                                :message m\n                                :sci.impl/callstack (delay (when-let [v (get-in @(:env ctx) [:sci.impl/callstack (:id ctx)])]\n                                                    @v))\n                                :file file\n                                :locals (:bindings ctx)}\n                          phase (:phase ctx)\n                          base (if phase\n                                 (assoc base :phase phase)\n                                 base)]\n                      (ex-info m (merge base d) e))]\n                (throw new-exception))\n              (throw e))))\n        (throw e))\n      (throw e))))\n\n(defn iobj? [obj]\n  (and #?(:clj (instance? clojure.lang.IObj obj)\n          :cljs (implements? IWithMeta obj))\n       (meta obj)))\n\n(defn vary-meta*\n  \"Only adds metadata to obj if d is not nil and if obj already has meta\"\n  [obj f & args]\n  (if (iobj? obj)\n    (apply vary-meta obj f args)\n    obj))\n\n(defn merge-meta\n  \"Only adds metadata to obj if d is not nil and if meta on obj isn't already nil.\"\n  [obj d]\n  (if (and d #?(:clj (instance? clojure.lang.IObj obj)\n                :cljs (implements? IWithMeta obj)))\n    (if-let [m (meta obj)]\n      (do\n        nil\n        ;; this should not happen, turn on for debugging\n        #_(when (identical? m d) (prn :identical obj d m))\n        (with-meta obj (merge m d)))\n      obj)\n    obj))\n\n(defn strip-core-ns [sym]\n  (case (namespace sym)\n    (\"clojure.core\" \"cljs.core\") (symbol (name sym))\n    sym))\n\n(def allowed-loop (symbol \"loop\"))\n(def allowed-recur (symbol \"recur\"))\n\n(defn walk*\n  [inner form]\n  (cond\n    (:sci.impl/op (meta form)) form\n    (list? form) (with-meta (apply list (map inner form))\n                   (meta form))\n    #?(:clj (instance? clojure.lang.IMapEntry form) :cljs (map-entry? form))\n    #?(:clj (clojure.lang.MapEntry/create (inner (key form)) (inner (val form)))\n       :cljs (MapEntry. (inner (key form)) (inner (val form)) nil))\n    (seq? form) (with-meta (doall (map inner form))\n                  (meta form))\n    #?(:clj (instance? clojure.lang.IRecord form)\n       :cljs (record? form))\n    (reduce (fn [r x] (conj r (inner x))) form form)\n    (coll? form) (into (empty form) (map inner form))\n    :else form))\n\n(defn prewalk\n  \"Prewalk with metadata preservation. Does not prewalk :sci.impl/op nodes.\"\n  [f form]\n  (walk* (partial prewalk f) (f form)))\n\n(defn namespace-object\n  \"Fetches namespaces from env if it exists. Else, if `create?`,\n  produces one regardless of the existince of the namespace in env and\n  adds it to env before returning it.\"\n  [env ns-sym create? attr-map]\n  (let [env* @env\n        ns-map (get-in env* [:namespaces ns-sym])]\n    (or (:obj ns-map)\n        (when (or ns-map create?)\n          (let [ns-obj (vars/->SciNamespace ns-sym attr-map)]\n            (swap! env assoc-in [:namespaces ns-sym :obj] ns-obj)\n            ns-obj)))))\n\n(defn set-namespace! [ctx ns-sym attr-map]\n  (let [env (:env ctx)\n        attr-map (merge (meta ns-sym) attr-map)\n        ns-obj (namespace-object env ns-sym true attr-map)]\n    (t/setVal vars/current-ns ns-obj)))\n\n(def eval-form-state (volatile! nil))\n(def eval-require-state (volatile! nil))\n(def eval-use-state (volatile! nil))\n(def eval-resolve-state (volatile! nil))\n(def eval-refer-state (volatile! nil))\n(def macroexpand* (volatile! nil))\n(def macroexpand-1* (volatile! nil))\n(def eval* (volatile! nil))\n(def eval-do* (volatile! nil))\n(def eval-fn (volatile! nil))\n(def eval-string* (volatile! nil))\n(def lookup (volatile! nil))\n\n(defn split-when\n  \"Like partition-by but splits collection only when `pred` returns\n  a truthy value. E.g. `(split-when odd? [1 2 3 4 5]) => ((1 2) (3 4) (5))`\"\n  [pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [fst (first s)\n           f (complement pred)\n           run (cons fst (take-while #(f %) (next s)))]\n       (cons run (split-when pred (lazy-seq (drop (count run) s))))))))\n\n(def ana-macros\n  '#{do if and or let fn fn* def defn\n     comment loop lazy-seq for doseq case try defmacro\n     declare expand-dot* expand-constructor new . import in-ns ns var\n     set! resolve #_#_macroexpand-1 macroexpand})\n"]}