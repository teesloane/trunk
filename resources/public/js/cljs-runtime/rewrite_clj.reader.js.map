{"version":3,"sources":["rewrite_clj/reader.cljs"],"mappings":"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","names":["rewrite-clj.reader/read-char","cljs.tools.reader.reader-types/read-char","rewrite-clj.reader/get-column-number","cljs.tools.reader.reader-types/get-column-number","rewrite-clj.reader/get-line-number","cljs.tools.reader.reader-types/get-line-number","rewrite-clj.reader/peek-char","cljs.tools.reader.reader-types/peek-char","rewrite-clj.reader/indexing-push-back-reader","cljs.tools.reader.reader-types/indexing-push-back-reader","rewrite-clj.reader/unread","cljs.tools.reader.reader-types/unread","rewrite-clj.reader/read-string","cljs.tools.reader/read-string","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","rewrite-clj.reader/throw-reader","seq29716","G__29717","cljs.core/first","cljs.core/next","G__29718","self__4805__auto__","reader","fmt","data","c","l","js/Error","rewrite-clj.reader/boundary?","rewrite-clj.reader/whitespace?","ch","rewrite-clj.reader/linebreak?","rewrite-clj.reader/space?","rewrite-clj.reader/whitespace-or-boundary?","rewrite-clj.reader/buf","goog.string/StringBuffer","G__29720","rewrite-clj.reader/read-while","p?","rewrite_clj.reader.read_while","cljs.core/not","eof?","temp__5751__auto__","rewrite-clj.reader/read-until","cljs.core/complement","rewrite-clj.reader/read-include-linebreak","p1__29721#","rewrite-clj.reader/string->edn","s","rewrite-clj.reader/ignore","rewrite-clj.reader/next","rewrite-clj.reader/peek","rewrite-clj.reader/read-with-meta","read-fn","row","col","entry","end-row","end-col","cljs.core._EQ_","rewrite-clj.reader/read-repeatedly","cljs.core.repeatedly","cljs.core.take_while","cljs.core/identity","cljs.core.doall","rewrite-clj.reader/read-n","node-tag","n","vs","v","cljs.core.conj","rewrite_clj.reader.throw_reader","rewrite-clj.reader/re-matches*","re","matches","rewrite-clj.reader/read-keyword","initch","tok","G__29738","G__29739","G__29740","fexpr__29737","cljs.tools.reader/read-token","a","cljs.core/re-pattern","token","ns","name","cljs.tools.reader.impl.errors.reader_error","cljs.core.keyword"],"sourcesContent":["(ns rewrite-clj.reader\n  (:refer-clojure :exclude [peek next])\n  (:require [cljs.tools.reader :as r]\n            [cljs.tools.reader.reader-types :as reader-types]\n            [cljs.tools.reader.impl.commons :refer [parse-symbol]]\n            [goog.string :as gstring]\n            [rewrite-clj.node.protocols :as nd]))\n\n(def read-char reader-types/read-char)\n(def get-column-number reader-types/get-column-number)\n(def get-line-number reader-types/get-line-number)\n(def peek-char reader-types/peek-char)\n(def indexing-push-back-reader reader-types/indexing-push-back-reader)\n(def unread reader-types/unread)\n(def read-string r/read-string)\n\n;; TODO: try to get goog.string.format up and running !\n(defn throw-reader\n  \"Throw reader exception, including line/column.\"\n  [^not-native reader fmt & data]\n  (let [c (get-column-number reader)\n        l (get-line-number reader)]\n    (throw\n      (js/Error.\n        (str data fmt\n             \" [at line \" l \", column \" c \"]\")))))\n\n\n(defn boundary?\n  \"Check whether a given char is a token boundary.\"\n  [c]\n  (< -1 (.indexOf #js [\\\" \\: \\; \\' \\@ \\^ \\` \\~\n                       \\( \\) \\[ \\] \\{ \\} \\\\ nil] c)))\n\n(defn ^boolean whitespace?\n  \"Checks whether a given character is whitespace\"\n  [ch]\n  ;(or (gstring/isBreakingWhitespace ch) (identical? \\, ch))\n  (< -1 (.indexOf #js [\\return \\newline \\tab \\space \",\"] ch)))\n\n(defn ^boolean linebreak?\n  \"Checks whether the character is a newline\"\n  [c]\n  (< -1 (.indexOf #js [\\return \\newline] c)))\n\n(defn ^boolean space?\n  \"Checks whether the character is a space\"\n  [c]\n  (< -1 (.indexOf #js [\\tab \\space \",\"] c)))\n\n(defn ^boolean whitespace-or-boundary?\n  [c]\n  (or (whitespace? c) (boundary? c)))\n\n(def buf (gstring/StringBuffer. \"\"))\n\n(defn read-while\n  \"Read while the chars fulfill the given condition. Ignores\n  the unmatching char.\"\n  ([^not-native reader p?]\n   (read-while reader p? (not (p? nil))))\n\n  ([^not-native reader p? eof?]\n    (.clear buf)\n    (loop []\n      (if-let [c (read-char reader)]\n        (if (p? c)\n          (do\n            (.append buf c)\n            (recur))\n          (do\n            (unread reader c)\n            (.toString buf)))\n        (if eof?\n          (.toString buf)\n          (throw-reader reader \"Unexpected EOF.\"))))))\n\n(defn read-until\n  \"Read until a char fulfills the given condition. Ignores the\n   matching char.\"\n  [^not-native reader p?]\n  (read-while\n    reader\n    (complement p?)\n    (p? nil)))\n\n(defn read-include-linebreak\n  \"Read until linebreak and include it.\"\n  [^not-native reader]\n  (str\n    (read-until\n      reader\n      #(or (nil? %) (linebreak? %)))\n    (read-char reader)))\n\n(defn string->edn\n  \"Convert string to EDN value.\"\n  [s]\n  (read-string s))\n\n(defn ignore\n  \"Ignore the next character.\"\n  [^not-native reader]\n  (read-char reader)\n  nil)\n\n\n(defn next\n  \"Read next char.\"\n  [^not-native reader]\n  (read-char reader))\n\n(defn peek\n  \"Peek next char.\"\n  [^not-native reader]\n  (peek-char reader))\n\n\n\n(defn read-with-meta\n  \"Use the given function to read value, then attach row/col metadata.\"\n  [^not-native reader read-fn]\n  (let [row (get-line-number reader)\n        col (get-column-number reader)\n        ^not-native entry (read-fn reader)]\n    (when entry\n      (let [end-row (get-line-number reader)\n            end-col (get-column-number reader)\n            end-col (if (= 0 end-col)\n                      (+ col (.-length (nd/string entry)))\n                      end-col)] ; TODO: Figure out why numbers are sometimes whacky\n        (if (= 0 col) ; why oh why\n          entry\n          (-with-meta\n            entry\n            {:row row\n             :col col\n             :end-row end-row\n             :end-col end-col}))))))\n\n(defn read-repeatedly\n  \"Call the given function on the given reader until it returns\n   a non-truthy value.\"\n  [^not-native reader read-fn]\n  (->> (repeatedly #(read-fn reader))\n       (take-while identity)\n       (doall)))\n\n\n(defn read-n\n  \"Call the given function on the given reader until `n` values matching `p?` have been\n   collected.\"\n  [^not-native reader node-tag read-fn p? n]\n  {:pre [(pos? n)]}\n  (loop [c 0\n         vs []]\n    (if (< c n)\n      (if-let [v (read-fn reader)]\n        (recur\n          (if (p? v) (inc c) c)\n          (conj vs v))\n        (throw-reader\n          reader\n          \"%s node expects %d value%s.\"\n          node-tag\n          n\n          (if (= n 1) \"\" \"s\")))\n      vs)))\n\n(defn- re-matches*\n  [re s]\n  (let [matches (.exec re s)]\n    (when (and (not (nil? matches))\n               (identical? (aget matches 0) s))\n      (if (== (alength matches) 1)\n        (aget matches 0)\n        matches))))\n\n(defn read-keyword\n  [^not-native reader initch]\n  (let [tok (#'cljs.tools.reader/read-token reader :keyword (read-char reader))\n        a (re-matches* (re-pattern \"^[:]?([^0-9/].*/)?([^0-9/][^/]*)$\") tok)\n        token (aget a 0)\n        ns (aget a 1)\n        name (aget a 2)]\n    (if (or (and (not (undefined? ns))\n                 (identical? (. ns (substring (- (.-length ns) 2) (.-length ns))) \":/\"))\n            (identical? (aget name (dec (.-length name))) \":\")\n            (not (== (.indexOf token \"::\" 1) -1)))\n      (cljs.tools.reader.impl.errors/reader-error reader \n                                                  \"Invalid token: \" \n\t\t\t\t\t\t  token)\n      (if (and (not (nil? ns)) (> (.-length ns) 0))\n        (keyword (.substring ns 0 (.indexOf ns \"/\")) name)\n        (keyword (.substring token 1))))))\n\n;; (let [form-rdr (r/indexing-push-back-reader \"(+ 1 1)\")]\n;;   (read-include-linebreak form-rdr))\n\n\n;(re-matches* (re-pattern \"^[:]?([^0-9/].*/)?([^0-9/][^/]*)$\") \":%dill.*\")\n"]}