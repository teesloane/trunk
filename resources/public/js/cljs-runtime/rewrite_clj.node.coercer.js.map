{"version":3,"sources":["rewrite_clj/node/coercer.cljs"],"mappings":"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","names":["rewrite-clj.node.coercer/node-with-meta","n","value","cljs.core/PROTOCOL_SENTINEL","mta","cljs.core/meta","cljs.core/empty?","rewrite_clj.node.meta.meta_node","rewrite-clj.node.protocols/coerce","goog.object/set","rewrite-clj.node.protocols/NodeCoerceable","v","rewrite_clj.node.token.token_node","rewrite-clj.node.stringz/string-node","rewrite-clj.node.coercer/seq-node","f","sq","cljs.core.map","rewrite-clj.node.whitespace/space-separated","cljs.core/vec","G__29759","cljs.core/PersistentVector","rewrite-clj.node.seq/vector-node","cljs.core/List","rewrite-clj.node.seq/list-node","cljs.core/PersistentHashSet","rewrite-clj.node.seq/set-node","comma","rewrite-clj.node.whitespace/whitespace-node","space","rewrite-clj.node.coercer/map->children","m","cljs.core.mapcat","p__29761","vec__29762","cljs.core.nth","k","cljs.core/butlast","cljs.core/PersistentHashMap","rewrite-clj.node.seq/map-node","rewrite-clj.node.comment/CommentNode","rewrite-clj.node.forms/FormsNode","rewrite-clj.node.fn/FnNode","rewrite-clj.node.keyword/KeywordNode","rewrite-clj.node.meta/MetaNode","rewrite-clj.node.quote/QuoteNode","rewrite-clj.node.reader-macro/ReaderNode","rewrite-clj.node.reader-macro/ReaderMacroNode","rewrite-clj.node.reader-macro/DerefNode","rewrite-clj.node.stringz/StringNode","rewrite-clj.node.whitespace/NewlineNode","rewrite-clj.node.seq/SeqNode","rewrite-clj.node.token/TokenNode","rewrite-clj.node.whitespace/WhitespaceNode"],"sourcesContent":["(ns rewrite-clj.node.coercer\n  (:require [rewrite-clj.node.comment :refer [CommentNode]]\n            [rewrite-clj.node.forms :refer [FormsNode]]\n            [rewrite-clj.node.keyword :refer [KeywordNode]]\n            [rewrite-clj.node.quote :refer [QuoteNode]]\n            [rewrite-clj.node.stringz :refer [StringNode string-node]]\n            [rewrite-clj.node.uneval :refer [UnevalNode]]\n            [rewrite-clj.node.meta :refer [MetaNode meta-node]]\n            [rewrite-clj.node.fn :refer [FnNode]]\n            [rewrite-clj.node.protocols :refer [NodeCoerceable coerce]]\n            [rewrite-clj.node.reader-macro :refer [ReaderNode ReaderMacroNode DerefNode]]\n            [rewrite-clj.node.seq :refer [SeqNode vector-node list-node set-node map-node]]\n            [rewrite-clj.node.token :refer [TokenNode token-node]]\n            [rewrite-clj.node.whitespace :refer [WhitespaceNode NewlineNode whitespace-node space-separated]]))\n\n;; ## Helpers\n\n(defn node-with-meta\n  [n value]\n  (if (implements? IWithMeta value)\n    (let [mta (meta value)]\n      (if (empty? mta)\n        n\n        (meta-node (coerce mta) n)))\n    n))\n\n\n;; ## Tokens\n\n(extend-protocol NodeCoerceable\n  object\n  (coerce [v]\n    (node-with-meta\n      (token-node v)\n      v)))\n\n;; Number\n(extend-protocol NodeCoerceable\n  number\n  (coerce [n]\n    (node-with-meta\n     (token-node n)\n     n)))\n\n;; Number\n(extend-protocol NodeCoerceable\n  string\n  (coerce [n]\n    (node-with-meta\n     (string-node n)\n     n)))\n\n\n\n;; ## Seqs\n\n(defn seq-node\n  [f sq]\n  (node-with-meta\n    (->> (map coerce sq)\n         (space-separated)\n         (vec)\n         (f))\n    sq))\n\n(extend-protocol NodeCoerceable\n  PersistentVector\n  (coerce [sq]\n    (seq-node vector-node sq))\n  List\n  (coerce [sq]\n    (seq-node list-node sq))\n  PersistentHashSet\n  (coerce [sq]\n    (seq-node set-node sq)))\n\n\n\n\n;; ## Maps\n\n(let [comma (whitespace-node \", \")\n      space (whitespace-node \" \")]\n  (defn- map->children\n    [m]\n    (->> (mapcat\n           (fn [[k v]]\n             [(coerce k) space (coerce v) comma])\n           m)\n         (butlast)\n         (vec))))\n\n\n(extend-protocol NodeCoerceable\n  PersistentHashMap\n  (coerce [m]\n    (node-with-meta\n      (map-node (map->children m))\n      m)))\n\n\n\n\n;(seq-node vector-node [1])\n\n;; ## Vars\n\n;; (extend-protocol NodeCoerceable\n;;   Var\n;;   (coerce [v]\n;;     (-> (str v)\n;;         (subs 2)\n;;         (symbol)\n;;         (token-node)\n;;         (vector)\n;;         (var-node))))\n\n;; ## Existing Nodes\n\n(extend-protocol NodeCoerceable\n  CommentNode     (coerce [v] v)\n  FormsNode       (coerce [v] v)\n  FnNode          (coerce [v] v)\n  ;IntNode         (coerce [v] v)\n  KeywordNode     (coerce [v] v)\n  MetaNode        (coerce [v] v)\n  QuoteNode       (coerce [v] v)\n  ReaderNode      (coerce [v] v)\n  ReaderMacroNode (coerce [v] v)\n  DerefNode       (coerce [v] v)\n  StringNode      (coerce [v] v)\n  ;UnevalNode      (coerce [v] v)\n  NewlineNode     (coerce [v] v)\n  SeqNode         (coerce [v] v)\n  TokenNode       (coerce [v] v)\n  WhitespaceNode  (coerce [v] v))\n"]}