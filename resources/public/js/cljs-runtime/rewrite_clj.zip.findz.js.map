{"version":3,"sources":["rewrite_clj/zip/findz.cljs"],"mappings":"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","names":["var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.findz/tag-predicate","p__29954","vec__29955","cljs.core.nth","seq29951","G__29952","cljs.core/first","cljs.core/next","self__4805__auto__","t","additional","p1__29949#","node","and__4210__auto__","cljs.core._EQ_","rewrite-clj.zip.base/tag","p__29959","p__29960","map__29962","cljs.core/--destructure-map","cljs.core.get","map__29963","rewrite-clj.zip.findz/in-range?","row","col","end-row","end-col","r","c","G__29965","rewrite-clj.zip.findz/find","js/Error","zloc","p?","rewrite_clj.zip.findz.find","rewrite-clj.zip.move/right","f","cljs.core/iterate","cljs.core.take_while","cljs.core/identity","cljs.core/complement","rewrite-clj.zip.move/end?","cljs.core.drop_while","G__29968","rewrite-clj.zip.findz/find-last-by-pos","pos","rewrite_clj.zip.findz.find_last_by_pos","cljs.core/constantly","clojure.zip/next","p1__29966#","cljs.core.filter","clojure.zip/node","cljs.core/meta","cljs.core/last","rewrite-clj.zip.findz/find-depth-first","rewrite-clj.zip.move/next","G__29976","rewrite-clj.zip.findz/find-next","rewrite_clj.zip.findz.find_next","G__29977","rewrite-clj.zip.findz/find-next-depth-first","G__29980","rewrite-clj.zip.findz/find-tag","rewrite_clj.zip.findz.find_tag","p1__29978#","G__29984","rewrite-clj.zip.findz/find-next-tag","rewrite_clj.zip.findz.find_next_tag","rewrite-clj.zip.findz/find-tag-by-pos","p1__29987#","G__29990","rewrite-clj.zip.findz/find-token","rewrite_clj.zip.findz.find_token","rewrite_clj.zip.findz.tag_predicate","G__29994","rewrite-clj.zip.findz/find-next-token","rewrite_clj.zip.findz.find_next_token","G__30000","rewrite-clj.zip.findz/find-value","v","rewrite_clj.zip.findz.find_value","p1__29998#","cljs.core/set?","cljs.core.comp","rewrite-clj.zip.base/sexpr","G__30004","rewrite-clj.zip.findz/find-next-value","rewrite_clj.zip.findz.find_next_value"],"sourcesContent":["(ns rewrite-clj.zip.findz\n  (:refer-clojure :exclude [find])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.node :as node]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n;; ## Helpers\n\n(defn- tag-predicate\n  [t & [additional]]\n  (if additional\n    (fn [node]\n      (and (= (base/tag node) t)\n           (additional node)))\n    #(= (base/tag %) t)))\n\n\n(defn in-range? [{:keys [row col end-row end-col]} {r :row c :col}]\n  (and (>= r row)\n       (<= r end-row)\n       (if (= r row) (>= c col) true)\n       (if (= r end-row) (<= c end-col) true)))\n\n\n;; ## Find Operations\n\n(defn find\n  \"Find node satisfying the given predicate by repeatedly\n   applying the given movement function to the initial zipper\n   location.\"\n  ([zloc p?]\n   (find zloc m/right p?))\n  ([zloc f p?]\n   (->> zloc\n        (iterate f)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (drop-while (complement p?))\n        (first))))\n\n\n\n(defn find-last-by-pos\n  \"Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location.\"\n  ([zloc pos] (find-last-by-pos zloc pos (constantly true)))\n  ([zloc pos p?]\n   (->> zloc\n        (iterate z/next)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (filter #(and (p? %)\n                      (in-range? (-> % z/node meta) pos)))\n        last)))\n\n\n(defn find-depth-first\n  \"Find node satisfying the given predicate by traversing\n   the zipper in a depth-first way.\"\n  [zloc p?]\n  (find zloc m/next p?))\n\n\n(defn find-next\n  \"Find node other than the current zipper location matching\n   the given predicate by applying the given movement function\n   to the initial zipper location.\"\n  ([zloc p?]\n   (find-next zloc m/right p?))\n  ([zloc f p?]\n   (some-> zloc f (find f p?))))\n\n(defn find-next-depth-first\n  \"Find node other than the current zipper location matching\n   the given predicate by traversing the zipper in a\n   depth-first way.\"\n  [zloc p?]\n  (find-next zloc m/next p?))\n\n(defn find-tag\n  \"Find node with the given tag by repeatedly applying the given\n   movement function to the initial zipper location.\"\n  ([zloc t]\n   (find-tag zloc m/right t))\n  ([zloc f t]\n   (find zloc f #(= (base/tag %) t))))\n\n(defn find-next-tag\n  \"Find node other than the current zipper location with the\n   given tag by repeatedly applying the given movement function to\n   the initial zipper location.\"\n  ([zloc t]\n   (find-next-tag zloc m/right t))\n  ([zloc f t]\n   (->> (tag-predicate t)\n        (find-next zloc f))))\n\n\n(defn find-tag-by-pos\n  \"Find node with the given tag and pos depth-first from initial zipper location.\"\n  ([zloc pos t]\n   (find-last-by-pos zloc pos #(= (base/tag %) t))))\n\n\n\n(defn find-token\n  \"Find token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc p?]\n   (find-token zloc m/right p?))\n  ([zloc f p?]\n   (->> (tag-predicate :token p?)\n        (find zloc f))))\n\n(defn find-next-token\n  \"Find next token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc p?]\n   (find-next-token zloc m/right p?))\n  ([zloc f p?]\n   (find-token (f zloc) f p?)))\n\n(defn find-value\n  \"Find token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc v]\n   (find-value zloc m/right v))\n  ([zloc f v]\n   (let [p? (if (set? v)\n              (comp v base/sexpr)\n              #(= (base/sexpr %) v))]\n     (find-token zloc f p?))))\n\n(defn find-next-value\n  \"Find next token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc v]\n   (find-next-value zloc m/right v))\n  ([zloc f v]\n   (find-value (f zloc) f v)))\n"]}