{"version":3,"sources":["sci/impl/protocols.cljc"],"mappings":"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","names":["var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","sci.impl.protocols/defprotocol","seq33017","G__33018","cljs.core/first","cljs.core/next","G__33019","G__33020","G__33021","self__4805__auto__","_","_ctx","protocol-name","signatures","vec__33023","cljs.core.nth","vec__33026","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","cljs.core/hash-set","docstring","sig","cljs.core/rest","opts","opt","cljs.core/Keyword","cljs.core/second","cljs.core/nnext","current-ns","sci.impl.vars/current-ns-name","expansion","cljs.core/with-meta","cljs.core.map","p__33045","vec__33048","seq__33049","first__33050","method-name","cljs.core/vec","fq-name","cljs.core.symbol","impls","cljs.core.conj","cljs.core.keyword","sci.impl.protocols/extend-protocol","seq33253","G__33254","G__33255","G__33256","G__33257","ctx","p1__33241#","p1__33240#","sci.impl.utils/split-when","cljs.core/seq?","protocol-var","fexpr__33261","cljs.core/deref","sci.impl.utils/eval-resolve-state","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","p__33277","vec__33279","seq__33280","first__33281","type","meths","meth","cljs.core/name","sci.impl.protocols/extend","seq33301","G__33302","G__33303","atype","proto+mmaps","seq__33327","chunk__33329","count__33330","i__33331","vec__33490","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__33574","proto","mmap","cljs.core.partition","proto-ns","seq__33497","chunk__33498","count__33499","i__33500","vec__33539","vec__33546","seq__33580","chunk__33581","count__33582","i__33583","vec__33618","vec__33643","fn-name","f","fn-sym","env","multi-method-var","cljs.core.get_in","multi-method","sci.impl.multimethods/multi-fn-add-method-impl","sci.impl.protocols/extend-type","seq33661","G__33662","G__33663","G__33664","G__33665","proto+meths","p1__33657#","p__33692","vec__33693","seq__33694","first__33695","p1__33658#","fexpr__33700","sci.impl.protocols/satisfies?","protocol","obj","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","sci.impl.types/IReified","temp__5751__auto__","obj-type","sci.impl.types/getInterface","cljs.core._EQ_","cljs.core/boolean","p1__33729#","cljs.core/some","cljs.core/get-method","sci.impl.types/type-impl","sci.impl.protocols/instance-impl","clazz","x","and__4210__auto__","cljs.core/Symbol","m","cljs.core/meta","G__33758","sci.impl.protocols/extends?","p1__33763#"],"sourcesContent":["(ns sci.impl.protocols\n  {:no-doc true}\n  (:refer-clojure :exclude [defprotocol extend-protocol\n                            extend extend-type reify satisfies?\n                            extends? implements?])\n  (:require [sci.impl.multimethods :as mms]\n            [sci.impl.types :as types]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defprotocol [_ _ _ctx protocol-name & signatures]\n  (let [[docstring signatures]\n        (let [sig (first signatures)]\n          (if (string? sig) [sig (rest signatures)]\n              [nil signatures]))\n        [opts signatures]\n        (let [opt (first signatures)]\n          (if (keyword? opt) [{opt (second signatures)} (nnext signatures)]\n              [nil signatures]))\n        current-ns (str (vars/current-ns-name))\n        expansion\n        `(do\n           (def  ~(with-meta protocol-name\n                    {:doc docstring}) {:methods #{}\n                                       :ns *ns*})\n           ~@(map (fn [[method-name & _]]\n                    (let [fq-name (symbol (str current-ns) (str method-name))\n                          impls [`(defmulti ~method-name clojure.core/protocol-type-impl)\n                                 `(defmethod ~method-name :sci.impl.protocols/reified [x# & args#]\n                                    (let [methods# (clojure.core/-reified-methods x#)]\n                                      (apply (get methods# '~method-name) x# args#)))]\n                          impls (if (:extend-via-metadata opts)\n                                  (conj impls\n                                        `(defmethod ~method-name :default [x# & args#]\n                                           (let [meta# (meta x#)\n                                                 method# (get meta# '~fq-name)]\n                                             (if method#\n                                               (apply method# x# args#)\n                                               (throw (new #?(:clj IllegalArgumentException\n                                                              :cljs js/Error)\n                                                           (str \"No implementation of method: \"\n                                                                ~(keyword method-name) \" of protocol: \"\n                                                                (var ~protocol-name) \" found for: \"\n                                                                (clojure.core/protocol-type-impl x#))))))))\n                                  impls)]\n                      `(do\n                         ~@impls\n                         #?(:clj (alter-var-root (var ~protocol-name)\n                                                 update :methods conj ~method-name)\n                            :cljs (def ~protocol-name\n                                    (update ~protocol-name :methods conj ~method-name))))))\n                  signatures))]\n    expansion))\n\n(defn extend-protocol [_ _ ctx protocol-name & impls]\n  (let [impls (utils/split-when #(not (seq? %)) impls)\n        protocol-var (@utils/eval-resolve-state ctx protocol-name)\n        protocol-ns (-> protocol-var deref :ns)\n        pns (str (vars/getName protocol-ns))\n        fq-meth-name #(symbol pns %)\n        expansion\n        `(do ~@(map (fn [[type & meths]]\n                      `(do\n                         ~@(map (fn [meth]\n                                  `(defmethod ~(fq-meth-name (name (first meth)))\n                                     ~type\n                                     ~(second meth) ~@(nnext meth)))\n                                meths)))\n                    impls))]\n    #_(prn expansion)\n    expansion))\n\n(defn extend [ctx atype & proto+mmaps]\n  (doseq [[proto mmap] (partition 2 proto+mmaps)\n          :let [proto-ns (:ns proto)\n                pns (vars/getName proto-ns)]]\n    #_(when-not (protocol? proto)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str proto \" is not a protocol\"))))\n    #_(when (implements? proto atype)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str atype \" already directly implements \" (:on-interface proto) \" for protocol:\"\n                         (:var proto)))))\n    (doseq [[fn-name f] mmap]\n      (let [fn-sym (symbol (name fn-name))\n            env @(:env ctx)\n            multi-method-var (get-in env [:namespaces pns fn-sym])\n            multi-method @multi-method-var]\n        (mms/multi-fn-add-method-impl multi-method atype f))\n      )\n    #_(-reset-methods (vars/alter-var-root (:var proto) assoc-in [:impls atype] mmap))))\n\n(defn extend-type [_ _ ctx type & proto+meths]\n  (let [proto+meths (utils/split-when #(not (seq? %)) proto+meths)]\n    `(do ~@(map (fn [[proto & meths]]\n                  (let [protocol-var (@utils/eval-resolve-state ctx proto)\n                        protocol-ns (-> protocol-var deref :ns)\n                        pns (str (vars/getName protocol-ns))\n                        fq-meth-name #(symbol pns %)]\n                    `(do\n                       ~@(map (fn [meth]\n                                `(defmethod ~(fq-meth-name (name (first meth)))\n                                   ~type ~(second meth) ~@(nnext meth)))\n                              meths)))) proto+meths))))\n\n(defn satisfies? [protocol obj]\n  (if #?(:clj (instance? sci.impl.types.IReified obj)\n         :cljs (clojure.core/satisfies? types/IReified obj))\n    (if-let [obj-type (types/getInterface obj)]\n      (= protocol obj-type)\n      false)\n    (boolean (some #(get-method % (types/type-impl obj)) (:methods protocol)))))\n\n(defn instance-impl [clazz x]\n  (cond\n    ;; fast path for Clojure when using normal clazz\n    #?@(:clj [(class? clazz) (instance? clazz x)])\n    ;; records are currenrly represented as a symbol with metadata\n    (and (symbol? clazz) (let [m (meta clazz)] (:sci.impl/record m)))\n    (= clazz (some-> x meta :sci.impl/type))\n    ;; only in Clojure, we could be referring to clojure.lang.IDeref as a sci protocol\n    #?@(:clj [(map? clazz)\n              (if-let [c (:class clazz)]\n                ;; this is a protocol which is an interface on the JVM\n                (or (satisfies? clazz x)\n                    (instance? c x))\n                (satisfies? clazz x))])\n    ;; could we have a fast path for CLJS too? please let me know!\n    :else (instance? clazz x)))\n\n(defn extends?\n  \"Returns true if atype extends protocol\"\n  [protocol atype]\n  (boolean (some #(get-method % atype) (:methods protocol))))\n"]}