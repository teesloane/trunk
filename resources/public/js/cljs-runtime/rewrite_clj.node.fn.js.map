{"version":3,"sources":["rewrite_clj/node/fn.cljs"],"mappings":"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","names":["rewrite-clj.node.fn/construct-fn","syms","vararg","body","cljs.core/List","cljs.core/vec","cljs.core.concat","rewrite-clj.node.fn/sym-index","n","cljs.core._EQ_","cljs.core/re-matches","js/parseInt","js/Error","rewrite-clj.node.fn/symbol->gensym","sym-seq","vararg?","max-n","sym","cljs.core/Symbol","nm","cljs.core/name","i","cljs.core.subs","cljs.core.swap_BANG_","cljs.core/max","cljs.core.nth","rewrite-clj.node.fn/fn-walk","form","iter__4611__auto__","s__29569","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__29590","cljs.core/chunk-buffer","i__29589","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29568","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","base","s","cljs.core.gensym","cljs.core.symbol","cljs.core.atom","p1__29535#","clojure.walk/prewalk","or__4212__auto__","cljs.core/deref","cljs.core.take","this__4461__auto__","k__4462__auto__","this__4463__auto__","k29593","else__4464__auto__","G__29597","cljs.core/Keyword","children","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__29607","vec__29608","k__4485__auto__","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__29592","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this29594","other29595","cljs.core/PROTOCOL_SENTINEL","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__29629","this__4469__auto__","k__4470__auto__","pred__29632","cljs.core/keyword-identical?","expr__29633","cljs.core.assoc","this__4474__auto__","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-conj","rewrite-clj.node.fn/FnNode","this__4505__auto__","writer__4506__auto__","cljs.core/-write","G__29596","extmap__4501__auto__","G__29661","cljs.core/record?","rewrite-clj.node.fn/->FnNode","rewrite-clj.node.fn/map->FnNode","_","rewrite-clj.node.protocols/sexprs","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","this","children'","rewrite-clj.node.fn/fn-node","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.fn\n  (:require [rewrite-clj.node.protocols :as node]\n            [clojure.walk :as w]))\n\n;; ## Conversion\n\n(defn- construct-fn\n  \"Construct function form.\"\n  [syms vararg body]\n  (list\n    'fn*\n    (vec\n      (concat\n        syms\n        (if vararg\n          (list '& vararg))))\n    body))\n\n(defn- sym-index\n  \"Get index based on the substring following the parameter's `%`.\n   Zero means vararg.\"\n  [n]\n  (cond (= n \"&\") 0\n        (= n \"\") 1\n        (re-matches #\"\\d+\" n) (js/parseInt n)\n        :else (throw (js/Error. \"arg literal must be %, %& or %integer.\"))))\n\n;; TODO: No promises available\n(defn- symbol->gensym\n  \"If symbol starting with `%`, convert to respective gensym.\"\n  [sym-seq vararg? max-n sym]\n  (if (symbol? sym)\n    (let [nm (name sym)]\n      (if (= (.indexOf nm \"%\") 0)\n        (let [i (sym-index (subs nm 1))]\n;;           (if (and (= i 0) (not (realized? vararg?)))\n;;             (deliver vararg? true))\n          (swap! max-n max i)\n          (nth sym-seq i))))))\n\n;; TODO: No promises available\n(defn- fn-walk\n  \"Walk the form and create an expand function form.\"\n  [form]\n  (let [syms (for [i (range)\n                   :let [base (if (= i 0)\n                                \"rest__\"\n                                (str \"p\" i \"__\"))\n                         s (name (gensym base))]]\n               (symbol (str s \"#\")))\n        vararg? false ;(promise)\n        max-n (atom 0)\n        body (w/prewalk\n               #(or (symbol->gensym syms vararg? max-n %) %)\n               form)]\n    (construct-fn\n      (take @max-n (rest syms))\n      nil\n;;       (if (deref vararg? 0 nil)\n;;         (first syms))\n      body)))\n\n;; ## Node\n\n(defrecord FnNode [children]\n  node/Node\n  (tag [_] :fn)\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (fn-walk (node/sexprs children)))\n  (length [_]\n    (+ 3 (node/sum-lengths children)))\n  (string [_]\n    (str \"#(\" (node/concat-strings children) \")\"))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO\n;(node/make-printable! FnNode)\n\n;; ## Constructor\n\n(defn fn-node\n  \"Create node representing an anonymous function.\"\n  [children]\n  (->FnNode children))\n"]}