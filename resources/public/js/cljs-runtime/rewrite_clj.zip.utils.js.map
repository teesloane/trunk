{"version":3,"sources":["rewrite_clj/zip/utils.cljs"],"mappings":"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","names":["p__29888","vec__29889","cljs.core.nth","rewrite-clj.zip.utils/update-in-path","node","path","loc","k","f","v","cljs.core.get","cljs.core/seq","cljs.core/with-meta","cljs.core.assoc","cljs.core/meta","rewrite-clj.zip.utils/remove-right","cljs.core/next","rewrite-clj.zip.utils/remove-left","cljs.core/pop","rewrite-clj.zip.utils/remove-while","zloc","p?","ploc","clojure.zip/prev","cljs.core/not","and__4210__auto__","clojure.zip/remove","rewrite-clj.zip.utils/remove-right-while","temp__5751__auto__","rloc","clojure.zip/right","rewrite-clj.zip.utils/remove-left-while","lloc","clojure.zip/left","p__29898","vec__29899","map__29902","cljs.core/--destructure-map","rewrite-clj.zip.utils/remove-and-move-left","_","l","cljs.core/peek","cljs.core.update_in","p__29908","vec__29909","map__29912","rewrite-clj.zip.utils/remove-and-move-right","r","cljs.core/first","rewrite-clj.zip.utils/remove-and-move-up","vec__29917","map__29920","ppath","pnodes","rs","js/Error","cljs.core/count","clojure.zip/up","clojure.zip/make-node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.utils\n  (:require [clojure.zip :as z]))\n\n;; ## Remove\n\n(defn- update-in-path\n  [[node path :as loc] k f]\n  (let [v (get path k)]\n    (if (seq v)\n      (with-meta\n        [node (assoc path k (f v) :changed? true)]\n        (meta loc))\n      loc)))\n\n(defn remove-right\n  \"Remove right sibling of the current node (if there is one).\"\n  [loc]\n  (update-in-path loc :r next))\n\n(defn remove-left\n  \"Remove left sibling of the current node (if there is one).\"\n  [loc]\n  (update-in-path loc :l pop))\n\n\n(defn remove-while\n  [zloc p?]\n  \"Remove nodes while predicate true. (depth first in reverse!) \"\n  (loop [zloc zloc]\n    (let [ploc (z/prev zloc)]\n      (if-not (and ploc (p? ploc))\n        zloc\n        (recur (z/remove zloc))))))\n\n(defn remove-right-while\n  \"Remove elements to the right of the current zipper location as long as\n   the given predicate matches.\"\n  [zloc p?]\n  (loop [zloc zloc]\n    (if-let [rloc (z/right zloc)]\n      (if (p? rloc)\n        (recur (remove-right zloc))\n        zloc)\n      zloc)))\n\n(defn remove-left-while\n  \"Remove elements to the left of the current zipper location as long as\n   the given predicate matches.\"\n  [zloc p?]\n  (loop [zloc zloc]\n    (if-let [lloc (z/left zloc)]\n      (if (p? lloc)\n        (recur (remove-left zloc))\n        zloc)\n      zloc)))\n\n;; ## Remove and Move\n\n(defn remove-and-move-left\n  \"Remove current node and move left. If current node is at the leftmost\n   location, returns `nil`.\"\n  [[_ {:keys [l] :as path} :as loc]]\n  (if (seq l)\n    (with-meta\n      [(peek l) (-> path\n                    (update-in [:l] pop)\n                    (assoc :changed? true))]\n      (meta loc))))\n\n(defn remove-and-move-right\n  \"Remove current node and move right. If current node is at the rightmost\n   location, returns `nil`.\"\n  [[_ {:keys [r] :as path} :as loc]]\n  (if (seq r)\n    (with-meta\n      [(first r) (-> path\n                     (update-in [:r] next)\n                     (assoc :changed? true))]\n      (meta loc))))\n\n\n(defn remove-and-move-up [loc]\n  (let [[node {l :l, ppath :ppath, pnodes :pnodes, rs :r, :as path}] loc]\n    (if (nil? path)\n      (throw (js/Error. \"Remove at top\"))\n      (if (pos? (count l))\n        (z/up (with-meta [(peek l)\n                    (assoc path :l (pop l) :changed? true)]\n                   (meta loc)))\n        (with-meta [(z/make-node loc (peek pnodes) rs)\n                    (and ppath (assoc ppath :changed? true))]\n                   (meta loc))))))\n\n"]}