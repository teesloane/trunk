{"version":3,"sources":["rewrite_clj/node/protocols.cljs"],"mappings":"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","names":["rewrite-clj$node$protocols$Node$tag$dyn","x__4509__auto__","m__4510__auto__","rewrite-clj.node.protocols/tag","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","rewrite-clj$node$protocols$Node$printable_only_QMARK_$dyn","rewrite-clj.node.protocols/printable-only?","rewrite-clj$node$protocols$Node$sexpr$dyn","rewrite-clj.node.protocols/sexpr","rewrite-clj$node$protocols$Node$length$dyn","rewrite-clj.node.protocols/length","rewrite-clj$node$protocols$Node$string$dyn","rewrite-clj.node.protocols/string","rewrite-clj.node.protocols/Node","_","goog.object/set","this","cljs.core/count","cljs.core.pr_str","rewrite-clj.node.protocols/sexprs","nodes","cljs.core.remove","cljs.core.map","rewrite-clj.node.protocols/sum-lengths","cljs.core.reduce","cljs.core/+","rewrite-clj.node.protocols/concat-strings","cljs.core/str","rewrite-clj$node$protocols$InnerNode$inner_QMARK_$dyn","rewrite-clj.node.protocols/inner?","rewrite-clj$node$protocols$InnerNode$children$dyn","rewrite-clj.node.protocols/children","rewrite-clj$node$protocols$InnerNode$replace_children$dyn","rewrite-clj.node.protocols/replace-children","rewrite-clj.node.protocols/InnerNode","children","js/Error","rewrite-clj.node.protocols/child-sexprs","node","rewrite-clj$node$protocols$NodeCoerceable$coerce$dyn","rewrite-clj.node.protocols/coerce","rewrite-clj.node.protocols/NodeCoerceable","rewrite-clj.node.protocols/assert-sexpr-count","c","cljs.core._EQ_","rewrite-clj.node.protocols/assert-single-sexpr"],"sourcesContent":["(ns rewrite-clj.node.protocols\n  (:require [clojure.string :as s]))\n\n\n\n(defprotocol Node\n  \"Protocol for EDN/Clojure nodes.\"\n  (tag [_]\n    \"Keyword representing the type of the node.\")\n  (printable-only? [_]\n    \"Return true if the node cannot be converted to an s-expression\n     element.\")\n  (sexpr [_]\n    \"Convert node to s-expression.\")\n  (length [_]\n    \"Get number of characters for the string version of this node.\")\n  (string [_]\n    \"Convert node to printable string.\"))\n\n\n(extend-protocol Node\n  object\n  (tag [_] :unknown)\n  (printable-only? [_] false)\n  (sexpr [this] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexprs\n  \"Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms.\"\n  [nodes]\n  (->> nodes\n       (remove printable-only?)\n       (map sexpr)))\n\n(defn sum-lengths\n  \"Sum up lengths of the given nodes.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn concat-strings\n  \"Convert nodes to strings and concatenate them.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n\n(defprotocol InnerNode\n  \"Protocol for non-leaf EDN/Clojure nodes.\"\n  (inner? [_]\n    \"Check whether the node can contain children.\")\n  (children [_]\n    \"Get child nodes.\")\n  (replace-children [_ children]\n    \"Replace the node's children.\"))\n\n(extend-protocol InnerNode\n  object\n  (inner? [_] false)\n  (children [_]\n    (throw (js/Error. \"UnsupportedOperationException\")))\n  (replace-children [_ _]\n    (throw (js/Error. \"UnsupportedOperationException\"))))\n\n(defn child-sexprs\n  \"Get all child s-expressions for the given node.\"\n  [node]\n  (if (inner? node)\n    (sexprs (children node))))\n\n\n(defprotocol NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [_]))\n\n\n;; TODO: Need to handle format !!!!\n;; (defn- node->string\n;;   [node]\n;;   (let [n (str (if (printable-only? node)\n;;                  (pr-str (string node))\n;;                  (string node)))\n;;         n' (if (re-find #\"\\n\" n)\n;;              (->> (s/replace n #\"\\r?\\n\" \"\\n  \")\n;;                   (format \"%n  %s%n\"))\n;;              (str \" \" n))]\n;;     (format \"<%s:%s>\" (name (tag node)) n')))\n\n\n;; (defn write-node\n;;   [writer node]\n;;   (str writer (node->string node)))\n\n\n;; ## Helpers\n\n(defn assert-sexpr-count\n  [nodes c]\n  (assert\n    (= (count (remove printable-only? nodes)) c)\n   (str \"can only contain\" c \" non-whitespace form(s).\")))\n\n(defn assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n"]}