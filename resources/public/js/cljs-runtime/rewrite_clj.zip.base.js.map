{"version":3,"sources":["rewrite_clj/zip/base.cljs"],"mappings":";AASA;;;iCAAA,jCAAMA,0EAEHC;AAFH,AAGE,OAACC,mBACCC,8BACA,AAACC,6CAAKC,cAAIC,2BACVC,kCACAN;;AAEJ;;;;2BAAA,3BAAMO,8DAGHP;;AAHH,AAIE,GAAI,oMAAA,pMAACQ,6CAAE,CAACC,qDAAAA,2DAAAA,RAAST,uCAAAA;AACf,IAAMU,MAAI,AAACX,+BAAKC;AAAhB,AACE,IAAAW,mBAAI,yEAAA,iBAAID,jBAAIE,zEAAOC;AAAnB,AAAA,oBAAAF;AAAAA;;AACID;;;AACN,eAAO,iBAAAI,WAAA,mFAAkBd;AAAlB,AAAA,8HAAAc,kDAAAA,xKAACC,4DAAAA,sEAAAA;;;;;;;;AAIZ;;;2BAAA,3BAAMC,8DAEHC;AAFH,AAGE,IAAAC,WAAQD;IAARC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,gHAAAA,+CAAAA,vJAAoBT,qDAAAA,mEAAAA;;;AAEtB;;;6BAAA,7BAAMW,kEAEHH;AAFH,AAGE,IAAAI,WAAQJ;IAARI,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaF;AAAb,AAAA,GAAA,CAAAE,gBAAA;AAAA;;AAAA,oHAAAA,iDAAAA,7JAAoBC,uDAAAA,qEAAAA;;;AAEtB;;;oCAAA,pCAAMC,gFAEHN;AAFH,AAGE,IAAAO,WAAQP;IAARO,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaL;AAAb,AAAA,GAAA,CAAAK,gBAAA;AAAA;;AAAA,kIAAAA,wDAAAA,lLAAoBC,8DAAAA,4EAAAA;;;AAEtB;;;8BAAA,9BAAMC,oEAEHT;AAFH,AAGE,IAAAN,mBAAI,iBAAAgB,WAAQV;IAARU,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaR;AAAb,AAAA,GAAA,CAAAQ,gBAAA;AAAA;;AAAA,sHAAAA,kDAAAA,hKAAoBC,wDAAAA,sEAAAA;;;AAAxB,AAAA,oBAAAjB;AAAAA;;AAAA;;;AAKF;;;iCAAA,jCAAMkB,0EAEHC;AAFH,AAGE,IAAAC,WAAQD;IAARC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,oCAAAA,pCAAUC;AAAV,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,gCAAAA,zBAA6BxB;;;AAK/B;;;8BAAA,9BAAM0B,oEAEHhB;AAFH,AAGE,IAAAiB,WAAQjB;IAARiB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaf;AAAb,AAAA,GAAA,CAAAe,gBAAA;AAAA;;AAAA,sHAAAA,kDAAAA,hKAAoBC,wDAAAA,sEAAAA;;;AAEtB;;;mCAAA,nCAAMC,8EAEHnB;AAFH,AAGE,IAAAoB,WAAQpB;IAARoB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,sHAAAA,kDAAAA,hKAAoBF,wDAAAA,sEAAAA","names":["rewrite-clj.zip.base/edn*","node","clojure.zip/zipper","rewrite-clj.node/inner?","cljs.core.comp","cljs.core/seq","rewrite-clj.node/children","rewrite-clj.node/replace-children","rewrite-clj.zip.base/edn","cljs.core._EQ_","rewrite-clj.node/tag","top","or__4212__auto__","clojure.zip/down","rewrite_clj.zip.whitespace.skip_whitespace","G__29931","rewrite-clj.node/forms-node","rewrite-clj.zip.base/tag","zloc","G__29934","clojure.zip/node","rewrite-clj.zip.base/sexpr","G__29938","rewrite-clj.node/sexpr","rewrite-clj.zip.base/child-sexprs","G__29940","rewrite-clj.node/child-sexprs","rewrite-clj.zip.base/length","G__29941","rewrite-clj.node/length","rewrite-clj.zip.base/of-string","s","G__29942","rewrite-clj.parser/parse-string-all","rewrite-clj.zip.base/string","G__29943","rewrite-clj.node/string","rewrite-clj.zip.base/root-string","G__29944","clojure.zip/root"],"sourcesContent":["(ns rewrite-clj.zip.base\n  (:refer-clojure :exclude [print])\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.parser :as p]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n;; ## Zipper\n\n(defn edn*\n  \"Create zipper over the given Clojure/EDN node.\"\n  [node]\n  (z/zipper\n    node/inner?\n    (comp seq node/children)\n    node/replace-children\n    node))\n\n(defn edn\n  \"Create zipper over the given Clojure/EDN node and move\n   to the first non-whitespace/non-comment child.\"\n  [node]\n  (if (= (node/tag node) :forms)\n    (let [top (edn* node)]\n      (or (-> top z/down ws/skip-whitespace)\n          top))\n    (recur (node/forms-node [node]))))\n\n;; ## Inspection\n\n(defn tag\n  \"Get tag of node at the current zipper location.\"\n  [zloc]\n  (some-> zloc z/node node/tag))\n\n(defn sexpr\n  \"Get sexpr represented by the given node.\"\n  [zloc]\n  (some-> zloc z/node node/sexpr))\n\n(defn child-sexprs\n  \"Get children as s-expressions.\"\n  [zloc]\n  (some-> zloc z/node node/child-sexprs))\n\n(defn length\n  \"Get length of printable string for the given zipper location.\"\n  [zloc]\n  (or (some-> zloc z/node node/length) 0))\n\n\n;; ## Read\n\n(defn of-string\n  \"Create zipper from String.\"\n  [s]\n  (some-> s p/parse-string-all edn))\n\n\n;; ## Write\n\n(defn string\n  \"Create string representing the current zipper location.\"\n  [zloc]\n  (some-> zloc z/node node/string))\n\n(defn root-string\n  \"Create string representing the zipped-up zipper.\"\n  [zloc]\n  (some-> zloc z/root node/string))\n\n;; (defn- print!\n;;   [s writer]\n;;   (if writer\n;;     (.write ^java.io.Writer writer s)\n;;     (recur s *out*)))\n\n;; (defn print\n;;   \"Print current zipper location.\"\n;;   [zloc & [writer]]\n;;   (some-> zloc\n;;           string\n;;           (print! writer)))\n\n;; (defn print-root\n;;   \"Zip up and print root node.\"\n;;   [zloc & [writer]]\n;;   (some-> zloc\n;;           root-string\n;;           (print! writer)))\n"]}