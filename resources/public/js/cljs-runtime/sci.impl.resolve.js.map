{"version":3,"sources":["sci/impl/resolve.cljc"],"mappings":"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","names":["sci.impl.resolve/throw-error-with-location","msg","node","sci.impl.utils.throw_error_with_location","sci.impl.resolve/mark-resolve-sym","sym","cljs.core.vary_meta","m","cljs.core.assoc","p__31924","map__31925","cljs.core/--destructure-map","allow","cljs.core.get","deny","sci.impl.resolve/check-permission!","check-sym","v","or__4212__auto__","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/strip-core-ns","sci.impl.vars/var?","cljs.core/not","cljs.core/meta","cljs.core/contains?","p__31934","map__31935","env","sci.impl.resolve/lookup*","ctx","call?","cljs.core/deref","sym-ns","G__31936","cljs.core/namespace","cljs.core.symbol","sym-name","cljs.core/name","cnn","sci.impl.vars/current-ns-name","the-current-ns","G__31938","cljs.core.get_in","cljs.core/find","and__4210__auto__","cljs.core._EQ_","G__31940","temp__5753__auto__","sci.impl.utils/ana-macros","G__31945","clazz","sci.impl.interop/resolve-class","cljs.core/with-meta","kv","G__31949","G__31950","c","x","sci.impl.records.resolve_record_or_protocol_class","sci.impl.resolve/tag","_ctx","expr","p__31974","map__31975","bindings","sci.impl.resolve/lookup","vec__31982","cljs.core.nth","k","vec__31985","t","cljs.core/assoc","vec__31994","temp__5751__auto__","cljs.core/vreset!","sci.impl.utils/lookup","var_args","G__32030","sci.impl.resolve/resolve-symbol","js/Error","sci.impl.resolve.resolve_symbol","res","cljs.core/second","n","clojure.string/starts-with?","clojure.string/ends-with?","cljs.core.subs"],"sourcesContent":["(ns sci.impl.resolve\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            ;; [sci.impl.evaluator :as eval]\n            ;; [sci.impl.faster :as faster]\n            [sci.impl.interop :as interop]\n            [sci.impl.records :as records]\n            [sci.impl.utils :as utils :refer [strip-core-ns\n                                              ana-macros]]\n            [sci.impl.vars :as vars]))\n\n(defn throw-error-with-location [msg node]\n  (utils/throw-error-with-location msg node {:phase \"analysis\"}))\n\n(defn mark-resolve-sym\n  [sym]\n  (vary-meta\n   sym\n   (fn [m]\n     (assoc m :sci.impl/op :resolve-sym))))\n\n(defn check-permission! [{:keys [:allow :deny]} check-sym sym v]\n  (or (identical? utils/allowed-loop sym)\n      (identical? utils/allowed-recur sym)\n      (let [check-sym (strip-core-ns check-sym)]\n        (when-not (if allow (or (and (vars/var? v) (not (:sci.impl/built-in (meta v))))\n                                (contains? allow check-sym))\n                      true)\n          (throw-error-with-location (str sym \" is not allowed!\") sym))\n        (when (if deny (contains? deny check-sym)\n                  false)\n          (throw-error-with-location (str sym \" is not allowed!\") sym)))))\n\n(defn lookup* [{:keys [:env] :as ctx} sym call?]\n  (let [sym-ns (some-> (namespace sym) symbol)\n        sym-name (symbol (name sym))\n        env @env\n        cnn (vars/current-ns-name)\n        the-current-ns (-> env :namespaces cnn)\n        ;; resolve alias\n        sym-ns (when sym-ns (or (get-in the-current-ns [:aliases sym-ns])\n                                sym-ns))]\n    (or (find the-current-ns sym) ;; env can contain foo/bar symbols from bindings\n        (cond\n          (and sym-ns (or (= sym-ns 'clojure.core) (= sym-ns 'cljs.core)))\n          (or (some-> env :namespaces (get 'clojure.core) (find sym-name))\n              (when-let [v (when call? (get ana-macros sym-name))]\n                [sym v]))\n          sym-ns\n          (or (some-> env :namespaces sym-ns (find sym-name))\n              (when-let [clazz (interop/resolve-class ctx sym-ns)]\n                [sym (with-meta\n                       [clazz sym-name]\n                       #?(:clj\n                          (if call?\n                            {:sci.impl.analyzer/static-access true}\n                            {:sci.impl/op :static-access\n                             :file @vars/current-file\n                             :ns @vars/current-ns})\n                          :cljs {:sci.impl/op :static-access}))]))\n          :else\n          ;; no sym-ns, this could be a symbol from clojure.core\n          (or\n           (let [kv (some-> env :namespaces (get 'clojure.core) (find sym-name))]\n             ;; only valid when the symbol isn't excluded\n             (when-not (some-> the-current-ns\n                               :refer\n                               (get 'clojure.core)\n                               :exclude\n                               (contains? sym-name))\n               kv))\n           (when (when call? (get ana-macros sym))\n             [sym sym])\n           (when-let [c (interop/resolve-class ctx sym)]\n             [sym c])\n           ;; resolves record or protocol referenced as class\n           ;; e.g. clojure.lang.IDeref which is really a var in clojure.lang/IDeref\n           (when-let [x (records/resolve-record-or-protocol-class ctx sym)]\n             [sym x]))))))\n\n(defn tag [_ctx expr]\n  (when-let [m (meta expr)]\n    (:tag m)))\n\n(defn lookup [{:keys [:bindings] :as ctx} sym call?]\n  (let [[k v :as kv]\n        (or\n         ;; bindings are not checked for permissions\n         (when-let [[k v]\n                    (find bindings sym)]\n           ;; never inline a binding at macro time!\n           (let [t (tag ctx v)\n                 v (mark-resolve-sym k)\n                 ;; pass along tag of expression!\n                 v (if t (vary-meta v\n                                    assoc :tag t)\n                       v)]\n             [k v]))\n         (when-let\n             [[k v :as kv]\n              (or\n               (lookup* ctx sym call?)\n               #_(when (= 'recur sym)\n                   [sym sym]))]\n           (check-permission! ctx k sym v)\n           kv))]\n    ;; (prn 'lookup sym '-> res)\n    (if-let [m (and (not (:sci.impl/prevent-deref ctx))\n                    (meta k))]\n      (if (:sci.impl/deref! m)\n        ;; the evaluation of this expression has been delayed by\n        ;; the caller and now is the time to deref it\n        [k (with-meta [v]\n             {:sci.impl/op :deref!})]\n        kv)\n      kv)))\n\n;; workaround for evaluator also needing this function\n(vreset! utils/lookup lookup)\n\n(defn resolve-symbol\n  ([ctx sym] (resolve-symbol ctx sym false))\n  ([ctx sym call?]\n   (let [sym sym ;; (strip-core-ns sym)\n         res (second\n              (or\n               (lookup ctx sym call?)\n               ;; TODO: check if symbol is in macros and then emit an error: cannot take\n               ;; the value of a macro\n               (let [n (name sym)]\n                 (cond\n                   (and call?\n                        (str/starts-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-dot*] ;; method invocation\n                   (and call?\n                        (str/ends-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-constructor]\n                   (str/starts-with? n \"'\") ;; TODO: deprecated?\n                   (let [v (symbol (subs n 1))]\n                     [v v])\n                   :else\n                   (throw-error-with-location\n                    (str \"Could not resolve symbol: \" (str sym))\n                    sym)))))]\n     ;; (prn 'resolve sym '-> res (meta res))\n     res)))\n"]}