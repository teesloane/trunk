{"version":3,"sources":["rewrite_clj/zip/editz.cljs"],"mappings":"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","names":["rewrite-clj.zip.editz/replace","zloc","value","clojure.zip/replace","rewrite-clj.node/coerce","rewrite-clj.zip.editz/edit-node","node","f","rewrite-clj.node/sexpr","G__29970","G__29969","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.editz/edit","seq29972","G__29973","cljs.core/first","cljs.core/next","G__29974","self__4805__auto__","args","p1__29971#","clojure.zip.edit","cljs.core.apply","rewrite-clj.zip.editz/splice","clojure.zip/branch?","temp__5751__auto__","children","clojure.zip/children","cljs.core.drop_while","rewrite-clj.node/whitespace?","cljs.core/reverse","cljs.core/seq","loc","cljs.core.reduce","clojure.zip/insert-right","rewrite-clj.zip.utils/remove-and-move-right","or__4212__auto__","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.zip.removez/remove","rewrite-clj.zip.editz/edit-token","str-fn","e","rewrite-clj.zip.base/sexpr","e'","cljs.core/Keyword","cljs.core.keyword","cljs.core/namespace","G__29981","cljs.core/name","cljs.core/Symbol","cljs.core.symbol","G__29983","rewrite-clj.node/token-node","rewrite-clj.zip.editz/edit-multi-line","line-fn","n","clojure.zip/node","cljs.core.update_in","cljs.core.comp","cljs.core/vec","rewrite-clj.zip.editz/prefix","s","G__29988","js/Error","rewrite-clj.zip.base/tag","p1__29985#","lines","cljs.core/empty?","p1__29986#","rewrite-clj.zip.editz/suffix","G__29992","p1__29991#","cljs.core.concat","cljs.core/butlast","cljs.core/last"],"sourcesContent":["(ns rewrite-clj.zip.editz\n  (:refer-clojure :exclude [replace])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.removez :as r]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [rewrite-clj.node :as n]\n            [clojure.zip :as z]))\n\n;; ## In-Place Modification\n\n(defn replace\n  \"Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)\"\n  [zloc value]\n  (z/replace zloc (n/coerce value)))\n\n(defn- edit-node\n  \"Create s-expression from node, apply the function and create\n   node from the result.\"\n  [node f]\n  (-> (n/sexpr node)\n      (f)\n      (n/coerce)))\n\n(defn edit\n  \"Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)\"\n  [zloc f & args]\n  (z/edit zloc edit-node #(apply f % args)))\n\n;; ## Splice\n\n\n\n(defn splice\n  \"Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   \"\n  [zloc]\n  (if (z/branch? zloc)\n    (if-let [children (->> (z/children zloc)\n                           (drop-while n/whitespace?)\n                           (reverse)\n                           (drop-while n/whitespace?)\n                           (seq))]\n      (let [loc (->> (reduce z/insert-right zloc children)\n                     (u/remove-and-move-right))]\n        (or (ws/skip-whitespace loc) loc))\n      (r/remove zloc))\n    zloc))\n\n;; ## Prefix/Suffix\n\n(defn- edit-token\n  [zloc str-fn]\n  (let [e (base/sexpr zloc)\n        e' (cond (string? e) (str-fn e)\n                 (keyword? e) (keyword (namespace e) (str-fn (name e)))\n                 (symbol? e) (symbol (namespace e) (str-fn (name e))))]\n    (z/replace zloc (n/token-node e'))))\n\n(defn- edit-multi-line\n  [zloc line-fn]\n  (let [n (-> (z/node zloc)\n              (update-in [:lines] (comp line-fn vec)))]\n    (z/replace zloc n)))\n\n(defn prefix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str s %))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (update-in lines [0] #(str s %))))\n                     (edit-multi-line zloc ))))\n\n(defn suffix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str % s))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (concat (butlast lines) (str (last lines) s))))\n                     (edit-multi-line zloc))))\n"]}