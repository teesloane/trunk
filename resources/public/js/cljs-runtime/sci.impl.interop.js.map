{"version":3,"sources":["sci/impl/interop.cljc"],"mappings":";AAeG,AACE,wBAAA,xBAAMA,wDAAMC;AAAZ,AACE,GAAI,cAAWC,bAAOD;AAEpB,OAAOA;;AACP,OAACE,qBAAQF;;;;AAEb,mCAAA,nCAAMG,8EAAiBC;AAAvB,AACE,OAACC,mBAAS,AAACC,4CAAIP,sBAAKK;;AAE3B,0CAAA,1CAAMG,4FACQC,IAAIC,cAAcC,YAAYN;AAD5C,AAGa,GAAI,CAAA,QAAe,mBAAA,nBAASM;AAC1B,QAAMF,IAAI,yDAAA,zDAACG,6CAAKD;;AAChB,IAAAE,qBAAgB,CAAMJ,IAAIE;AAA1B,AAAA,oBAAAE;AAAA,aAAAA,TAASC;AAAT,AACE,OAAQA,aAAOL,IAAI,AAACL,iCAAgBC;;AACpC,MAAO,KAAAU,MAAW,CAAA,+EAAwCJ;;;;AAU3E,oCAAA,4CAAAK,hFAAMG;AAAN,AAAA,IAAAF,aAAAD;aAAA,AAAAE,4CAAAD,WAAA,IAAA,pEACkCG;qBADlC,AAAAF,4CAAAD,WAAA,IAAA,5EACwCI;AADxC,AAGW,GAAI,2FAAA,3FAACC,+BAAc,4CAAKD;AACtB,OAACE,8CAAMC,2BAAoBJ,OAAM,+GAAA,/GAACK,mDAAU,4CAAKJ;;AACjD,OAACK,gBAASN,OAAMC;;;AAG1B,yCAAA,zCAAMM,0FAAuBC,aAAYvB;AAAzC,AACE,IAAMwB,OAAK,AAACC,8BAAiCF;IACvCvB,WAAK,AAACD,iCAAgBC;AAD5B,AAEE,IAAA0B,WAAM,EAAO1B;AAAb,AAAA,QAAA0B;KAAA;AACI,YAAKF;;;KADT;AAEI,YAAKA,KAAK,qDAAA,rDAACX,4CAAIb;;;KAFnB;AAGI,YAAKwB,KAAK,qDAAA,rDAACX,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb;;;KAHhC;AAII,YAAKwB,KAAK,qDAAA,rDAACX,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb;;;KAJ7C;AAKI,YAAKwB,KAAK,qDAAA,rDAACX,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb;;;KAL1D;AAMI,YAAKwB,KAAK,qDAAA,rDAACX,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb;;;KANvE;AAOI,YAAKwB,KAAK,qDAAA,rDAACX,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb;;;KAPpF;AAQI,YAAKwB,KAAK,qDAAA,rDAACX,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb,cAAQ,qDAAA,rDAACa,4CAAIb;;;;AAE/F,MAAO,gDAAA,4DAAA,2CAAA,vJAAC2B,2NAAkFJ;;;;AAEnG,sCAAA,tCAAMK,oFAC6BL,aAAYvB;AAD/C,AAGW,OAACsB,uCAAsBC,aAAYvB;;AAE9C,wCAAA,gDAAA6B,xFAAME,iGACmD/B;AADzD,AAAA,IAAA8B,aAAAD;aAAA,AAAAhB,4CAAAiB,WAAA,IAAA,pEACsCf;kBADtC,AAAAF,4CAAAiB,WAAA,IAAA,zEAC4CxB;AAD5C,AAIW,IAAAE,qBAAgB,AAACa,gBAASN,OAAMT;AAAhC,AAAA,oBAAAE;AAAA,aAAAA,TAASC;AAAT,AACE,OAAQA,aAAOM,OAAM,AAAChB,iCAAgBC;;AACtC,IAAMM,kBAAY,4CAAKA;IACjB0B,QAAM,kCAAA,lCAAClB,qHAAkBC,OAAMT;AADrC,AAEE,GACE,AAAC2B,cAAID;AACL,MAAO,KAAAtB,MAAW,CAAA,gCAAqCJ;;AAFzD,GAGE,gDAAA,hDAAC4B,gCAA0B5B;AAC3B,OAACgB,uCAAsBU,MAAMhC;;AAJ/B,AAME,OAACkB,8CAAM,kCAAA,lCAACJ,qHAAkBC,OAAMT,yBAAcN;;;;;;AAE/D,uCAAA,+CAAAmC,tFAAMM,+FAAiDC;AAAvD,AAAA,IAAAN,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;IAAAE,MAAA,AAAAC,4CAAAH,eAAA;IAAAI,iBAAA,AAAAD,4CAAAH,eAAA;AAAA,AACE,IAAAO,mBACa,iBAAAnC,qBAAa,AAACqC,oBAAUH;AAAxB,AAAA,oBAAAlC;AAAA,eAAAA,XAASoC;AAAT,AACE,GAAM,CAAA,SAAiBA;AAAvB,AACE,GAAM,AAACE,0BAAUN,eAAY,AAACO,+CAAO,AAACC,eAAKN;AAA3C,AACEA;;AADF;;;AADF;;;AAGA,GAAM,AAACI,0BAAUN,eAAYE;AAA7B,AACEA;;AADF;;;;AALf,AAAA,oBAAAC;AAAAA;;AAOI,cAAA,AAAAM,VAAMX,0BAAKA;AAAX,AACE,IAAAK,uBAAI,AAACJ,4CAAI,AAAA,0FAAUD,SAAKI;AAAxB,AAAA,oBAAAC;AAAAA;;AACI,IAAMO,MAAI,AAACC;AAAX,AACE,8DAAA,mFAAA,sEAAA,hNAACC,+CAAOd,6JAAiBY,gEAAaR;;;;AAEpD,sCAAA,8CAAAW,pFAAME,6FAAgDb;AAAtD,AAAA,IAAAY,aAAAD;IAAAC,iBAAA,AAAAjB,4BAAAiB;IAAAhB,MAAA,AAAAC,4CAAAe,eAAA;IAAAd,iBAAA,AAAAD,4CAAAe,eAAA;AAAA,AACE,IAAME,aAAW,iBAAAb,mBACQ,iBAAAnC,qBAAa,AAACqC,oBAAUH;AAAxB,AAAA,oBAAAlC;AAAA,eAAAA,XAASoC;AAAT,AACE,GAAM,CAAA,SAAiBA;AAAvB,AACE,OAACL,4CAAIC,eAAY,AAACO,+CAAO,AAACC,eAAKN;;AADjC;;;AAEA,OAACH,4CAAIC,eAAYE;;;AAJ3B,AAAA,oBAAAC;AAAAA;;AAKI,cAAA,AAAAM,VAAMX,0BAAKA;AAAX,AAEG,IAAMY,MAAI,AAACC;IACLM,UAAQ,uDAAA,mFAAA,sEAAA,hNAACL,+CAAOd,6JAAiBY;AADvC,AAEE,IAAA1C,qBAAe,AAACoD,eAAKH,QAAQf;AAA7B,AAAA,oBAAAlC;AAAA,IAAAkD,aAAAlD;QAAA,AAAAK,4CAAA6C,WAAA,IAAA,/DAAUC;QAAV,AAAA9C,4CAAA6C,WAAA,IAAA,/DAAY9D;AAAZ,AAEE,OAAC2C,4CAAIC,eAAY5C;;AACjB,IAAAiE,qBAAa,uDAAA,mFAAA,1IAACT,+CAAOd,uJAAcI;AAAnC,AAAA,oBAAAmB;AAAA,AAAA,QAAAA,JAAWjE;AAAX,AACE,OAAC2C,4CAAIC,eAAY5C;;AADnB;;;;;AAZ5B,AAcE4D;;AAEJ,iCAAA,jCAAMM,0EAAeC,IAAIrB;AAAzB,AACE,OAAA,sFAAQ,AAACa,oCAAmBQ,IAAIrB","names":["sci.impl.interop/toJS","v","cljs.core/MetaFn","cljs.core/clj->js","sci.impl.interop/js-object-array","args","cljs.core/to-array","cljs.core.map","sci.impl.interop/invoke-instance-method","obj","_target-class","method-name","cljs.core.subs","temp__5751__auto__","method","js/Error","p__31121","vec__31122","cljs.core.nth","sci.impl.interop/get-static-field","class","field-name-sym","clojure.string/includes?","cljs.core.apply","goog.object/getValueByKeys","clojure.string.split","goog.object/get","sci.impl.interop/invoke-js-constructor","constructor","ctor","js/Function.prototype.bind.apply","G__31126","cljs.core.ex_info","sci.impl.interop/invoke-constructor","p__31128","vec__31129","sci.impl.interop/invoke-static-method","field","cljs.core/not","clojure.string/ends-with?","p__31135","map__31136","cljs.core/--destructure-map","env","cljs.core.get","class->opts","sci.impl.interop/fully-qualify-class","sym","or__4212__auto__","ns*","cljs.core/namespace","cljs.core/contains?","cljs.core.symbol","cljs.core/name","cljs.core/deref","cnn","sci.impl.vars/current-ns-name","cljs.core.get_in","p__31151","map__31152","sci.impl.interop/resolve-class-opts","class-opts","imports","vec__31159","_","cljs.core/find","temp__5753__auto__","sci.impl.interop/resolve-class","ctx"],"sourcesContent":["(ns sci.impl.interop\n  {:no-doc true}\n  #?(:clj (:import [sci.impl Reflector]))\n  (:require #?(:cljs [goog.object :as gobj])\n            [sci.impl.vars :as vars]\n            #?(:cljs [clojure.string])\n            [clojure.string :as str]))\n\n;; see https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Reflector.java\n;; see invokeStaticMethod, getStaticField, etc.\n\n#?(:clj (set! *warn-on-reflection* true))\n\n\n#?(:cljs\n   (do\n     (defn toJS [v]\n       (if (instance? MetaFn v)\n         ;; when returning a function, make it callable from JS\n         (.-afn v)\n         (clj->js v)))\n\n     (defn js-object-array [args]\n       (to-array (map toJS args)))))\n\n(defn invoke-instance-method\n  #?@(:cljs [[obj _target-class method-name args]\n             ;; gobj/get didn't work here\n             (if (identical? \\- (.charAt method-name 0))\n               (aget obj (subs method-name 1))\n               (if-let [method (aget obj method-name)]\n                 (.apply method obj (js-object-array args))\n                 (throw (js/Error. (str \"Could not find instance method: \" method-name)))))]\n      :clj\n      [#_([obj method args]\n        (invoke-instance-method obj nil method args))\n       ([obj target-class method args]\n        (if-not target-class\n          (Reflector/invokeInstanceMethod obj method (object-array args))\n          (let [methods (Reflector/getMethods target-class (count args) method false)]\n            (Reflector/invokeMatchingMethod method methods obj (object-array args)))))]))\n\n(defn get-static-field #?(:clj [[^Class class field-name-sym]]\n                          :cljs [[class field-name-sym]])\n  #?(:clj (Reflector/getStaticField class (str field-name-sym))\n     :cljs (if (str/includes? (str field-name-sym) \".\")\n             (apply gobj/getValueByKeys class (str/split (str field-name-sym) #\"\\.\"))\n             (gobj/get class field-name-sym))))\n\n#?(:cljs\n   (defn invoke-js-constructor [constructor args]\n     (let [ctor (js/Function.prototype.bind.apply constructor)\n           args (js-object-array args)]\n       (case (count args)\n         0 (new ctor)\n         1 (new ctor (nth args 0))\n         2 (new ctor (nth args 0) (nth args 1))\n         3 (new ctor (nth args 0) (nth args 1) (nth args 2))\n         4 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3))\n         5 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3) (nth args 4))\n         6 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3) (nth args 4) (nth args 5))\n         7 (new ctor (nth args 0) (nth args 1) (nth args 2) (nth args 3) (nth args 4) (nth args 5) (nth args 6))\n\n         (throw (ex-info \"Constructors with more than 7 arguments are not supported\" {:constructor constructor}))))))\n\n(defn invoke-constructor #?(:clj [^Class class args]\n                            :cljs [constructor args])\n  #?(:clj (Reflector/invokeConstructor class (object-array args))\n     :cljs (invoke-js-constructor constructor args)))\n\n(defn invoke-static-method #?(:clj [[^Class class method-name] args]\n                              :cljs [[class method-name] args])\n  #?(:clj\n     (Reflector/invokeStaticMethod class (str method-name) (object-array args))\n     :cljs (if-let [method (gobj/get class method-name)]\n             (.apply method class (js-object-array args))\n             (let [method-name (str method-name)\n                   field (get-static-field [class method-name])]\n               (cond\n                 (not field)\n                 (throw (js/Error. (str \"Could not find static method \" method-name)))\n                 (clojure.string/ends-with? method-name \".\")\n                 (invoke-js-constructor field args)\n                 :else\n                 (apply (get-static-field [class method-name]) args))))))\n\n(defn fully-qualify-class [{:keys [:env :class->opts]} sym]\n  (or #?(:clj (when (contains? class->opts sym) sym)\n         :cljs (if-let [ns* (namespace sym)]\n                 (when (identical? \"js\" ns*)\n                   (when (contains? class->opts (symbol (name sym)))\n                     sym))\n                 (when (contains? class->opts sym)\n                   sym)))\n      (let [env @env]\n        (or (get (:imports env) sym)\n            (let [cnn (vars/current-ns-name)]\n              (get-in env [:namespaces cnn :imports sym]))))))\n\n(defn resolve-class-opts [{:keys [:env :class->opts]} sym]\n  (let [class-opts (or #?(:clj (get class->opts sym)\n                     :cljs (if-let [ns* (namespace sym)]\n                             (when (identical? \"js\" ns*)\n                               (get class->opts (symbol (name sym))))\n                             (get class->opts sym)))\n                       (let [env @env]\n                         (or\n                          (let [cnn (vars/current-ns-name)\n                                imports (get-in env [:namespaces cnn :imports])]\n                            (if-let [[_ v] (find imports sym)]\n                              ;; finding a nil v means the object was unmapped\n                              (get class->opts v)\n                              (when-let [v (get-in env [:imports sym])]\n                                (get class->opts v)))))))]\n    class-opts))\n\n(defn resolve-class [ctx sym]\n  (:class (resolve-class-opts ctx sym)))\n"]}