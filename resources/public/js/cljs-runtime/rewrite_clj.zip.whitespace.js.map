{"version":3,"sources":["rewrite_clj/zip/whitespace.cljs"],"mappings":";AAMA,+CAAA,/CAAMA,sGACHC;AADH,AAEE,IAAAC,WAAQD;IAARC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,4IAAAA,6DAAAA,jMAAoBE,mEAAAA,iFAAAA;;;AAEtB,8CAAA,9CAAMC,oGACHJ;AADH,AAEE,IAAAK,WAAQL;IAARK,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaH;AAAb,AAAA,GAAA,CAAAG,gBAAA;AAAA;;AAAA,0IAAAA,4DAAAA,9LAAoBC,kEAAAA,gFAAAA;;;AAEtB,4CAAA,5CAAMC,gGACHP;AADH,AAEE,IAAAQ,WAAQR;IAARQ,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaN;AAAb,AAAA,GAAA,CAAAM,gBAAA;AAAA;;AAAA,sIAAAA,0DAAAA,xLAAoBC,gEAAAA,8EAAAA;;;AAEtB,6DAAA,7DAAMC,kIACHV;AADH,AAEE,IAAAW,oBACC,AAACZ,6CAAYC;AADd,AAAA,oBAAAW;AAEC,OAACC,cAAI,AAACR,4CAAWJ;;AAFlBW;;;AAIF,0DAAA,1DAAME,4HACHb;AADH,AAEE,IAAAc,WAAQd;IAARc,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaZ;AAAb,AAAA,GAAA,CAAAY,gBAAA;AAAA;;AAAA,qDAAAA,9CAAoBC;;;AAKtB;;;kCAAA,lCAAMC,4EAEHC,EAAEC,SAAGlB;AAFR,yPAGO,AAACmB,kBAAQF,EAAEjB,1FACX,AAACoB,mDAAWC,nJACZ,AAACD,mDAAW,AAACE,qBAAWC,pIACxB,AAACC,mDAAWN,1EACZ,OAACO;;AAER,AAAA;;;;6CAAA,qDAAAC,lGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAMD,sFAGF5B;AAHJ,AAGU,OAAC8B,yEAAgBC,kBAAQ/B;;;AAHnC,CAAA,2EAAA,3EAAM4B,sFAIFX,EAAEjB;AAJN,AAIY,OAACgB,gCAAKC,EAAEJ,wDAAuBb;;;AAJ3C,CAAA,qEAAA,rEAAM4B;;AAAN,AAMA;;;kDAAA,lDAAMI,4GAEHhC;AAFH,AAGE,OAAC8B,yEAAgBG,iBAAOjC;;AAI1B,AAAA;;;2CAAA,mDAAA0B,9FAAMS;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAN,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAMM,oFAEFnC;AAFJ,AAEU,mFAAA,5EAACoC,uEAAcpC;;;AAFzB,CAAA,yEAAA,zEAAMmC,oFAGFnC,KAAKqC;AAHT,AAIG,OAACC,wBAActC,KAAK,CAACuC,wDAAAA,2DAAAA,LAAYF,uCAAAA;;;AAJpC,CAAA,mEAAA,nEAAMF;;AAAN,AAMA,AAAA;;;0CAAA,kDAAAT,5FAAMe;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAZ,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wEAAA,xEAAMY,mFAEFzC;AAFJ,AAEU,kFAAA,3EAAC0C,sEAAa1C;;;AAFxB,CAAA,wEAAA,xEAAMyC,mFAGFzC,KAAKqC;AAHT,AAIG,OAACM,yBAAe3C,KAAK,CAACuC,wDAAAA,2DAAAA,LAAYF,uCAAAA;;;AAJrC,CAAA,kEAAA,lEAAMI;;AAAN,AAMA,AAAA;;;6CAAA,qDAAAf,lGAAMmB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAhB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAMgB,sFAEF7C;AAFJ,AAEU,qFAAA,9EAAC8C,yEAAgB9C;;;AAF3B,CAAA,2EAAA,3EAAM6C,sFAGF7C,KAAKqC;AAHT,AAIG,OAACC,wBAActC,KAAK,CAAC+C,0DAAAA,6DAAAA,LAAcV,yCAAAA;;;AAJtC,CAAA,qEAAA,rEAAMQ;;AAAN,AAMA,AAAA;;;4CAAA,oDAAAnB,hGAAMuB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0EAAA,1EAAMoB,qFAEFjD;AAFJ,AAEU,oFAAA,7EAACkD,wEAAelD;;;AAF1B,CAAA,0EAAA,1EAAMiD,qFAGFjD,KAAKqC;AAHT,AAIG,OAACM,yBAAe3C,KAAK,CAAC+C,0DAAAA,6DAAAA,LAAcV,yCAAAA;;;AAJvC,CAAA,oEAAA,pEAAMY;;AAAN","names":["rewrite-clj.zip.whitespace/whitespace?","zloc","G__29885","clojure.zip/node","rewrite-clj.node/whitespace?","rewrite-clj.zip.whitespace/linebreak?","G__29886","rewrite-clj.node/linebreak?","rewrite-clj.zip.whitespace/comment?","G__29887","rewrite-clj.node/comment?","rewrite-clj.zip.whitespace/whitespace-not-linebreak?","and__4210__auto__","cljs.core/not","rewrite-clj.zip.whitespace/whitespace-or-comment?","G__29892","rewrite-clj.node/whitespace-or-comment?","rewrite-clj.zip.whitespace/skip","f","p?","cljs.core/iterate","cljs.core.take_while","cljs.core/identity","cljs.core/complement","clojure.zip/end?","cljs.core.drop_while","cljs.core/first","var_args","G__29895","rewrite-clj.zip.whitespace/skip-whitespace","js/Error","rewrite_clj.zip.whitespace.skip_whitespace","clojure.zip/right","rewrite-clj.zip.whitespace/skip-whitespace-left","clojure.zip/left","G__29897","rewrite-clj.zip.whitespace/prepend-space","rewrite_clj.zip.whitespace.prepend_space","n","clojure.zip/insert-left","rewrite-clj.node/spaces","G__29904","rewrite-clj.zip.whitespace/append-space","rewrite_clj.zip.whitespace.append_space","clojure.zip/insert-right","G__29915","rewrite-clj.zip.whitespace/prepend-newline","rewrite_clj.zip.whitespace.prepend_newline","rewrite-clj.node/newlines","G__29923","rewrite-clj.zip.whitespace/append-newline","rewrite_clj.zip.whitespace.append_newline"],"sourcesContent":["(ns rewrite-clj.zip.whitespace\n  (:require [rewrite-clj.node :as node]\n            [clojure.zip :as z]))\n\n;; ## Predicates\n\n(defn whitespace?\n  [zloc]\n  (some-> zloc z/node node/whitespace?))\n\n(defn linebreak?\n  [zloc]\n  (some-> zloc z/node node/linebreak?))\n\n(defn comment?\n  [zloc]\n  (some-> zloc z/node node/comment?))\n\n(defn whitespace-not-linebreak?\n  [zloc]\n  (and\n   (whitespace? zloc)\n   (not (linebreak? zloc))))\n\n(defn whitespace-or-comment?\n  [zloc]\n  (some-> zloc z/node node/whitespace-or-comment?))\n\n\n;; ## Movement\n\n(defn skip\n  \"Perform the given movement while the given predicate returns true.\"\n  [f p? zloc]\n  (->> (iterate f zloc)\n       (take-while identity)\n       (take-while (complement z/end?))\n       (drop-while p?)\n       (first)))\n\n(defn skip-whitespace\n  \"Perform the given movement (default: `z/right`) until a non-whitespace/\n   non-comment node is encountered.\"\n  ([zloc] (skip-whitespace z/right zloc))\n  ([f zloc] (skip f whitespace-or-comment? zloc)))\n\n(defn skip-whitespace-left\n  \"Move left until a non-whitespace/non-comment node is encountered.\"\n  [zloc]\n  (skip-whitespace z/left zloc))\n\n;; ## Insertion\n\n(defn prepend-space\n  \"Prepend a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (prepend-space zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/spaces n))))\n\n(defn append-space\n  \"Append a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (append-space zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/spaces n))))\n\n(defn prepend-newline\n  \"Prepend a newlines node representing the given number of newlines (default: 1).\"\n  ([zloc] (prepend-newline zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/newlines n))))\n\n(defn append-newline\n  \"Append a newline node representing the given number of newlines (default: 1).\"\n  ([zloc] (append-newline zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/newlines n))))\n"]}