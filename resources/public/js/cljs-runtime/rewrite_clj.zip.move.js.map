{"version":3,"sources":["rewrite_clj/zip/move.cljs"],"mappings":";AAKA;;;6BAAA,7BAAMA,kEAEHC;AAFH,AAGE,IAAAC,WAAQD;IAARC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,kBAAAA,lBAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,gFAAAA,zEAAqBE;;;AAEvB;;;4BAAA,5BAAMC,gEAEHJ;AAFH,AAGE,IAAAK,WAAQL;IAARK,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,uDAAAA,hDAAoBE;;;AAEtB;;;4BAAA,5BAAMC,gEAEHR;AAFH,AAGE,IAAAS,WAAQT;IAARS,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,gFAAAA,zEAAoBN;;;AAEtB;;;0BAAA,1BAAMQ,4DAEHX;AAFH,AAGE,IAAAY,WAAQZ;IAARY,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,eAAAA,fAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,uDAAAA,hDAAkBL;;;AAEpB;;;4BAAA,5BAAMO,gEAEHd;AAFH,AAGE,oBAAMA;AAAN,AACE,IAAAe,mBAAI,iBAAAC,WAAShB;IAATgB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBACSC;AADT,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAES,iGAAAA,1FAACb,yEAAmBc;;;AAFjC,AAAA,oBAAAF;AAAAA;;AAGI,8EAAA,2FAAA,lKAACG,kDAAUlB,KAAKmB;;;AAJtB;;;AAMF;;;kCAAA,lCAAMC,4EAEHpB;AAFH,AAGE,IAAAe,mBAAI,AAACM,cAAIrB;AAAT,AAAA,GAAAe;AAAAA;;AAAA,IAAAA,uBACI,AAACO,uBAAOtB;AADZ,AAAA,GAAAe;AAAAA;;AAEI,OAAA,yHAAQ,AAACQ,eAAKvB;;;;AAEpB;;;;wCAAA,xCAAMwB,wFAGHxB;AAHH,AAIE,6GAAA,rGAAM,AAACG,yEAAmB,AAACD,kBAAQF;;AAErC;;;;uCAAA,vCAAMyB,sFAGHzB;AAHH,AAIE,mFAAA,3EAAM,AAACO,gDAAwB,AAACD,iBAAON;;AAEzC;;;4BAAA,5BAAM0B,gEAEH1B;AAFH,AAGE,IAAA2B,WAAS3B;IAAT2B,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBACSC;AADT,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAES,iGAAAA,1FAACxB,yEAAmByB;;;AAE/B;;;gCAAA,hCAAMC,wEAEH7B;AAFH,AAGE,IAAA8B,WAAQ9B;IAAR8B,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,qBAAAA,rBACQC;AADR,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,gFAAAA,zEAEQ3B;;;AAEV;;;iCAAA,jCAAM6B,0EAEHhC;AAFH,AAGE,IAAAiC,WAAQjC;IAARiC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,sBAAAA,tBACQC;AADR,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,uDAAAA,hDAEQ1B","names":["rewrite-clj.zip.move/right","zloc","G__29927","clojure.zip/right","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.zip.move/left","G__29929","clojure.zip/left","rewrite-clj.zip.whitespace/skip-whitespace-left","rewrite-clj.zip.move/down","G__29932","clojure.zip/down","rewrite-clj.zip.move/up","G__29936","clojure.zip/up","rewrite-clj.zip.move/next","or__4212__auto__","G__29939","clojure.zip/next","cljs.core.vary_meta","cljs.core/assoc","rewrite-clj.zip.move/end?","cljs.core/not","clojure.zip/end?","cljs.core/meta","rewrite-clj.zip.move/rightmost?","rewrite-clj.zip.move/leftmost?","rewrite-clj.zip.move/prev","G__29946","clojure.zip/prev","rewrite-clj.zip.move/leftmost","G__29947","clojure.zip/leftmost","rewrite-clj.zip.move/rightmost","G__29948","clojure.zip/rightmost"],"sourcesContent":["(ns rewrite-clj.zip.move\n  (:refer-clojure :exclude [next])\n  (:require [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n(defn right\n  \"Move right to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/right ws/skip-whitespace))\n\n(defn left\n  \"Move left to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/left ws/skip-whitespace-left))\n\n(defn down\n  \"Move down to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/down ws/skip-whitespace))\n\n(defn up\n  \"Move up to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/up ws/skip-whitespace-left))\n\n(defn next\n  \"Move to the next non-whitespace/non-comment location in a depth-first manner.\"\n  [zloc]\n  (when zloc\n    (or (some->> zloc\n                 z/next\n                 (ws/skip-whitespace z/next))\n        (vary-meta zloc assoc ::end? true))))\n\n(defn end?\n  \"Check whether the given node is at the end of the depth-first traversal.\"\n  [zloc]\n  (or (not zloc)\n      (z/end? zloc)\n      (::end? (meta zloc))))\n\n(defn rightmost?\n  \"Check if the given location represents the leftmost non-whitespace/\n   non-comment one.\"\n  [zloc]\n  (nil? (ws/skip-whitespace (z/right zloc))))\n\n(defn leftmost?\n  \"Check if the given location represents the leftmost non-whitespace/\n   non-comment one.\"\n  [zloc]\n  (nil? (ws/skip-whitespace-left (z/left zloc))))\n\n(defn prev\n  \"Move to the next non-whitespace/non-comment location in a depth-first manner.\"\n  [zloc]\n  (some->> zloc\n           z/prev\n           (ws/skip-whitespace z/prev)))\n\n(defn leftmost\n  \"Move to the leftmost non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc\n          z/leftmost\n          ws/skip-whitespace))\n\n(defn rightmost\n  \"Move to the rightmost non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc\n          z/rightmost\n          ws/skip-whitespace-left))\n"]}