{"version":3,"sources":["shadow/remote/runtime/obj_support.cljc"],"mappings":"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","names":["this__4461__auto__","k__4462__auto__","this__4463__auto__","k51549","else__4464__auto__","G__51560","cljs.core/Keyword","obj","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__51561","vec__51562","k__4485__auto__","cljs.core.nth","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__51548","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this51550","other51551","cljs.core._EQ_","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__51576","this__4469__auto__","k__4470__auto__","pred__51580","cljs.core/keyword-identical?","expr__51581","cljs.core.assoc","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.remote.runtime.obj-support/Reference","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__51554","extmap__4501__auto__","G__51589","cljs.core/record?","shadow.remote.runtime.obj-support/->Reference","shadow.remote.runtime.obj-support/map->Reference","shadow.remote.runtime.obj-support/obj-ref","shadow.remote.runtime.obj-support/obj-ref?","result","shadow.remote.runtime.obj-support/now","js/Date.now","shadow.remote.runtime.obj-support/next-oid","cljs.core/random-uuid","shadow.remote.runtime.obj-support/register*","state","oid","obj-info","ts","obj-entry","cljs.core/assoc-in","shadow.remote.runtime.obj-support/obj-type-string","cljs.core.pr_str","cljs.core/type","js/shadow","js/shadow.remote","js/shadow.remote.runtime","js/shadow.remote.runtime.obj-support","js/shadow.remote.runtime.obj-support.make-view","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","fexpr__51591","cljs.core/MultiFn","cljs.core.symbol","shadow.remote.runtime.obj-support/make-view","p__51592","map__51593","cljs.core/--destructure-map","state-ref","view-type","msg","entry","shadow.remote.runtime.obj-support/default-max-print-size","p__51594","map__51595","shadow.remote.runtime.obj-support/as-edn","data","limit","lw","shadow.remote.runtime.writer/limit-writer","cljs.core/pr-writer","cljs.core/pr-opts","shadow.remote.runtime.writer/get-string","p__51596","map__51597","shadow.remote.runtime.obj-support/as-pprint","cljs.pprint.pprint","p__51601","map__51602","shadow.remote.runtime.obj-support/as-edn-limit","shadow.remote.runtime.writer/pr-str-limit","shadow.remote.runtime.obj-support/as-str","shadow.remote.runtime.obj-support/as-ex-str","ex","js/Error","cljs.repl/error->str","cljs.core/second","shadow.remote.runtime.obj-support/exception?","x","shadow.remote.runtime.obj-support/attempt-to-sort","desc","coll","e51609","cljs.core/vec","cljs.core.sort","e","p__51610","map__51611","shadow.remote.runtime.obj-support/browseable-kv","view-order","p__51612","map__51613","idx","key","val","nav","clojure.datafy/nav","p__51614","map__51615","start","num","key-limit","val-limit","end","x__4298__auto__","y__4299__auto__","idxs","cljs.core.range","fragment","m","e51618","e51620","p__51621","map__51622","shadow.remote.runtime.obj-support/browseable-vec","p__51623","map__51624","p__51625","map__51626","p__51630","map__51631","shadow.remote.runtime.obj-support/browseable-seq","p__51632","map__51633","p__51634","map__51635","p__51636","map__51637","shadow.remote.runtime.obj-support/pageable-seq","seq-state-ref","p__51638","map__51639","cljs.core/deref","p__51640","map__51641","map__51642","vec__51643","tail","realized","seq-state","missing","next","cljs.core/first","cljs.core/rest","cljs.core.conj","cljs.core.swap_BANG_","cljs.core/assoc","p__51646","map__51647","shadow.remote.runtime.obj-support/inspect-basic","opts","e51648","cljs.core.update","cljs.core/merge","cljs.core/boolean?","cljs.core/Symbol","cljs.core/map?","cljs.core/keys","cljs.core/set?","cljs.core/list?","cljs.core/seq?","shadow.remote.runtime.obj-support/inspect-type-info","shadow.remote.runtime.obj-support/inspect-source-info","cljs.core/select-keys","p__51649","map__51650","shadow.remote.runtime.obj-support/add-summary-op","summary","shadow.remote.runtime.obj-support/default-describe","o","clojure.datafy/datafy","p1__51651#","p1__51652#","p1__51653#","G__51656","cljs.core/coll?","p1__51654#","p1__51655#","goog.object/set","shadow.remote.runtime.api/Inspectable","shadow.remote.runtime.api/describe","p__51657","map__51658","shadow.remote.runtime.obj-support/add-supports","handlers","cljs.core/set","p__51659","map__51660","shadow.remote.runtime.obj-support/ensure-descriptor","p__51665","map__51666","shadow.remote.runtime.obj-support/get-tap-history","svc","cljs.core/vals","p1__51663#","cljs.core.filter","cljs.core.get_in","p1__51664#","cljs.core.sort_by","cljs.core/reverse","cljs.core.take","cljs.core.map","p__51670","map__51671","shadow.remote.runtime.obj-support/obj-describe*","cljs.core/update-in","p__51672","p__51673","map__51674","map__51675","shadow.remote.runtime.obj-support/obj-describe","runtime","temp__5751__auto__","shadow.remote.runtime.shared/reply","p__51676","p__51677","map__51678","map__51679","shadow.remote.runtime.obj-support/obj-request","this","request-op","request-fn","cljs.core/not","e51680","new-oid","new-entry","reply-msg","G__51684","js/console.warn","G__51681","G__51682","G__51683","shadow.remote.runtime.obj-support/register","p__51685","p__51686","map__51687","map__51688","shadow.remote.runtime.obj-support/obj-forget","cljs.core/update","cljs.core/dissoc","p__51694","map__51695","shadow.remote.runtime.obj-support/obj-forget-all","shadow.remote.runtime.obj-support/basic-gc!","objs-to-drop","cljs.core.drop","shadow.remote.runtime.obj-support/start","p1__51698#","p1__51699#","p1__51700#","p1__51701#","shadow.remote.runtime.api/add-extension","p__51702","map__51703","cljs.core.merge","p__51704","map__51705","shadow.remote.runtime.obj-support/get-ref","obj-id","p__51706","map__51707","shadow.remote.runtime.obj-support/stop","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.obj-support\n  (:require\n    [clojure.datafy :as d]\n    [clojure.pprint :refer (pprint)]\n    [clojure.spec.alpha :as spec]\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.writer :as lw]\n    ;; FIXME: I do not like importing these here\n    ;; need to extract shadow-cljs functions if I ever move shadow.remote out\n    ;; cljs.repl has way too much other stuff on the CLJ side not error related we don't really need here\n    ;; should just have one namespace only concerned with formatting errors\n    ;; maybe even as separate plugin\n    #?@(:clj [[shadow.cljs.devtools.errors :refer (error-format)]\n              [shadow.jvm-log]]\n        :cljs [[cljs.repl :refer (error->str)]]))\n  #?(:clj (:import [java.util UUID])))\n\n(defrecord Reference [obj])\n\n(defn obj-ref [obj]\n  (when (some? obj)\n    (Reference. obj)))\n\n(defn obj-ref? [result]\n  (instance? Reference result))\n\n(defn now []\n  #?(:clj\n     (System/currentTimeMillis)\n     :cljs\n     (js/Date.now)))\n\n(defn next-oid []\n  #?(:clj\n     (str (UUID/randomUUID))\n     :cljs\n     (str (random-uuid))))\n\n(defn register*\n  [state oid obj obj-info]\n\n  (let [ts (now)\n\n        obj-entry\n        {:oid oid\n         :obj obj\n         ;; tracking that for GC purposes\n         :access-at ts\n         :obj-info (assoc obj-info :added-at ts)}]\n\n    (assoc-in state [:objects oid] obj-entry)))\n\n(declare register)\n\n(defn obj-type-string [obj]\n  (if (nil? obj)\n    \"nil\"\n    #?(:clj\n       (-> (class obj) (.getName))\n       :cljs\n       (pr-str (type obj)))))\n\n(defmulti make-view\n  (fn [state-ref {:keys [view-type] :as msg} entry]\n    view-type))\n\n;; 1meg?\n(def default-max-print-size (* 1 1024 1024))\n\n(defn as-edn\n  [data {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  (let [lw (lw/limit-writer limit)]\n    #?(:clj\n       (print-method data lw)\n       :cljs\n       (pr-writer data lw (pr-opts)))\n    (lw/get-string lw)))\n\n(defn as-pprint\n  [data {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  ;; CLJ pprint for some reason doesn't run out of memory when printing circular stuff\n  ;; but it never finishes either\n  (let [lw (lw/limit-writer limit)]\n    (pprint data lw)\n    (lw/get-string lw)))\n\n(defn as-edn-limit\n  [data {:keys [limit] :as msg}]\n  (lw/pr-str-limit data limit))\n\n;; FIXME: should likely support limit options\n(defn as-str\n  [data msg]\n  (str data))\n\n(defn as-ex-str [ex msg]\n  #?(:cljs\n     (if (instance? js/Error ex)\n       (error->str ex)\n       (str \"Execution error:\\n\"\n            ;; can be any object, really no hope in making this any kind of readable\n            ;; capping it so throwing something large doesn't blow up the REPL\n            \"  \" (second (lw/pr-str-limit ex 200)) \"\\n\"\n            \"\\n\"))\n\n     :clj\n     (error-format ex)))\n\n(defn exception? [x]\n  #?(:clj (instance? java.lang.Throwable x)\n     ;; everything can be thrown in JS\n     ;; (throw \"x\")\n     ;; (throw (js/Promise.resolved \"x\"))\n     :cljs true ;; (instance? js/Error x)\n     ))\n\n(defn attempt-to-sort [desc coll]\n  (try\n    (-> desc\n        (assoc :view-order (vec (sort coll)))\n        (assoc-in [:summary :sorted] true))\n    (catch #?(:clj Exception :cljs :default) e\n      (-> desc\n          (assoc :view-order (vec coll))\n          (assoc-in [:summary :sorted] false)))))\n\n(defn browseable-kv [{:keys [view-order data] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [key (nth view-order idx)\n                val (get data key)\n                nav (d/nav data key val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num key-limit val-limit]\n              :or {key-limit 100\n                   val-limit 100}\n              :as msg}]\n\n          (let [end (min (count view-order) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [key (nth view-order idx)\n                          val (get data key)]\n                      (assoc m idx {:key (try\n                                           (lw/pr-str-limit key key-limit)\n                                           (catch #?(:clj Exception :cljs :default) e\n                                             [true \"... print failed ...\"]))\n                                    :val (try\n                                           (lw/pr-str-limit val val-limit)\n                                           (catch #?(:clj Exception :cljs :default) e\n                                             [true \"... print failed ...\"]))})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn browseable-vec [{:keys [data] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [val (nth data idx)\n                nav (d/nav data idx val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num val-limit]\n              :or {val-limit 100}\n              :as msg}]\n\n          (let [end (min (count data) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [val (nth data idx)]\n                      (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn browseable-seq [{:keys [data view-order] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [val (nth view-order idx)\n                nav (d/nav data idx val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num val-limit]\n              :or {val-limit 100}\n              :as msg}]\n\n          (let [end (min (count view-order) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [val (nth view-order idx)]\n                      (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn pageable-seq [{:keys [data] :as desc}]\n  ;; data is always beginning of seq\n  (let [seq-state-ref\n        (atom {:tail data ;; track where we are at\n               :realized []})]\n    (-> desc\n        (assoc :seq-state-ref seq-state-ref)\n        (assoc-in [:handlers :nav]\n          (fn [{:keys [idx]}]\n            ;; FIXME: should validate that idx is actually realized\n            (let [val (nth (:realized @seq-state-ref) idx)\n                  ;; FIXME: not sure there are many cases where lazy seqs actually have nav?\n                  nav (d/nav data idx val)]\n              (obj-ref nav))))\n        (assoc-in [:handlers :chunk]\n          (fn [{:keys [start num val-limit]\n                :or {val-limit 100}\n                :as msg}]\n\n            ;; need locking otherwise threads may realize more than once\n            ;; shouldn't be much of an issue but better be safe\n            (locking seq-state-ref\n              (let [{:keys [tail realized] :as seq-state} @seq-state-ref\n\n                    end (+ start num)\n                    missing (- end (count realized))\n\n                    [tail realized]\n                    (loop [tail tail\n                           realized realized\n                           missing missing]\n                      (if-not (pos? missing)\n                        [tail realized]\n                        (let [next (first tail)]\n                          (if (nil? next)\n                            [nil realized]\n                            (recur (rest tail) (conj realized next) (dec missing))))))\n\n                    idxs (range start (min end (count realized)))\n                    fragment\n                    (reduce\n                      (fn [m idx]\n                        (let [val (nth realized idx)]\n                          (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                      {}\n                      idxs)]\n\n                (swap! seq-state-ref assoc :tail tail :realized realized)\n\n                {:start start\n                 :realized (count realized)\n                 :fragment fragment\n                 :more? (or (> (count realized) end) (some? tail))})))))))\n\n(comment\n  (def x (pageable-seq {:data (map (fn [x] (prn [:realize x]) x) (range 10))}))\n\n  (let [chunk (get-in x [:handlers :chunk])]\n    (chunk {:start 0 :num 5})\n    )\n\n  (let [chunk (get-in x [:handlers :chunk])]\n    (chunk {:start 5 :num 10})\n    ))\n\n(defn inspect-basic [{:keys [data] :as desc} obj opts]\n  (try\n    (cond\n      (nil? data)\n      (assoc-in desc [:summary :data-type] :nil)\n\n      (string? data)\n      (-> desc\n          (update :summary merge {:data-type :string\n                                  :length (count data)})\n          ;; FIXME: substring support?\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (boolean? data)\n      (-> desc\n          (assoc-in [:summary :data-type] :boolean)\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (number? data)\n      (-> desc\n          (assoc-in [:summary :data-type] :number)\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (keyword? data)\n      (-> desc\n          (assoc-in [:summary :data-type] :keyword)\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (symbol? data)\n      (-> desc\n          (assoc-in [:summary :data-type] :symbol)\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (map? data)\n      (-> desc\n          (update :summary merge {:data-type :map\n                                  :entries (count data)})\n          (attempt-to-sort (keys data))\n          (browseable-kv))\n\n      (vector? data)\n      (-> desc\n          (update :summary merge {:data-type :vec\n                                  :entries (count data)})\n          (browseable-vec))\n\n      (set? data)\n      (-> desc\n          (update :summary merge {:data-type :set\n                                  :entries (count data)})\n          (attempt-to-sort data)\n          (browseable-seq))\n\n      (list? data)\n      (-> desc\n          (update :summary merge {:data-type :list\n                                  :entries (count data)})\n          (assoc :view-order (vec data))\n          (browseable-seq))\n\n      ;; lazy seqs\n      (seq? data)\n      (-> desc\n          (update :summary merge {:data-type :lazy-seq})\n          (pageable-seq))\n\n      ;; FIXME: records?\n\n      :else\n      (assoc-in desc [:summary :data-type] :unsupported))\n\n    (catch #?(:cljs :default :clj Exception) e\n      (assoc-in desc [:summary :data-type] :unsupported))))\n\n(defn inspect-type-info [desc obj opts]\n  (assoc-in desc [:summary :obj-type] (obj-type-string obj)))\n\n(defn inspect-source-info [desc obj opts]\n  (update desc :summary merge (select-keys opts [:ns :line :column :label])))\n\n(defn add-summary-op [{:keys [summary] :as desc}]\n  (assoc-in desc [:handlers :summary] (fn [msg] summary)))\n\n(defn default-describe [o opts]\n  (let [data (d/datafy o)]\n\n    (-> {:data data\n         :summary\n         {:added-at (:added-at opts)\n          :datafied (not (identical? data o))}\n\n         ;; FIXME: should these work on the datafy result or the original?\n         ;; maybe different ops? maybe msg option?\n         :handlers\n         (-> {:str #(as-str o %)\n              ;; FIXME: only do those for actual clojure vals?\n              :edn #(as-edn o %)\n              :edn-limit #(as-edn-limit o %)}\n             (cond->\n               (or (coll? o) (seq? o))\n               (assoc :pprint #(as-pprint o %))\n\n               (exception? o)\n               (assoc :ex-str #(as-ex-str o %))\n               ))}\n\n        (inspect-basic o opts)\n        (inspect-type-info o opts)\n        (inspect-source-info o opts)\n        (add-summary-op))))\n\n(extend-protocol p/Inspectable\n  #?(:clj Object :cljs default)\n  (describe [o opts]\n    (default-describe o opts))\n\n  nil\n  (describe [o opts]\n    (default-describe o opts)))\n\n(comment\n  (p/describe\n    {:hello \"world\"}\n    {:added-at \"NOW\" :ns \"foo.bar\"}))\n\n;; called after describe so impls don't have to worry about this\n(defn add-supports [{:keys [handlers] :as desc}]\n  (assoc-in desc [:summary :supports] (set (keys handlers))))\n\n;; FIXME: this is running inside swap! which means it can potentially\n;; end up getting executed several times for the same object (in CLJ)\n;; that is not great and should be handled differently\n(defn ensure-descriptor [{:keys [obj obj-info desc] :as entry}]\n  (if desc\n    entry\n    (assoc entry :desc (-> (p/describe obj obj-info)\n                           (add-supports)))))\n\n(defn get-tap-history [{:keys [state-ref] :as svc} num]\n  (->> (:objects @state-ref)\n       (vals)\n       (filter #(= :tap (get-in % [:obj-info :from])))\n       (sort-by #(get-in % [:obj-info :added-at]))\n       (reverse)\n       (take num)\n       (map :oid)\n       (into [])))\n\n(defn obj-describe*\n  [{:keys [state-ref]}\n   oid]\n  (when (contains? (:objects @state-ref) oid)\n    (swap! state-ref update-in [:objects oid] ensure-descriptor)\n    (swap! state-ref assoc-in [:objects oid :access-at] (now))\n    (let [summary (get-in @state-ref [:objects oid :desc :summary])]\n      summary)))\n\n(defn obj-describe\n  [{:keys [runtime] :as svc}\n   {:keys [oid] :as msg}]\n  (if-let [summary (obj-describe* svc oid)]\n    (shared/reply runtime msg {:op :obj-summary\n                               :oid oid\n                               :summary summary})\n    (shared/reply runtime msg {:op :obj-not-found :oid oid})))\n\n(defn obj-request\n  [{:keys [state-ref runtime] :as this}\n   {:keys [oid request-op] :as msg}]\n  (if-not (contains? (:objects @state-ref) oid)\n    (shared/reply runtime msg {:op :obj-not-found :oid oid})\n    (do (swap! state-ref update-in [:objects oid] ensure-descriptor)\n        (swap! state-ref assoc-in [:objects oid :access-at] (now))\n        (let [entry (get-in @state-ref [:objects oid])\n              request-fn (get-in entry [:desc :handlers request-op])]\n          (if-not request-fn\n            (shared/reply runtime msg {:op :obj-request-not-supported\n                                       :oid oid\n                                       :request-op request-op})\n            (try\n              (let [result (request-fn msg)]\n\n                ;; FIXME: add support for generic async results\n                ;; all handlers should already be sync but allow async results\n                (if-not (obj-ref? result)\n                  (shared/reply runtime msg\n                    {:op :obj-result\n                     :oid oid\n                     :result result})\n\n                  (let [new-oid (next-oid)\n                        ts (now)\n\n                        new-entry\n                        {:oid new-oid\n                         :obj (:obj result)\n                         :access-at ts\n                         ;; FIXME: should keep some info on how this ref came to be\n                         :obj-info {:added-at ts\n                                    :added-via oid}}]\n\n                    (swap! state-ref assoc-in [:objects new-oid] new-entry)\n\n                    (let [reply-msg\n                          (-> {:op :obj-result-ref\n                               :oid oid\n                               :ref-oid new-oid}\n                              (cond->\n                                ;; only send new-obj :summary when requested\n                                (:summary msg)\n                                (assoc :summary (obj-describe* this new-oid))))]\n\n                      (shared/reply runtime msg reply-msg)))))\n\n              (catch #?(:clj Exception :cljs :default) e\n                #?(:cljs (js/console.warn \"action-request-action failed\" (:obj entry) e)\n                   :clj (shadow.jvm-log/warn-ex e ::obj-request-failed msg))\n                (shared/reply runtime msg\n                  {:op :obj-request-failed\n                   :oid oid\n                   :msg msg\n                   :ex-oid (register this e {:msg msg})})))))\n        )))\n\n(defn obj-forget\n  [{:keys [state-ref] :as svc}\n   {:keys [oid] :as msg}]\n  (swap! state-ref update :objects dissoc oid))\n\n(defn obj-forget-all\n  [{:keys [state-ref] :as svc}\n   msg]\n  (swap! state-ref assoc :objects {}))\n\n(defn basic-gc! [state]\n  (let [objs-to-drop\n        (->> (:objects state)\n             (vals)\n             (sort-by :access-at)\n             (reverse)\n             (drop 100) ;; FIXME: make configurable\n             (map :oid))]\n\n    (reduce\n      (fn [state oid]\n        (update state :objects dissoc oid))\n      state\n      objs-to-drop)))\n\n(defn start [runtime]\n  (let [state-ref (atom {:objects {}\n                         :id-seq-ref 0})\n\n        svc\n        {:runtime runtime\n         :state-ref state-ref}]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops {:obj-describe #(obj-describe svc %)\n             :obj-request #(obj-request svc %)\n             :obj-forget #(obj-forget svc %)\n             :obj-forget-all #(obj-forget-all svc %)}\n       :on-idle #(swap! state-ref basic-gc!)})\n\n    svc))\n\n(defn register [{:keys [state-ref] :as svc} obj obj-info]\n  (let [oid (next-oid)]\n    (if-not (and (vector? obj) (= :shadow.remote/wrap (first obj)) (= (count obj) 3))\n      (swap! state-ref register* oid obj obj-info)\n      (swap! state-ref register* oid (nth obj 1) (merge obj-info (nth obj 2))))\n    oid))\n\n(defn get-ref [{:keys [state-ref]} obj-id]\n  (get-in @state-ref [:objects obj-id]))\n\n(defn stop [{:keys [runtime]}]\n  (p/del-extension runtime ::ext))\n\n(comment\n  (def obj-support (:clj-runtime-obj-support (shadow.cljs.devtools.server.runtime/get-instance)))\n  (swap! (:state-ref obj-support) assoc :objects {})\n  )"]}