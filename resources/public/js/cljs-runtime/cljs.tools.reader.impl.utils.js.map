{"version":3,"sources":["cljs/tools/reader/impl/utils.cljs"],"mappings":"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","names":["cljs.tools.reader.impl.utils/char","x","cljs.core/char","cljs.tools.reader.impl.utils/ex-info?","ex","cljs.core/ExceptionInfo","this__4461__auto__","k__4462__auto__","this__4463__auto__","k43995","else__4464__auto__","G__44003","cljs.core/Keyword","splicing?","form","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__44008","vec__44009","k__4485__auto__","cljs.core.nth","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__43994","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","cljs.core/count","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this43996","other43997","cljs.core._EQ_","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__44023","this__4469__auto__","k__4470__auto__","pred__44024","cljs.core/keyword-identical?","expr__44025","cljs.core.assoc","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","cljs.tools.reader.impl.utils/ReaderConditional","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__43999","extmap__4501__auto__","G__44028","cljs.core/record?","cljs.tools.reader.impl.utils/->ReaderConditional","cljs.tools.reader.impl.utils/map->ReaderConditional","cljs.tools.reader.impl.utils/reader-conditional?","value","cljs.tools.reader.impl.utils/reader-conditional","cljs.core/PROTOCOL_SENTINEL","coll","writer","opts","cljs.core/pr-writer","cljs.tools.reader.impl.utils/ws-rx","cljs.tools.reader.impl.utils/whitespace?","ch","cljs.tools.reader.impl.utils/numeric?","goog.string/isNumeric","cljs.tools.reader.impl.utils/newline?","c","cljs.tools.reader.impl.utils/desugar-meta","f","cljs.core/Symbol","cljs.tools.reader.impl.utils/last-id","cljs.core.atom","cljs.tools.reader.impl.utils/next-id","cljs.core.swap_BANG_","cljs.core/inc","cljs.tools.reader.impl.utils/namespace-keys","ns","keys","iter__4611__auto__","s__44059","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__44061","cljs.core/chunk-buffer","i__44060","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44058","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","key","vec__44066","vec__44076","key-ns","key-name","cljs.core.juxt","cljs.core/namespace","cljs.core/name","->key","cljs.core/symbol","cljs.core/keyword","p__44081","vec__44082","cljs.tools.reader.impl.utils/second'","a","b","cljs.tools.reader.impl.utils/char-code","base","code","js/parseInt","js/isNaN","cljs.core/chunk-first"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.utils\n  (:refer-clojure :exclude [char])\n  (:require\n   [clojure.string :as string]\n   [goog.string :as gstring]))\n\n(defn char [x]\n  (when-not (nil? x)\n    (cljs.core/char x)))\n\n(defn ^boolean ex-info? [ex]\n  (instance? cljs.core.ExceptionInfo ex))\n\n(defrecord ReaderConditional [splicing? form])\n\n(defn ^boolean reader-conditional?\n  \"Return true if the value is the data representation of a reader conditional\"\n  [value]\n  (instance? ReaderConditional value))\n\n(defn reader-conditional\n  \"Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing.\"\n  [form splicing?]\n  (ReaderConditional. splicing? form))\n\n(extend-protocol IPrintWithWriter\n  ReaderConditional\n  (-pr-writer [coll writer opts]\n    (-write writer (str \"#?\" (when (:splicing? coll) \"@\")))\n    (pr-writer (:form coll) writer opts)))\n\n(def ws-rx #\"[\\s]\")\n\n(defn ^boolean whitespace?\n  \"Checks whether a given character is whitespace\"\n  [ch]\n  (when-not (nil? ch)\n    (if (identical? ch \\,)\n      true\n      (.test ws-rx ch))))\n\n(defn ^boolean numeric?\n  \"Checks whether a given character is numeric\"\n  [ch]\n  (when-not (nil? ch)\n    (gstring/isNumeric ch)))\n\n(defn ^boolean newline?\n  \"Checks whether the character is a newline\"\n  [c]\n  (or (identical? \\newline c)\n      (identical? \"\\n\" c)\n      (nil? c)))\n\n(defn desugar-meta\n  \"Resolves syntactical sugar in metadata\" ;; could be combined with some other desugar?\n  [f]\n  (cond\n    (keyword? f) {f true}\n    (symbol? f)  {:tag f}\n    (string? f)  {:tag f}\n    :else        f))\n\n(def last-id (atom 0))\n\n(defn next-id\n  []\n  (swap! last-id inc))\n\n(defn namespace-keys [ns keys]\n  (for [key keys]\n    (if (or (symbol? key)\n            (keyword? key))\n      (let [[key-ns key-name] ((juxt namespace name) key)\n            ->key (if (symbol? key) symbol keyword)]\n        (cond\n          (nil? key-ns)\n          (->key ns key-name)\n\n          (= \"_\" key-ns)\n          (->key key-name)\n\n          :else\n          key))\n      key)))\n\n(defn second' [[a b]]\n  (when-not a b))\n\n(defn char-code [ch base]\n  (let [code (js/parseInt ch base)]\n    (if (js/isNaN code)\n      -1\n      code)))\n"]}