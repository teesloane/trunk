{"version":3,"sources":["shadow/remote/runtime/writer.cljs"],"mappings":";AAGA,AAAA;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,+DAAA,/DAASI;;AAAT,AAAA,YAAA,RAEcI;AAFd,AAGI,OAAWF;;;AAHf,CAAA,AAAA,sFAAA,tFAASF,iGAMEK,EAAEC;;AANb,AAAA,YAAA,RAMWD;AANX,AAOI,AAASH,iBAAGI;;AACZ,GAAM,CAAI,AAAYJ,yBAAIC;AAA1B,AACE,MAAO,0KAAA,2CAAA,oDAAA,8HAAA,vYAACI,gDAAQ,CAAA,0EAAA,dAAqBJ,kVAAyEA;;AADhH;;;;AARJ,CAAA,AAAA,sFAAA,tFAASH,iGAUEK;;AAVX,AAAA,YAAA,RAUWA;AAVX,AAAA;;;AAAA,CAAA,oDAAA,pDAASL;AAAT,AAAA,AAAA;;;AAAA,CAAA,0DAAA,1DAASA;;AAAT,CAAA,6DAAA,7DAASA;;AAAT,CAAA,kEAAA,WAAAJ,mBAAAC,qBAAAC,rHAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;gDAAA,hDAASI,wGAA2BC,GAAGC;AAAvC,AAAA,YAAAH,yCAAoCE,GAAGC;;;AAA9BH,AAYT,4CAAA,5CAAMQ,gGAAcC,IAAIN;AAAxB,AACE,IAAMD,KAAG,KAAAQ;IACHC,SAAO,KAAAX,yCAAcE,GAAGC;AAD9B,AAEE,IAAA,AACE,AAACU,oBAAUJ,IAAIE,OAAO,AAACG;;AADzB,0FAAA,MAES,AAAWZ;gBAFpB,QAAAU,JAGkBG;AAHlB,AAII,GAAA,GAAQ,mCAAA,nCAACC,iKAAmC,AAAA,kFAAM,AAACC,kBAAQF;AACzD,MAAOA;;AADT,0FAAA,KAGG,iBAAMT,IAAE,AAAWJ;AAAnB,AACE,GAAI,CAAG,AAAUI,WAAGH;AAClB,sDAAA,/CAACe,6CAAKZ,MAAIH;;AACVG;;;;;AAEf,4CAAA,5CAAMa,gGAAchB;AAApB,AACE,IAAMD,KAAG,KAAAQ;AAAT,AACE,YAAAV,yCAAcE,GAAGC;;AAErB,0CAAA,1CAAMiB,4FAAyBC;AAA/B,AACE,OAAYA;;AAEd","names":["this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","shadow.remote.runtime.writer/LimitWriter","shadow.remote.runtime.writer/->LimitWriter","sb","limit","this","_","s","cljs.core.ex_info","shadow.remote.runtime.writer/pr-str-limit","obj","js/goog.string.StringBuffer","writer","e47555","cljs.core/pr-writer","cljs.core/pr-opts","e","cljs.core/keyword-identical?","cljs.core/ex-data","cljs.core.subs","shadow.remote.runtime.writer/limit-writer","shadow.remote.runtime.writer/get-string","lw"],"sourcesContent":["(ns shadow.remote.runtime.writer\n  (:import [goog.string StringBuffer]))\n\n(deftype LimitWriter [^StringBuffer sb limit]\n  Object\n  (getString [this]\n    (.toString sb))\n\n  IWriter\n  (-write [_ s]\n    (.append sb s)\n    (when (>= (.getLength sb) limit)\n      (throw (ex-info (str \"The limit of \" limit \" bytes was reached while printing.\") {:tag ::limit-reached :limit limit}))))\n  (-flush [_] nil))\n\n(defn pr-str-limit [obj limit]\n  (let [sb (StringBuffer.)\n        writer (LimitWriter. sb limit)]\n    (try\n      (pr-writer obj writer (pr-opts))\n      [false (.toString sb)]\n      (catch :default e\n        (if-not (keyword-identical? ::limit-reached (:tag (ex-data e)))\n          (throw e)\n          [true\n           (let [s (.toString sb)]\n             (if (> (.-length s) limit)\n               (subs s 0 limit)\n               s))])))))\n\n(defn limit-writer [limit]\n  (let [sb (StringBuffer.)]\n    (LimitWriter. sb limit)))\n\n(defn get-string [^LimitWriter lw]\n  (.getString lw))\n\n(comment\n  (pr-str-limit {:hello (range 10)} 20))\n"]}