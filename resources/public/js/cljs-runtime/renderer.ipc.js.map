{"version":3,"sources":["renderer/ipc.cljs"],"mappings":";AAGA,0BAAA,1BAAMA,4DACHC,QAAQC;AADX,AAEE,IAAMC,UAAQ,AAAA,AAAIC;AAAlB,AACE,IAAAC,WAASJ;IAATK,WAAiB,AAACC,qBAAQL;AAA1B,AAAA,sFAAAG,SAAAC,8BAAAD,SAAAC,9HAACH,wCAAAA,2DAAAA;;AAGL,6BAAA,7BAAMK,kEACHP,QAAQQ;AADX,AAEE,IAAMC,aAAW,AAAA,AAAIN;AAArB,AACE,QAACM,2CAAAA,yDAAAA,hBAAWT,qCAAAA,7BAAQQ,qCAAAA;;AAKxB,oBAAA,pBAAME;AAAN,AAEE,yGAAA,zGAACC;;AACD,kCAAA,3BAACJ,sCAAoB,WAAKN;AAAL,AACK,gHAAA,zGAACU,0HAAyBV","names":["renderer.ipc/send!","channel","data","send-fn","js/window","G__51941","G__51942","cljs.core/clj->js","renderer.ipc/receive!","func","receive-fn","renderer.ipc/init","cljs.core.println"],"sourcesContent":["(ns renderer.ipc)\n\n;; create our front end api functions for interfacing with ipcRenderer (from preload.js)\n(defn send!\n  [channel data]\n  (let [send-fn (.. js/window -api -send)]\n    (send-fn channel (clj->js data))))\n\n\n(defn receive!\n  [channel func]\n  (let [receive-fn (.. js/window -api -receive)]\n    (receive-fn channel func)))\n\n\n;; setup our applications to receive vals.\n\n(defn init\n  []\n  (println \"Initing renderer ipc handlers.\")\n  (receive! \"my-reply\" (fn [data]\n                            (println \"received stuff\" data)\n                            ))\n  )\n"]}