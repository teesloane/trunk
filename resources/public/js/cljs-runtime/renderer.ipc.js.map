{"version":3,"sources":["renderer/ipc.cljs"],"mappings":";AAEA,0BAAA,1BAAMA,4DACHC,QAAQC;AADX,AAEE,IAAMC,cAAY,AAAI,QAAA,RAACC;IACjBC,IAAU,AAAOF,iBAAYF,QAAQ,AAACK,qBAAQJ;AADpD,AAAA;;AAIF,GAAA,QAAAK,qCAAAC,yCAAAC;AAAA;AAAA,AAAA,2BAAA,2CAAA,tEAASC,0FACc,WAAKC,MAAMT;AAAX,AACE,gHAAA,zGAACU,6HAA4BD,MAAMT;;;AAK5D;;;;oBAAA,pBAAMW;AAAN,AAKE,yGAAA,zGAACD;;AACD,IAAMT,cAAY,AAAI,QAAA,RAACC;AAAvB,AACE,IAAAU,aAAA,AAAAC,cAAsBL;IAAtBM,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEAASW;cAAT,AAAAV,4CAAAD,WAAA,IAAA,rEAAaY;AAAb,AAAA,AACE,AAAK5B,eAAY2B,IACZ;kBAAKnB,MAAMqB;AAAX,AACE,yGAAA,zGAACpB,mHAAkBkB;;AACnB,IAAAG,WAAStB;IAATuB,WAAe,iHAAA,2EAAA,5LAACG,0DAAQL;AAAxB,AAAA,sFAAAC,SAAAC,8BAAAD,SAAAC,9HAACH,wCAAAA,2DAAAA;;;;AAJV;AAAA,eAAAjB;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAG,qBAAA,AAAAN,cAAAD;AAAA,AAAA,GAAAO;AAAA,AAAA,IAAAP,iBAAAO;AAAA,AAAA,GAAA,AAAAC,6BAAAR;AAAA,IAAAS,kBAAA,AAAAC,sBAAAV;AAAA,AAAA,eAAA,AAAAW,qBAAAX;eAAAS;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAAC,gBAAAd;UAAA,AAAAM,4CAAAO,WAAA,IAAA,jEAASG;cAAT,AAAAV,4CAAAO,WAAA,IAAA,rEAAaI;AAAb,AAAA,AACE,AAAK5B,eAAY2B,IACZ;kBAAKnB,MAAMqB;AAAX,AACE,yGAAA,zGAACpB,mHAAkBkB;;AACnB,IAAAK,WAASxB;IAATyB,WAAe,iHAAA,2EAAA,5LAACC,0DAAQL;AAAxB,AAAA,sFAAAG,SAAAC,8BAAAD,SAAAC,9HAACL,wCAAAA,2DAAAA;;;;AAJV;AAAA,eAAA,AAAAF,eAAAf;eAAA;eAAA;eAAA;;;;;;;;AAAA","names":["renderer.ipc/send!","channel","data","ipcRenderer","js/require","_","cljs.core/clj->js","js/renderer","js/renderer.ipc","js/renderer.ipc.ipcHandlers","renderer.ipc/ipcHandlers","event","cljs.core.println","renderer.ipc/init","seq__27052","cljs.core/seq","chunk__27053","count__27054","i__27055","vec__27066","cljs.core.nth","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__27071","cljs.core/first","cljs.core/next","key","handler","args","G__27069","G__27070","G__27074","G__27075","cljs.core.js__GT_clj"],"sourcesContent":["(ns renderer.ipc)\n\n(defn send!\n  [channel data]\n  (let [ipcRenderer (.. (js/require \"electron\") -ipcRenderer)\n        _         (.send ipcRenderer channel (clj->js data))]))\n\n\n(defonce ipcHandlers\n  {\"->article-created\" (fn [event data]\n                         (println \"->article-created\" event data)\n                         )})\n\n;; setup our applications to receive vals.\n\n(defn init\n  \"Load ipcRenderer and loop through defined handlers,\n  then \"\n  []\n  ;; TODO: this seems to bind multiple times with hot reload.\n  (println \"Initing renderer ipc handlers.\")\n  (let [ipcRenderer (.. (js/require \"electron\") -ipcRenderer)]\n    (doseq [[key handler] ipcHandlers]\n      (.on ipcRenderer key\n           (fn [event args]\n             (println \"[IPC]: \" key)\n             (handler event (js->clj args :keywordize-keys true)))))))\n"]}