{"version":3,"sources":["cljs/core/async/impl/buffers.cljs"],"mappings":"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","names":["cljs.core.async.impl.buffers/acopy","src","src-start","dest","dest-start","len","cnt","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","cljs.core.async.impl.buffers/RingBuffer","cljs.core.async.impl.buffers/->RingBuffer","head","tail","length","arr","_","x","this","new-arr-size","new-arr","js/Array","keep?","n__4695__auto__","v","cljs.core.async.impl.buffers/ring-buffer","n","js/Error","cljs.core/PROTOCOL_SENTINEL","cljs.core.async.impl.buffers/FixedBuffer","cljs.core.async.impl.buffers/->FixedBuffer","buf","itm","cljs.core.async.impl.buffers/fixed-buffer","cljs.core.async.impl.buffers/DroppingBuffer","cljs.core.async.impl.buffers/->DroppingBuffer","cljs.core.async.impl.buffers/dropping-buffer","cljs.core.async.impl.buffers/SlidingBuffer","cljs.core.async.impl.buffers/->SlidingBuffer","cljs.core.async.impl.buffers/sliding-buffer","js/cljs","js/cljs.core","js/cljs.core.async","js/cljs.core.async.impl","js/cljs.core.async.impl.buffers","js/cljs.core.async.impl.buffers.NO-VAL","cljs.core.async.impl.buffers/NO-VAL","js/Object","cljs.core.async.impl.buffers/undelivered?","val","cljs.core.async.impl.buffers/PromiseBuffer","cljs.core.async.impl.buffers/->PromiseBuffer","cljs.core.async.impl.buffers/promise-buffer"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.buffers\n  (:require [cljs.core.async.impl.protocols :as impl]))\n\n;; -----------------------------------------------------------------------------\n;; DO NOT USE, this is internal buffer representation\n\n(defn acopy [src src-start dest dest-start len]\n  (loop [cnt 0]\n    (when (< cnt len)\n      (aset dest\n            (+ dest-start cnt)\n            (aget src (+ src-start cnt)))\n      (recur (inc cnt)))))\n\n(deftype RingBuffer [^:mutable head ^:mutable tail ^:mutable length ^:mutable arr]\n  Object\n  (pop [_]\n    (when-not (zero? length)\n      (let [x (aget arr tail)]\n        (aset arr tail nil)\n        (set! tail (js-mod (inc tail) (alength arr)))\n        (set! length (dec length))\n        x)))\n\n  (unshift [_ x]\n    (aset arr head x)\n    (set! head (js-mod (inc head) (alength arr)))\n    (set! length (inc length))\n    nil)\n\n  (unbounded-unshift [this x]\n    (if (== (inc length) (alength arr))\n      (.resize this))\n    (.unshift this x))\n\n  ;; Doubles the size of the buffer while retaining all the existing values\n  (resize\n    [_]\n    (let [new-arr-size (* (alength arr) 2)\n          new-arr (make-array new-arr-size)]\n      (cond\n       (< tail head)\n       (do (acopy arr tail new-arr 0 length)\n           (set! tail 0)\n           (set! head length)\n           (set! arr new-arr))\n\n       (> tail head)\n       (do (acopy arr tail new-arr 0 (- (alength arr) tail))\n           (acopy arr 0 new-arr (- (alength arr) tail) head)\n           (set! tail 0)\n           (set! head length)\n           (set! arr new-arr))\n\n       (== tail head)\n       (do (set! tail 0)\n           (set! head 0)\n           (set! arr new-arr)))))\n\n  (cleanup [this keep?]\n    (dotimes [x length]\n      (let [v (.pop this)]\n        (when ^boolean (keep? v)\n          (.unshift this v))))))\n\n(defn ring-buffer [n]\n  (assert (> n 0) \"Can't create a ring buffer of size 0\")\n  (RingBuffer. 0 0 0 (make-array n)))\n\n;; -----------------------------------------------------------------------------\n\n(deftype FixedBuffer [buf n]\n  impl/Buffer\n  (full? [this]\n    (>= (.-length buf) n))\n  (remove! [this]\n    (.pop buf))\n  (add!* [this itm]\n    (.unbounded-unshift buf itm)\n    this)\n  (close-buf! [this])\n  cljs.core/ICounted\n  (-count [this]\n    (.-length buf)))\n\n(defn fixed-buffer [n]\n  (FixedBuffer. (ring-buffer n) n))\n\n(deftype DroppingBuffer [buf n]\n  impl/UnblockingBuffer\n  impl/Buffer\n  (full? [this]\n    false)\n  (remove! [this]\n    (.pop buf))\n  (add!* [this itm]\n    (when-not (== (.-length buf) n)\n      (.unshift buf itm))\n    this)\n  (close-buf! [this])\n  cljs.core/ICounted\n  (-count [this]\n    (.-length buf)))\n\n(defn dropping-buffer [n]\n  (DroppingBuffer. (ring-buffer n) n))\n\n(deftype SlidingBuffer [buf n]\n  impl/UnblockingBuffer\n  impl/Buffer\n  (full? [this]\n    false)\n  (remove! [this]\n    (.pop buf))\n  (add!* [this itm]\n    (when (== (.-length buf) n)\n      (impl/remove! this))\n    (.unshift buf itm)\n    this)\n  (close-buf! [this])\n  cljs.core/ICounted\n  (-count [this]\n    (.-length buf)))\n\n(defn sliding-buffer [n]\n  (SlidingBuffer. (ring-buffer n) n))\n\n(defonce ^:private NO-VAL (js/Object.))\n(defn- undelivered? [val]\n  (identical? NO-VAL val))\n\n(deftype PromiseBuffer [^:mutable val]\n  impl/UnblockingBuffer\n  impl/Buffer\n  (full? [_]\n    false)\n  (remove! [_]\n    val)\n  (add!* [this itm]\n    (when (undelivered? val)\n      (set! val itm))\n    this)\n  (close-buf! [_]\n    (when (undelivered? val)\n      (set! val nil)))\n  cljs.core/ICounted\n  (-count [_]\n    (if (undelivered? val) 0 1)))\n\n(defn promise-buffer []\n  (PromiseBuffer. NO-VAL))\n"]}