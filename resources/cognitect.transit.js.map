{"version":3,"sources":["cognitect/transit.cljs"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","cljs.core/UUID","this","other","com.cognitect.transit.types/UUID","cljs.core/compare","js/Error","js/goog.math.Long","com.cognitect.transit.types/TaggedValue","com.cognitect.transit.eq/hashCode","cljs.core/hash","uuid","writer","_","cljs.core/-write","cognitect.transit/opts-merge","a","b","seq__34976","cljs.core/seq","chunk__34977","count__34978","i__34979","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","k","cljs.core/js-keys","v","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cognitect.transit/MapBuilder","cognitect.transit/->MapBuilder","node","cljs.core/transient","m","cljs.core.assoc_BANG_","cljs.core/persistent!","arr","cljs.core/PersistentArrayMap","cognitect.transit/VectorBuilder","cognitect.transit/->VectorBuilder","x","cljs.core.conj_BANG_","cljs.core/PersistentVector","var_args","G__35036","cognitect.transit/reader","type","cognitect.transit.reader","opts","com.cognitect.transit/reader","cljs.core/name","cljs.core/clj->js","cljs.core.merge","cljs.core.symbol","cljs.core.keyword","cljs.core.into","i","ret","cljs.core/with-meta","cljs.core.dissoc","cognitect.transit/read","r","str","cognitect.transit/KeywordHandler","cognitect.transit/->KeywordHandler","cognitect.transit/SymbolHandler","cognitect.transit/->SymbolHandler","cognitect.transit/ListHandler","cognitect.transit/->ListHandler","seq__35084","chunk__35085","count__35087","i__35088","com.cognitect.transit/tagged","cognitect.transit/MapHandler","cognitect.transit/->MapHandler","cognitect.transit/SetHandler","cognitect.transit/->SetHandler","seq__35121","chunk__35122","count__35123","i__35124","cognitect.transit/VectorHandler","cognitect.transit/->VectorHandler","seq__35132","chunk__35133","count__35134","i__35135","cognitect.transit/UUIDHandler","cognitect.transit/->UUIDHandler","cognitect.transit/WithMeta","cognitect.transit/->WithMeta","value","meta","cognitect.transit/WithMetaHandler","cognitect.transit/->WithMetaHandler","G__35155","cognitect.transit/writer","cognitect.transit.writer","keyword-handler","symbol-handler","list-handler","map-handler","set-handler","vector-handler","uuid-handler","meta-handler","handlers","cljs.core/Keyword","cljs.core/Symbol","cljs.core/Range","cljs.core/List","cljs.core/Cons","cljs.core/EmptyList","cljs.core/LazySeq","cljs.core/RSeq","cljs.core/IndexedSeq","cljs.core/ChunkedCons","cljs.core/ChunkedSeq","cljs.core/PersistentQueueSeq","cljs.core/PersistentQueue","cljs.core/PersistentArrayMapSeq","cljs.core/PersistentTreeMapSeq","cljs.core/NodeSeq","cljs.core/ArrayNodeSeq","cljs.core/KeySeq","cljs.core/ValSeq","cljs.core/PersistentHashMap","cljs.core/PersistentTreeMap","cljs.core/PersistentHashSet","cljs.core/PersistentTreeSet","cljs.core/Subvec","js/cljs","js/cljs.core","js/cljs.core.Eduction","cljs.core/Eduction","js/cljs.core.Repeat","cljs.core/Repeat","js/cljs.core.MapEntry","cljs.core/MapEntry","com.cognitect.transit/writer","kfn","vfn","cljs.core/reduce-kv","obj","G__35164","x35165","cljs.core/clone","coll","f","seq__35166","chunk__35167","count__35168","i__35169","vec__35180","cljs.core.nth","vec__35185","cljs.core._EQ_","cognitect.transit/write","w","o","cognitect.transit/read-handler","from-rep","G__35201","cognitect.transit/write-handler","tag-fn","rep-fn","cognitect.transit.write_handler","str-rep-fn","verbose-handler-fn","js/cognitect","js/cognitect.transit","js/cognitect.transit.t_cognitect$transit35210","cognitect.transit/t_cognitect$transit35210","_35212","meta35211","cognitect.transit/->t_cognitect$transit35210","cognitect.transit/tagged-value","tag","rep","com.cognitect.transit.types/taggedValue","cognitect.transit/tagged-value?","com.cognitect.transit.types/isTaggedValue","cognitect.transit/integer","s","com.cognitect.transit.types/intValue","cognitect.transit/integer?","com.cognitect.transit.types/isInteger","cognitect.transit/bigint","com.cognitect.transit.types/bigInteger","cognitect.transit/bigint?","com.cognitect.transit.types/isBigInteger","cognitect.transit/bigdec","com.cognitect.transit.types/bigDecimalValue","cognitect.transit/bigdec?","com.cognitect.transit.types/isBigDecimal","cognitect.transit/uri","com.cognitect.transit.types/uri","cognitect.transit/uri?","com.cognitect.transit.types/isURI","cognitect.transit/uuid","com.cognitect.transit.types/uuid","cognitect.transit/uuid?","or__4212__auto__","com.cognitect.transit.types/isUUID","cognitect.transit/binary","com.cognitect.transit.types/binary","cognitect.transit/binary?","com.cognitect.transit.types/isBinary","cognitect.transit/quoted","com.cognitect.transit.types/quoted","cognitect.transit/quoted?","com.cognitect.transit.types/isQuoted","cognitect.transit/link","com.cognitect.transit.types/link","cognitect.transit/link?","com.cognitect.transit.types/isLink","cognitect.transit/write-meta"],"sourcesContent":[";; Copyright 2014-2018 Cognitect. All Rights Reserved.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;      http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS-IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n\n(ns cognitect.transit\n  (:refer-clojure :exclude [integer? uuid uuid? uri?])\n  (:require [com.cognitect.transit :as t]\n            [com.cognitect.transit.types :as ty]\n            [com.cognitect.transit.eq :as eq])\n  (:import [goog.math Long]))\n\n;; patch cljs.core/UUID IEquiv\n\n(extend-type UUID\n  IEquiv\n  (-equiv [this other]\n    (cond\n      (instance? UUID other)\n      (identical? (.-uuid this) (.-uuid other))\n\n      (instance? ty/UUID other)\n      (identical? (.-uuid this) (.toString other))\n\n      :else false)))\n\n(extend-protocol IComparable\n  UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other)))))\n  ty/UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(extend-protocol IEquiv\n  Long\n  (-equiv [this other]\n    (.equiv this other))\n  \n  ty/UUID\n  (-equiv [this other]\n    (if (instance? UUID other)\n      (-equiv other this)\n      (.equiv this other)))\n\n  ty/TaggedValue\n  (-equiv [this other]\n    (.equiv this other)))\n\n(extend-protocol IHash\n  Long\n  (-hash [this]\n    (eq/hashCode this))\n\n  ty/UUID\n  (-hash [this]\n    (hash (.toString this)))\n\n  ty/TaggedValue\n  (-hash [this]\n    (eq/hashCode this)))\n\n(extend-type ty/UUID\n  IPrintWithWriter\n  (-pr-writer [uuid writer _]\n    (-write writer (str \"#uuid \\\"\" (.toString uuid) \"\\\"\"))))\n\n(defn ^:no-doc opts-merge [a b]\n  (doseq [k (js-keys b)]\n    (let [v (aget b k)]\n      (aset a k v)))\n  a)\n\n(deftype ^:no-doc MapBuilder []\n  Object\n  (init [_ node] (transient {}))\n  (add [_ m k v node] (assoc! m k v))\n  (finalize [_ m node] (persistent! m))\n  (fromArray [_ arr node] (cljs.core/PersistentArrayMap.fromArray arr true true)))\n\n(deftype ^:no-doc VectorBuilder []\n  Object\n  (init [_ node] (transient []))\n  (add [_ v x node] (conj! v x))\n  (finalize [_ v node] (persistent! v))\n  (fromArray [_ arr node] (cljs.core/PersistentVector.fromArray arr true)))\n\n(defn reader\n  \"Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from string tag to a decoder function of one\n   argument which returns the in-memory representation of the semantic transit\n   value. If a :default handler is provided, it will be used when no matching\n   read handler can be found.\"\n  ([type] (reader type nil))\n  ([type opts]\n     (t/reader (name type)\n       (opts-merge\n         #js {:handlers\n              (clj->js\n                (merge\n                  {\"$\"    (fn [v] (symbol v))\n                   \":\"    (fn [v] (keyword v))\n                   \"set\"  (fn [v] (into #{} v))\n                   \"list\" (fn [v] (into () (.reverse v)))\n                   \"cmap\" (fn [v]\n                            (loop [i 0 ret (transient {})]\n                              (if (< i (alength v))\n                                (recur (+ i 2)\n                                  (assoc! ret (aget v i) (aget v (inc i))))\n                                (persistent! ret))))\n                   \"with-meta\"\n                          (fn [v] (with-meta (aget v 0) (aget v 1)))}\n                  (dissoc (:handlers opts) :default)))\n              :defaultHandler (-> opts :handlers :default)\n              :mapBuilder (MapBuilder.)\n              :arrayBuilder (VectorBuilder.)\n              :prefersStrings false}\n         (clj->js (dissoc opts :handlers))))))\n\n(defn read\n  \"Read a transit encoded string into ClojureScript values given a \n   transit reader.\"\n  [r str]\n  (.read r str))\n\n(deftype ^:no-doc KeywordHandler []\n  Object\n  (tag [_ v] \":\")\n  (rep [_ v] (.-fqn v))\n  (stringRep [_ v] (.-fqn v)))\n\n(deftype ^:no-doc SymbolHandler []\n  Object\n  (tag [_ v] \"$\")\n  (rep [_ v] (.-str v))\n  (stringRep [_ v] (.-str v)))\n\n(deftype ^:no-doc ListHandler []\n  Object\n  (tag [_ v] \"list\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc MapHandler []\n  Object\n  (tag [_ v] \"map\")\n  (rep [_ v] v)\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc SetHandler []\n  Object\n  (tag [_ v] \"set\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [v] nil))\n\n(deftype ^:no-doc VectorHandler []\n  Object\n  (tag [_ v] \"array\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      ret))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc UUIDHandler []\n  Object\n  (tag [_ v] \"u\")\n  (rep [_ v] (.-uuid v))\n  (stringRep [this v] (.rep this v)))\n\n(deftype ^:no-doc WithMeta [value meta])\n\n(deftype ^:no-doc WithMetaHandler []\n  Object\n  (tag [_ v] \"with-meta\")\n  (rep [_ v]\n    (t/tagged \"array\" #js [(.-value v) (.-meta v)]))\n  (stringRep [_ v] nil))\n\n(defn writer\n  \"Return a transit writer. type maybe either :json or :json-verbose.\n  opts is a map with the following optional keys:\n\n    :handlers  - a map of type constructors to handler instances. Can optionally\n                 provide a :default write handler which will be used if no\n                 matching handler can be found.\n    :transform - a function of one argument returning a transformed value. Will\n                 be invoked on a value before it is written.\"\n  ([type] (writer type nil))\n  ([type opts]\n     (let [keyword-handler (KeywordHandler.)\n           symbol-handler  (SymbolHandler.)\n           list-handler    (ListHandler.)\n           map-handler     (MapHandler.)\n           set-handler     (SetHandler.)\n           vector-handler  (VectorHandler.)\n           uuid-handler    (UUIDHandler.)\n           meta-handler    (WithMetaHandler.)\n           handlers\n           (merge\n             {cljs.core/Keyword               keyword-handler\n              cljs.core/Symbol                symbol-handler\n              cljs.core/Range                 list-handler\n              cljs.core/List                  list-handler\n              cljs.core/Cons                  list-handler\n              cljs.core/EmptyList             list-handler\n              cljs.core/LazySeq               list-handler\n              cljs.core/RSeq                  list-handler\n              cljs.core/IndexedSeq            list-handler\n              cljs.core/ChunkedCons           list-handler\n              cljs.core/ChunkedSeq            list-handler\n              cljs.core/PersistentQueueSeq    list-handler\n              cljs.core/PersistentQueue       list-handler\n              cljs.core/PersistentArrayMapSeq list-handler\n              cljs.core/PersistentTreeMapSeq  list-handler\n              cljs.core/NodeSeq               list-handler\n              cljs.core/ArrayNodeSeq          list-handler\n              cljs.core/KeySeq                list-handler\n              cljs.core/ValSeq                list-handler\n              cljs.core/PersistentArrayMap    map-handler\n              cljs.core/PersistentHashMap     map-handler\n              cljs.core/PersistentTreeMap     map-handler\n              cljs.core/PersistentHashSet     set-handler\n              cljs.core/PersistentTreeSet     set-handler\n              cljs.core/PersistentVector      vector-handler\n              cljs.core/Subvec                vector-handler\n              cljs.core/UUID                  uuid-handler\n              WithMeta                        meta-handler}\n             (when (exists? cljs.core/Eduction)\n               {^:cljs.analyzer/no-resolve cljs.core/Eduction list-handler})\n             (when (exists? cljs.core/Repeat)\n               {^:cljs.analyzer/no-resolve cljs.core/Repeat list-handler})\n             (when (exists? cljs.core/MapEntry)\n               {^:cljs.analyzer/no-resolve cljs.core/MapEntry vector-handler})\n             (:handlers opts))]\n      (t/writer (name type)\n        (opts-merge\n          #js {:objectBuilder\n               (fn [m kfn vfn]\n                 (reduce-kv\n                   (fn [obj k v]\n                     (doto obj (.push (kfn k) (vfn v))))\n                   #js [\"^ \"] m))\n               :handlers\n               (specify handlers\n                 Object\n                 (forEach\n                   ([coll f]\n                    (doseq [[k v] coll]\n                      (if (= :default k)\n                        (f v \"default\")\n                        (f v k))))))\n               :unpack\n               (fn [x]\n                 (if (instance? cljs.core/PersistentArrayMap x)\n                   (.-arr x)\n                   false))}\n          (clj->js (dissoc opts :handlers)))))))\n\n(defn write\n  \"Encode an object into a transit string given a transit writer.\"\n  [w o]\n  (.write w o))\n\n(defn read-handler\n  \"Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj\"\n  [from-rep]\n  from-rep)\n\n(defn write-handler\n  \"Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.\"\n  ([tag-fn rep-fn]\n     (write-handler tag-fn rep-fn nil nil))\n  ([tag-fn rep-fn str-rep-fn]\n     (write-handler tag-fn rep-fn str-rep-fn nil))\n  ([tag-fn rep-fn str-rep-fn verbose-handler-fn]\n     (reify\n       Object\n       (tag [_ o] (tag-fn o))\n       (rep [_ o] (rep-fn o))\n       (stringRep [_ o] (when str-rep-fn (str-rep-fn o)))\n       (getVerboseHandler [_] (when verbose-handler-fn (verbose-handler-fn))))))\n\n;; =============================================================================\n;; Constructors & Predicates\n\n(defn tagged-value\n  \"Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value.\"\n  [tag rep]\n  (ty/taggedValue tag rep))\n\n(defn tagged-value?\n  \"Returns true if x is a transit tagged value, false otherwise.\"\n  [x]\n  (ty/isTaggedValue x))\n\n(defn integer\n  \"Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number.\"\n  [s]\n  (ty/intValue s))\n\n(defn integer?\n  \"Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise.\"\n  [x]\n  (ty/isInteger x))\n\n(defn bigint\n  \"Construct a big integer from a string.\"\n  [s]\n  (ty/bigInteger s))\n\n(defn bigint?\n  \"Returns true if x is a transit big integer value, false otherwise.\"\n  [x]\n  (ty/isBigInteger x))\n\n(defn bigdec\n  \"Construct a big decimal from a string.\"\n  [s]\n  (ty/bigDecimalValue s))\n\n(defn bigdec?\n  \"Returns true if x is a transit big decimal value, false otherwise.\"\n  [x]\n  (ty/isBigDecimal x))\n\n(defn uri\n  \"Construct a URI from a string.\"\n  [s]\n  (ty/uri s))\n\n(defn uri?\n  \"Returns true if x is a transit URI value, false otherwise.\"\n  [x]\n  (ty/isURI x))\n\n(defn uuid\n  \"Construct a UUID from a string.\"\n  [s]\n  (ty/uuid s))\n\n(defn uuid?\n  \"Returns true if x is a transit UUID value, false otherwise.\"\n  [x]\n  (or (ty/isUUID x) (instance? UUID x)))\n\n(defn binary\n  \"Construct a transit binary value. s should be base64 encoded\n   string.\"\n  [s]\n  (ty/binary s))\n\n(defn binary?\n  \"Returns true if x is a transit binary value, false otherwise.\"\n  [x]\n  (ty/isBinary x))\n\n(defn quoted\n  \"Construct a quoted transit value. x should be a transit\n   encodeable value.\"\n  [x]\n  (ty/quoted x))\n\n(defn quoted?\n  \"Returns true if x is a transit quoted value, false otherwise.\"\n  [x]\n  (ty/isQuoted x))\n\n(defn link\n  \"Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link.\"\n  [x]\n  (ty/link x))\n\n(defn link?\n  \"Returns true if x a transit link value, false if otherwise.\"\n  [x]\n  (ty/isLink x))\n\n(defn write-meta\n  \"For :transform. Will write any metadata present on the value.\"\n  [x]\n  (if (implements? IMeta x)\n    (let [m (-meta ^not-native x)]\n      (if-not (nil? m)\n        (WithMeta. (-with-meta ^not-native x nil) m)\n        x))\n    x))"]}