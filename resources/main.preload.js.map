{"version":3,"sources":["main/preload.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAGA,kBAAA,lBAAMA;AAAN,AAEE,AAACC,yGAAQC,6CAAcC;;AACvB,gHAAA,zGAACF;;AAKH,2BAAA,mFAAA,SAAA,vHAAKG;AACL,6BAAA,mFAAA,SAAA,zHAAKC;AAEL,oBAAA,pBAAMC,gDACHC,QAAQC;AADX,AAEE,oBAAI,eAAA,fAACC,8DAAOF,UAASH;AACnB,OAAOD,gDAAYI,QAAQC;;AAD7B;;;AAIF,uBAAA,vBAAME,sDACHH,QAAQI;AADX,AAEE,oBAAI,eAAA,fAACF,8DAAOF,UAASF;AACnB,OAAKF,8CAAYI,QAAQ,WAAKK,MAAMJ;AAAX,AAAiB,QAACG,qCAAAA,2CAAAA,RAAKH,uBAAAA;;;AADlD;;;AAGF,eAAA,iFAAA,0BAAA,mFAAA,MAAA,MAAA,zNAACC;AAED,oBAAA,pBAAMI;AAAN,AAEE,yGAAA,zGAACZ;;AACD,sEAAA,/DAAoBC,qEACA,qBAAA,2CAAA,uEAAA,vIAACY,qHAAkBR,6EACAI","names":["main.preload/hi","cljs.core.println","js/shadow.js.shim.module$electron.contextBridge","js/shadow.js.shim.module$electron.ipcRenderer","main.preload/toMainChans","main.preload/fromMainChans","main.preload/send","channel","data","cljs.core/some","main.preload/receive","func","event","main.preload/main","cljs.core/clj->js"],"sourcesContent":["(ns main.preload\n  (:require [\"electron\" :refer [contextBridge ipcRenderer]]))\n\n(defn hi\n  []\n  (println contextBridge ipcRenderer)\n  (println \"hi there! i am preloaded\"))\n\n\n;; -- API fns to explose in the renderer\n\n(def toMainChans   [\"toMain\" \"other-channels\"])\n(def fromMainChans [\"toMain\" \"other-channels\"])\n\n(defn send\n  [channel data]\n  (if (some #{channel} toMainChans)\n    (.send ipcRenderer channel data)))\n\n\n(defn receive\n  [channel func]\n  (if (some #{channel} fromMainChans)\n    (.on ipcRenderer channel (fn [event data] (func data)))))\n\n(some #{101} [100 101 102])\n\n(defn main\n  []\n  (println \"\ud83d\ude47\u200d\ufe0f Establishing renderer's api from preload...\")\n  (.exposeInMainWorld contextBridge \"api\"\n                      (clj->js {:send    send\n                                :receive receive }))\n  )\n"]}