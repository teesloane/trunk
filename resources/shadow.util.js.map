{"version":3,"sources":["shadow/util.cljs"],"mappings":"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","names":["shadow.util/console-friendly","a","cljs.core/Keyword","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str","shadow.util/console?","js/console","var_args","G__35936","shadow.util/log","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","seq35929","G__35930","cljs.core/first","cljs.core/next","G__35931","G__35932","G__35933","G__35934","G__35935","self__4805__auto__","a1","a2","a3","a4","a5","a6","more","shadow.util/remove-from-vector","coll","key","cljs.core.map_indexed","cljs.core/vector","cljs.core.reduce","p__35941","vec__35942","cljs.core.nth","v","idx","item","cljs.core._EQ_","cljs.core.conj_BANG_","cljs.core/transient","cljs.core/persistent!","shadow.util/remove-item-from-coll","value","cljs.core/IVector","cljs.core/IMap","cljs.core.dissoc","cljs.core/ISet","cljs.core.disj","cljs.core.ex_info"],"sourcesContent":["(ns shadow.util\n  (:require-macros [shadow.util :as m]))\n\n(defn console-friendly [a]\n  (cond\n   (nil? a) \"nil\"\n   (keyword? a) (str a)\n   (string? a) a\n   (number? a) a\n   (satisfies? IPrintWithWriter a) (pr-str a)\n   :else a\n   ))\n\n(def console? (exists? js/console))\n\n(defn log\n  ([a1]\n     (when console?\n       (.log js/console\n             (console-friendly a1))))\n  ([a1 a2]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2))))\n  ([a1 a2 a3]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3))))\n  ([a1 a2 a3 a4]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4))))\n  ([a1 a2 a3 a4 a5]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5))))\n  ([a1 a2 a3 a4 a5 a6]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6))))\n  ([a1 a2 a3 a4 a5 a6 & more]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6)\n             \"more:\"\n             (pr-str more)))))\n\n;; HAX\n(comment\n  (def default-ex-info js/cljs.core.ex-info)\n\n  (set! (.. js/cljs -core -ex-info)\n    (fn shadow-ex-info\n      ([msg map]\n       (m/log \"EX-INFO:\" msg map)\n       (default-ex-info msg map))\n      ([msg map cause]\n       (m/log \"EX-INFO:\" msg map cause)\n       (default-ex-info msg map cause))\n      )))\n\n\n(defn remove-from-vector [coll key]\n  (->> (map-indexed vector coll)\n       (reduce (fn [v [idx item]]\n                 (if (= idx key)\n                   v\n                   (conj! v item)))\n               (transient []))\n       (persistent!)))\n\n(defn remove-item-from-coll [coll key value]\n  (cond\n   (satisfies? IVector coll)\n   (remove-from-vector coll key)\n   (satisfies? IMap coll)\n   (dissoc coll key)\n   (satisfies? ISet coll)\n   (disj coll value)\n   :else (throw (ex-info \"unknown coll type\" {:coll coll :key key :value value}))\n   ))\n"]}